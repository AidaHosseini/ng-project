{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\map.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useMemo } from \"react\";\n// import { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\n// import 'leaflet/dist/leaflet.css';\n// import SearchForm from \"./SearchForm\";\n// import L from \"leaflet\";\n// import { useLocation } from \"./LocationContext\";\n\n// // ðŸŽ¯ Predefined colors for clinics, MVZ, ASV\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"black\", \"brown\"];\n\n// // ðŸŸ¢ Custom icons for different provider types\n// const userIcon = L.icon({\n//     iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\", // Unique user icon\n//     iconSize: [35, 35],\n//     iconAnchor: [17, 35]\n// });\n\n// // ðŸŽ¯ Function to create color-matched clinic icons\n// const getColoredClinicIcon = (color) => {\n//     return L.divIcon({\n//         className: \"custom-clinic-marker\",\n//         html: `<div style=\"\n//             width: 30px; height: 30px; \n//             background-color: ${color}; \n//             border-radius: 50%; \n//             border: 2px solid black;\n//             display: flex; justify-content: center; align-items: center;\">\n//         </div>`,\n//         iconSize: [30, 30],\n//         iconAnchor: [15, 30]\n//     });\n// };\n\n// const Map = () => {\n//     const [graphData, setGraphData] = useState([]);\n//     const [userLocation, setUserLocation] = useState(null);\n//     const [locationChoice, setLocationChoice] = useState(\"\"); \n//     const [manualAddress, setManualAddress] = useState(\"\"); \n//     const { setAllLocations } = useLocation();\n\n//     // ðŸš€ Get user's current location\n//     const fetchMyLocation = () => {\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition(\n//                 (position) => {\n//                     setUserLocation({\n//                         latitude: position.coords.latitude,\n//                         longitude: position.coords.longitude\n//                     });\n//                 },\n//                 (error) => {\n//                     console.error(\"Error getting location:\", error);\n//                 }\n//             );\n//         }\n//     };\n\n//     // ðŸŽ¯ Handle location selection\n//     const handleLocationChoice = (choice) => {\n//         setLocationChoice(choice);\n//         setUserLocation(null);\n//         setManualAddress(\"\"); \n//         if (choice === \"my-location\") {\n//             fetchMyLocation();\n//         }\n//     };\n\n//     // ðŸŽ¯ Convert address to latitude & longitude using OpenStreetMap's Nominatim API\n//     const handleManualAddressSearch = async () => {\n//         if (!manualAddress.trim()) {\n//             alert(\"Please enter a valid address.\");\n//             return;\n//         }\n//         try {\n//             const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n//             const data = await response.json();\n//             if (data.length > 0) {\n//                 setUserLocation({\n//                     latitude: parseFloat(data[0].lat),\n//                     longitude: parseFloat(data[0].lon)\n//                 });\n//             } else {\n//                 alert(\"Address not found. Please enter a more precise location.\");\n//             }\n//         } catch (error) {\n//             console.error(\"Error fetching geolocation:\", error);\n//             alert(\"Failed to fetch location. Try again later.\");\n//         }\n//     };\n\n//     // âœ… UseMemo to prevent unnecessary re-renders\n//     const allLocations = useMemo(() => {\n//         const locations = [...graphData];\n//         if (userLocation) {\n//             locations.push({ clinic_name: \"Your Location\", provider_type: \"User\", ...userLocation });\n//         }\n//         return locations;\n//     }, [graphData, userLocation]);\n\n//     // âœ… Update locations when changed\n//     useEffect(() => {\n//         setAllLocations(allLocations);\n//     }, [allLocations, setAllLocations]);\n\n//     return (\n//         <div>\n//             <h1>New Ways of Care Provision and Analysis of Patient Flows</h1>\n//             <div>\n//                 <h3>Select Your Location:</h3>\n//                 <button onClick={() => handleLocationChoice(\"my-location\")}>Use My Location</button>\n//                 <button onClick={() => handleLocationChoice(\"manual\")}>Enter Location Manually</button>\n//             </div>\n\n//             {locationChoice === \"manual\" && (\n//                 <div>\n//                     <input \n//                         type=\"text\" \n//                         placeholder=\"Enter your address\" \n//                         value={manualAddress} \n//                         onChange={(e) => setManualAddress(e.target.value)}\n//                     />\n//                     <button onClick={handleManualAddressSearch}>Search Address</button>\n//                 </div>\n//             )}\n\n//             <SearchForm setGraphData={setGraphData} />\n\n//             <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: 500, width: \"60%\" }}>\n//                 <TileLayer\n//                     attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n//                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//                 />\n\n//                 {/* ðŸŽ¯ Draw user location marker */}\n//                 {userLocation && (\n//                     <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\n//                         <Popup><strong>Your Location</strong></Popup>\n//                     </Marker>\n//                 )}\n\n//                 {/* ðŸŽ¯ Draw clinic markers with color-matched icons */}\n//                 {graphData.map((data, index) => {\n//                     const color = lineColors[index % lineColors.length]; // Match line & marker color\n//                     return (\n//                         <Marker key={index} position={[data.latitude, data.longitude]} icon={getColoredClinicIcon(color)}>\n//                             <Popup>\n//                                 <strong>{data.clinic_name}</strong><br />\n//                                 City: {data.city} <br />\n//                                 Beds: {data.number_of_beds} <br />\n//                                 Address: {data.address || \"N/A\"}\n//                             </Popup>\n//                         </Marker>\n//                     );\n//                 })}\n\n//                 {/* ðŸŽ¯ Draw lines from user location to each clinic */}\n//                 {userLocation && graphData.map((data, index) => {\n//                     const color = lineColors[index % lineColors.length]; // Match line color\n//                     return (\n//                         <Polyline \n//                             key={index} \n//                             positions={[\n//                                 [userLocation.latitude, userLocation.longitude], \n//                                 [data.latitude, data.longitude]\n//                             ]} \n//                             color={color} \n//                             weight={3} \n//                         />\n//                     );\n//                 })}\n//             </MapContainer>\n//         </div>\n//     );\n// };\n\n// export default Map;\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport SearchForm from \"./SearchForm\";\nimport L from \"leaflet\";\nimport { useLocation } from \"./LocationContext\";\n\n// ðŸŽ¯ Predefined colors for clinics, ensuring consistent colors across markers and analytics\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"black\", \"brown\"];\n\n// ðŸŽ¯ Function to create color-matched clinic icons\nconst getColoredClinicIcon = color => {\n  return L.divIcon({\n    className: \"custom-clinic-marker\",\n    html: `<div style=\"\n            width: 25px; height: 25px; \n            background-color: ${color}; \n            border-radius: 50%; \n            border: 2px solid black;\n            display: flex; justify-content: center; align-items: center;\">\n        </div>`,\n    iconSize: [25, 25],\n    iconAnchor: [12, 25]\n  });\n};\n\n// ðŸŽ¯ Custom icon for user location\nconst userIcon = L.icon({\n  iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\n  iconSize: [35, 35],\n  iconAnchor: [17, 35]\n});\nconst Map = () => {\n  _s();\n  const [graphData, setGraphData] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const [locationChoice, setLocationChoice] = useState(\"\");\n  const [manualAddress, setManualAddress] = useState(\"\");\n  const {\n    setAllLocations\n  } = useLocation();\n\n  // ðŸš€ Assign colors based on clinic index for consistency\n  const assignedColors = useMemo(() => {\n    const colorMap = {};\n    graphData.forEach((data, index) => {\n      colorMap[data.clinic_name] = lineColors[index % lineColors.length]; // Ensuring consistent color assignment\n    });\n    return colorMap;\n  }, [graphData]);\n\n  // ðŸš€ Get user's current location\n  const fetchMyLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setUserLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      }, error => {\n        console.error(\"Error getting location:\", error);\n      });\n    }\n  };\n\n  // ðŸŽ¯ Handle location selection\n  const handleLocationChoice = choice => {\n    setLocationChoice(choice);\n    setUserLocation(null);\n    setManualAddress(\"\");\n    if (choice === \"my-location\") {\n      fetchMyLocation();\n    }\n  };\n\n  // ðŸŽ¯ Convert address to latitude & longitude using OpenStreetMap's Nominatim API\n  const handleManualAddressSearch = async () => {\n    if (!manualAddress.trim()) {\n      alert(\"Please enter a valid address.\");\n      return;\n    }\n    try {\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n      const data = await response.json();\n      if (data.length > 0) {\n        setUserLocation({\n          latitude: parseFloat(data[0].lat),\n          longitude: parseFloat(data[0].lon)\n        });\n      } else {\n        alert(\"Address not found. Please enter a more precise location.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching geolocation:\", error);\n      alert(\"Failed to fetch location. Try again later.\");\n    }\n  };\n\n  // âœ… UseMemo to prevent unnecessary re-renders\n  const allLocations = useMemo(() => {\n    const locations = [...graphData];\n    if (userLocation) {\n      locations.push({\n        clinic_name: \"Your Location\",\n        provider_type: \"User\",\n        ...userLocation\n      });\n    }\n    return locations;\n  }, [graphData, userLocation]);\n\n  // âœ… Update locations when changed\n  useEffect(() => {\n    setAllLocations(allLocations);\n  }, [allLocations, setAllLocations]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"New Ways of Care Provision and Analysis of Patient Flows\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Your Location:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleLocationChoice(\"my-location\"),\n        children: \"Use My Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleLocationChoice(\"manual\"),\n        children: \"Enter Location Manually\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }, this), locationChoice === \"manual\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your address\",\n        value: manualAddress,\n        onChange: e => setManualAddress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleManualAddressSearch,\n        children: \"Search Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      setGraphData: setGraphData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [50.851, 8.015],\n      zoom: 8,\n      scrollWheelZoom: false,\n      style: {\n        height: 500,\n        width: \"60%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }, this), userLocation && /*#__PURE__*/_jsxDEV(Marker, {\n        position: [userLocation.latitude, userLocation.longitude],\n        icon: userIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Your Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 32\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 21\n      }, this), graphData.map((data, index) => {\n        const color = assignedColors[data.clinic_name] || \"gray\"; // Ensure color is always assigned\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: [data.latitude, data.longitude],\n          icon: getColoredClinicIcon(color),\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: data.clinic_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 68\n            }, this), \"City: \", data.city, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 51\n            }, this), \"Beds: \", data.number_of_beds, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 61\n            }, this), \"Address: \", data.address || \"N/A\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 25\n        }, this);\n      }), userLocation && graphData.map((data, index) => {\n        const color = assignedColors[data.clinic_name] || \"gray\"; // Ensure color is always assigned\n        return /*#__PURE__*/_jsxDEV(Polyline, {\n          positions: [[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]],\n          color: color,\n          weight: 3\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Leistungserbringer Informationen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 17\n      }, this), graphData.map((data, index) => {\n        const color = assignedColors[data.clinic_name] || \"gray\"; // Consistent color\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: \"5px\",\n            borderBottom: \"1px solid #ddd\",\n            display: \"flex\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: \"10px\",\n              height: \"10px\",\n              backgroundColor: color,\n              borderRadius: \"50%\",\n              marginRight: \"10px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: data.clinic_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 35\n            }, this), \" - \", data.city, \" (Beds: \", data.number_of_beds, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 9\n  }, this);\n};\n_s(Map, \"bKaiZwi5DnJx5Z71s9ekUGuSagI=\", false, function () {\n  return [useLocation];\n});\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","MapContainer","TileLayer","useMap","Marker","Popup","Polyline","SearchForm","L","useLocation","jsxDEV","_jsxDEV","lineColors","getColoredClinicIcon","color","divIcon","className","html","iconSize","iconAnchor","userIcon","icon","iconUrl","Map","_s","graphData","setGraphData","userLocation","setUserLocation","locationChoice","setLocationChoice","manualAddress","setManualAddress","setAllLocations","assignedColors","colorMap","forEach","data","index","clinic_name","length","fetchMyLocation","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","error","console","handleLocationChoice","choice","handleManualAddressSearch","trim","alert","response","fetch","encodeURIComponent","json","parseFloat","lat","lon","allLocations","locations","push","provider_type","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","e","target","center","zoom","scrollWheelZoom","style","height","width","attribution","url","map","city","number_of_beds","address","positions","weight","marginTop","padding","borderBottom","display","alignItems","backgroundColor","borderRadius","marginRight","_c","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/map.js"],"sourcesContent":["// import React, { useState, useEffect, useMemo } from \"react\";\r\n// import { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\r\n// import 'leaflet/dist/leaflet.css';\r\n// import SearchForm from \"./SearchForm\";\r\n// import L from \"leaflet\";\r\n// import { useLocation } from \"./LocationContext\";\r\n\r\n// // ðŸŽ¯ Predefined colors for clinics, MVZ, ASV\r\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"black\", \"brown\"];\r\n\r\n// // ðŸŸ¢ Custom icons for different provider types\r\n// const userIcon = L.icon({\r\n//     iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\", // Unique user icon\r\n//     iconSize: [35, 35],\r\n//     iconAnchor: [17, 35]\r\n// });\r\n\r\n// // ðŸŽ¯ Function to create color-matched clinic icons\r\n// const getColoredClinicIcon = (color) => {\r\n//     return L.divIcon({\r\n//         className: \"custom-clinic-marker\",\r\n//         html: `<div style=\"\r\n//             width: 30px; height: 30px; \r\n//             background-color: ${color}; \r\n//             border-radius: 50%; \r\n//             border: 2px solid black;\r\n//             display: flex; justify-content: center; align-items: center;\">\r\n//         </div>`,\r\n//         iconSize: [30, 30],\r\n//         iconAnchor: [15, 30]\r\n//     });\r\n// };\r\n\r\n// const Map = () => {\r\n//     const [graphData, setGraphData] = useState([]);\r\n//     const [userLocation, setUserLocation] = useState(null);\r\n//     const [locationChoice, setLocationChoice] = useState(\"\"); \r\n//     const [manualAddress, setManualAddress] = useState(\"\"); \r\n//     const { setAllLocations } = useLocation();\r\n\r\n//     // ðŸš€ Get user's current location\r\n//     const fetchMyLocation = () => {\r\n//         if (navigator.geolocation) {\r\n//             navigator.geolocation.getCurrentPosition(\r\n//                 (position) => {\r\n//                     setUserLocation({\r\n//                         latitude: position.coords.latitude,\r\n//                         longitude: position.coords.longitude\r\n//                     });\r\n//                 },\r\n//                 (error) => {\r\n//                     console.error(\"Error getting location:\", error);\r\n//                 }\r\n//             );\r\n//         }\r\n//     };\r\n\r\n//     // ðŸŽ¯ Handle location selection\r\n//     const handleLocationChoice = (choice) => {\r\n//         setLocationChoice(choice);\r\n//         setUserLocation(null);\r\n//         setManualAddress(\"\"); \r\n//         if (choice === \"my-location\") {\r\n//             fetchMyLocation();\r\n//         }\r\n//     };\r\n\r\n//     // ðŸŽ¯ Convert address to latitude & longitude using OpenStreetMap's Nominatim API\r\n//     const handleManualAddressSearch = async () => {\r\n//         if (!manualAddress.trim()) {\r\n//             alert(\"Please enter a valid address.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\r\n//             const data = await response.json();\r\n//             if (data.length > 0) {\r\n//                 setUserLocation({\r\n//                     latitude: parseFloat(data[0].lat),\r\n//                     longitude: parseFloat(data[0].lon)\r\n//                 });\r\n//             } else {\r\n//                 alert(\"Address not found. Please enter a more precise location.\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error fetching geolocation:\", error);\r\n//             alert(\"Failed to fetch location. Try again later.\");\r\n//         }\r\n//     };\r\n\r\n//     // âœ… UseMemo to prevent unnecessary re-renders\r\n//     const allLocations = useMemo(() => {\r\n//         const locations = [...graphData];\r\n//         if (userLocation) {\r\n//             locations.push({ clinic_name: \"Your Location\", provider_type: \"User\", ...userLocation });\r\n//         }\r\n//         return locations;\r\n//     }, [graphData, userLocation]);\r\n\r\n//     // âœ… Update locations when changed\r\n//     useEffect(() => {\r\n//         setAllLocations(allLocations);\r\n//     }, [allLocations, setAllLocations]);\r\n\r\n//     return (\r\n//         <div>\r\n//             <h1>New Ways of Care Provision and Analysis of Patient Flows</h1>\r\n//             <div>\r\n//                 <h3>Select Your Location:</h3>\r\n//                 <button onClick={() => handleLocationChoice(\"my-location\")}>Use My Location</button>\r\n//                 <button onClick={() => handleLocationChoice(\"manual\")}>Enter Location Manually</button>\r\n//             </div>\r\n\r\n//             {locationChoice === \"manual\" && (\r\n//                 <div>\r\n//                     <input \r\n//                         type=\"text\" \r\n//                         placeholder=\"Enter your address\" \r\n//                         value={manualAddress} \r\n//                         onChange={(e) => setManualAddress(e.target.value)}\r\n//                     />\r\n//                     <button onClick={handleManualAddressSearch}>Search Address</button>\r\n//                 </div>\r\n//             )}\r\n\r\n//             <SearchForm setGraphData={setGraphData} />\r\n\r\n//             <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: 500, width: \"60%\" }}>\r\n//                 <TileLayer\r\n//                     attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n//                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n//                 />\r\n                \r\n//                 {/* ðŸŽ¯ Draw user location marker */}\r\n//                 {userLocation && (\r\n//                     <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\r\n//                         <Popup><strong>Your Location</strong></Popup>\r\n//                     </Marker>\r\n//                 )}\r\n\r\n//                 {/* ðŸŽ¯ Draw clinic markers with color-matched icons */}\r\n//                 {graphData.map((data, index) => {\r\n//                     const color = lineColors[index % lineColors.length]; // Match line & marker color\r\n//                     return (\r\n//                         <Marker key={index} position={[data.latitude, data.longitude]} icon={getColoredClinicIcon(color)}>\r\n//                             <Popup>\r\n//                                 <strong>{data.clinic_name}</strong><br />\r\n//                                 City: {data.city} <br />\r\n//                                 Beds: {data.number_of_beds} <br />\r\n//                                 Address: {data.address || \"N/A\"}\r\n//                             </Popup>\r\n//                         </Marker>\r\n//                     );\r\n//                 })}\r\n\r\n//                 {/* ðŸŽ¯ Draw lines from user location to each clinic */}\r\n//                 {userLocation && graphData.map((data, index) => {\r\n//                     const color = lineColors[index % lineColors.length]; // Match line color\r\n//                     return (\r\n//                         <Polyline \r\n//                             key={index} \r\n//                             positions={[\r\n//                                 [userLocation.latitude, userLocation.longitude], \r\n//                                 [data.latitude, data.longitude]\r\n//                             ]} \r\n//                             color={color} \r\n//                             weight={3} \r\n//                         />\r\n//                     );\r\n//                 })}\r\n//             </MapContainer>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Map;\r\n\r\nimport React, { useState, useEffect, useMemo } from \"react\";\r\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport SearchForm from \"./SearchForm\";\r\nimport L from \"leaflet\";\r\nimport { useLocation } from \"./LocationContext\";\r\n\r\n// ðŸŽ¯ Predefined colors for clinics, ensuring consistent colors across markers and analytics\r\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"black\", \"brown\"];\r\n\r\n// ðŸŽ¯ Function to create color-matched clinic icons\r\nconst getColoredClinicIcon = (color) => {\r\n    return L.divIcon({\r\n        className: \"custom-clinic-marker\",\r\n        html: `<div style=\"\r\n            width: 25px; height: 25px; \r\n            background-color: ${color}; \r\n            border-radius: 50%; \r\n            border: 2px solid black;\r\n            display: flex; justify-content: center; align-items: center;\">\r\n        </div>`,\r\n        iconSize: [25, 25],\r\n        iconAnchor: [12, 25]\r\n    });\r\n};\r\n\r\n// ðŸŽ¯ Custom icon for user location\r\nconst userIcon = L.icon({\r\n    iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\r\n    iconSize: [35, 35],\r\n    iconAnchor: [17, 35]\r\n});\r\n\r\nconst Map = () => {\r\n    const [graphData, setGraphData] = useState([]);\r\n    const [userLocation, setUserLocation] = useState(null);\r\n    const [locationChoice, setLocationChoice] = useState(\"\"); \r\n    const [manualAddress, setManualAddress] = useState(\"\"); \r\n    const { setAllLocations } = useLocation();\r\n\r\n    // ðŸš€ Assign colors based on clinic index for consistency\r\n    const assignedColors = useMemo(() => {\r\n        const colorMap = {};\r\n        graphData.forEach((data, index) => {\r\n            colorMap[data.clinic_name] = lineColors[index % lineColors.length]; // Ensuring consistent color assignment\r\n        });\r\n        return colorMap;\r\n    }, [graphData]);\r\n\r\n    // ðŸš€ Get user's current location\r\n    const fetchMyLocation = () => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    setUserLocation({\r\n                        latitude: position.coords.latitude,\r\n                        longitude: position.coords.longitude\r\n                    });\r\n                },\r\n                (error) => {\r\n                    console.error(\"Error getting location:\", error);\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    // ðŸŽ¯ Handle location selection\r\n    const handleLocationChoice = (choice) => {\r\n        setLocationChoice(choice);\r\n        setUserLocation(null);\r\n        setManualAddress(\"\"); \r\n        if (choice === \"my-location\") {\r\n            fetchMyLocation();\r\n        }\r\n    };\r\n\r\n    // ðŸŽ¯ Convert address to latitude & longitude using OpenStreetMap's Nominatim API\r\n    const handleManualAddressSearch = async () => {\r\n        if (!manualAddress.trim()) {\r\n            alert(\"Please enter a valid address.\");\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\r\n            const data = await response.json();\r\n            if (data.length > 0) {\r\n                setUserLocation({\r\n                    latitude: parseFloat(data[0].lat),\r\n                    longitude: parseFloat(data[0].lon)\r\n                });\r\n            } else {\r\n                alert(\"Address not found. Please enter a more precise location.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching geolocation:\", error);\r\n            alert(\"Failed to fetch location. Try again later.\");\r\n        }\r\n    };\r\n\r\n    // âœ… UseMemo to prevent unnecessary re-renders\r\n    const allLocations = useMemo(() => {\r\n        const locations = [...graphData];\r\n        if (userLocation) {\r\n            locations.push({ clinic_name: \"Your Location\", provider_type: \"User\", ...userLocation });\r\n        }\r\n        return locations;\r\n    }, [graphData, userLocation]);\r\n\r\n    // âœ… Update locations when changed\r\n    useEffect(() => {\r\n        setAllLocations(allLocations);\r\n    }, [allLocations, setAllLocations]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>New Ways of Care Provision and Analysis of Patient Flows</h1>\r\n            <div>\r\n                <h3>Select Your Location:</h3>\r\n                <button onClick={() => handleLocationChoice(\"my-location\")}>Use My Location</button>\r\n                <button onClick={() => handleLocationChoice(\"manual\")}>Enter Location Manually</button>\r\n            </div>\r\n\r\n            {locationChoice === \"manual\" && (\r\n                <div>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Enter your address\" \r\n                        value={manualAddress} \r\n                        onChange={(e) => setManualAddress(e.target.value)}\r\n                    />\r\n                    <button onClick={handleManualAddressSearch}>Search Address</button>\r\n                </div>\r\n            )}\r\n\r\n            <SearchForm setGraphData={setGraphData} />\r\n\r\n            <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: 500, width: \"60%\" }}>\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                \r\n                {/* ðŸŽ¯ Draw user location marker */}\r\n                {userLocation && (\r\n                    <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\r\n                        <Popup><strong>Your Location</strong></Popup>\r\n                    </Marker>\r\n                )}\r\n\r\n                {/* ðŸŽ¯ Draw clinic markers with color-matched icons */}\r\n                {graphData.map((data, index) => {\r\n                    const color = assignedColors[data.clinic_name] || \"gray\"; // Ensure color is always assigned\r\n                    return (\r\n                        <Marker key={index} position={[data.latitude, data.longitude]} icon={getColoredClinicIcon(color)}>\r\n                            <Popup>\r\n                                <strong>{data.clinic_name}</strong><br />\r\n                                City: {data.city} <br />\r\n                                Beds: {data.number_of_beds} <br />\r\n                                Address: {data.address || \"N/A\"}\r\n                            </Popup>\r\n                        </Marker>\r\n                    );\r\n                })}\r\n\r\n                {/* ðŸŽ¯ Draw lines from user location to each clinic */}\r\n                {userLocation && graphData.map((data, index) => {\r\n                    const color = assignedColors[data.clinic_name] || \"gray\"; // Ensure color is always assigned\r\n                    return (\r\n                        <Polyline \r\n                            key={index} \r\n                            positions={[\r\n                                [userLocation.latitude, userLocation.longitude], \r\n                                [data.latitude, data.longitude]\r\n                            ]} \r\n                            color={color} \r\n                            weight={3} \r\n                        />\r\n                    );\r\n                })}\r\n            </MapContainer>\r\n\r\n            {/* ðŸŽ¯ Update Analystics to use the same color mapping */}\r\n            <div style={{ marginTop: \"20px\" }}>\r\n                <h3>Leistungserbringer Informationen</h3>\r\n                {graphData.map((data, index) => {\r\n                    const color = assignedColors[data.clinic_name] || \"gray\"; // Consistent color\r\n                    return (\r\n                        <div key={index} style={{ padding: \"5px\", borderBottom: \"1px solid #ddd\", display: \"flex\", alignItems: \"center\" }}>\r\n                            <div style={{\r\n                                width: \"10px\",\r\n                                height: \"10px\",\r\n                                backgroundColor: color,\r\n                                borderRadius: \"50%\",\r\n                                marginRight: \"10px\"\r\n                            }}></div>\r\n                            <span><strong>{data.clinic_name}</strong> - {data.city} (Beds: {data.number_of_beds})</span>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC3D,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AACxF,OAAO,0BAA0B;AACjC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,CAAC,MAAM,SAAS;AACvB,SAASC,WAAW,QAAQ,mBAAmB;;AAE/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC;;AAEjF;AACA,M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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}