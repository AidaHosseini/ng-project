{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\Analystics.js\",\n  _s = $RefreshSig$();\n// // export default Analytics;\n// import React, { useState, useEffect, useMemo, useCallback } from \"react\";\n// import { useLocation } from \"./LocationContext\";\n// import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from \"recharts\";\n\n// const LINE_COLORS = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// const styles = {\n//   scrollWrapper: {\n//     width: \"35%\",\n//     position: \"absolute\",\n//     right: \"10px\",\n//     top: \"130px\",\n//     bottom: \"5px\",\n//     height: \"100%\",\n//     display: \"flex\",\n//     flexDirection: \"column\",\n//     gap: \"10px\",\n//     padding: \"10px\",\n//     fontSize: \"12px\",\n//     fontWeight: \"600\",\n//     boxSizing: \"border-box\"\n//   },\n\n//   scrollSection: (percentage) => ({\n//     height: `${percentage}%`,\n//     display: \"flex\",\n//     flexDirection: \"column\",\n//     overflow: \"hidden\"\n//   }),\n\n//   scrollSectionContent: {\n//     flex: 1,\n//     overflowY: \"auto\",\n//     backgroundColor: \"#F0F1F1\",\n//     border: \"2px solid #b3e5fc\",\n//     padding: \"10px\",\n//     borderRadius: \"8px\",\n//     boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\"\n//   },\n\n//   title: {\n//     fontSize: \"16px\",\n//     marginBottom: \"4px\",\n//     fontWeight: \"600\",\n//     padding: \"2px 6px\",\n//     borderRadius: \"2px\"\n//   },\n\n//   list: {\n//     listStyleType: \"none\",\n//     padding: 0,\n//     margin: 0\n//   },\n\n//   listItem: {\n//     marginBottom: \"8px\",\n//     padding: \"8px\",\n//     borderBottom: \"1px solid #ddd\"\n//   },\n\n//   bold: { fontWeight: \"600\" },\n\n//   noData: {\n//     fontStyle: \"italic\",\n//     color: \"#999\"\n//   },\n\n//   colorDot: {\n//     display: \"inline-block\",\n//     width: \"12px\",\n//     height: \"12px\",\n//     borderRadius: \"50%\",\n//     marginRight: \"5px\"\n//   },\n\n//   calculatingText: {\n//     color: \"#666\",\n//     fontStyle: \"italic\"\n//   }\n// };\n\n// // Haversine Formula to calculate distances\n// const haversineDistance = (lat1, lon1, lat2, lon2) => {\n//     const toRad = (value) => (value * Math.PI) / 180;\n\n//     const R = 6371; // Radius of Earth in kilometers\n//     const dLat = toRad(lat2 - lat1);\n//     const dLon = toRad(lon2 - lon1);\n\n//     const a =\n//       Math.sin(dLat / 2) ** 2 +\n//       Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) ** 2;\n\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n//     return (R * c).toFixed(2);\n//   };\n// const Analytics = React.memo(() => {\n//   const { allLocations, selectedLocation } = useLocation();\n//   const [distances, setDistances] = useState({});\n\n//   const originLocation = useMemo(() => {\n//     return allLocations.find(loc =>\n//       loc.clinic_name === \"Your Location\" || loc.clinic_name === \"Zentrum (Umkreis)\"\n//     );\n//   }, [allLocations]);\n\n//   const getProviderKey = (type, name, address) => `${type}-${(name || '').trim()}-${(address || '').trim()}`;\n\n//   const getProviderDetails = (provider) => {\n//     const type = provider.clinic_name ? \"clinic\" :\n//       provider.mvz_name ? \"mvz\" :\n//       provider.asv_name ? \"asv\" :\n//       provider.niedergelassene_name ? \"niedergelassene\" :\n//       provider.neurologe_name ? \"neurologe\" :\n//       provider.onkologe_name ? \"onkologe\" : null;\n\n//     const name = provider.clinic_name || provider.mvz_name || provider.asv_name || provider.niedergelassene_name || provider.neurologe_name || provider.onkologe_name;\n//     const address = provider.clinic_address || provider.mvz_address || provider.asv_address || provider.niedergelassene_address || provider.neurologe_address || provider.onkologe_address;\n//     const city = provider.clinic_city || provider.mvz_city || provider.asv_city || provider.niedergelassene_city || provider.neurologe_city || provider.onkologe_city;\n\n//     const lat = provider.clinic_latitude || provider.mvz_latitude || provider.asv_latitude || provider.niedergelassene_latitude || provider.neurologe_latitude || provider.onkologe_latitude;\n//     const lon = provider.clinic_longitude || provider.mvz_longitude || provider.asv_longitude || provider.niedergelassene_longitude || provider.neurologe_longitude || provider.onkologe_longitude;\n\n//     return { type, name, address, city, lat, lon };\n//   };\n\n//   const filteredLocations = useMemo(() => allLocations.filter(p => p.clinic_name !== \"Your Location\" && p.clinic_name !== \"Zentrum (Umkreis)\"), [allLocations]);\n\n//   const renderSelectedLocationInfo = () => {\n//     const details = selectedLocation ? getProviderDetails(selectedLocation) : null;\n//     if (!details) return <p style={styles.noData}>Keine Einrichtung ausgewählt.</p>;\n//     const key = getProviderKey(details.type, details.name, details.address);\n//     return (\n//       <>\n//         <p><strong>Name:</strong> {details.name}</p>\n//         <p><strong>Adresse:</strong> {details.address}</p>\n//         <p><strong>Stadt:</strong> {details.city}</p>\n//         <p><strong>Beste Route:</strong> {distances[key] ? `${distances[key]} km` : \"Berechne...\"}</p>\n//       </>\n//     );\n//   };\n\n//   const renderProviderList = () => (\n//     filteredLocations.length === 0 ? <p style={styles.noData}>Keine Daten verfügbar.</p> : (\n//       <ul style={styles.list}>\n//         {filteredLocations.map((provider, index) => {\n//           const { type, name, address, city } = getProviderDetails(provider);\n//           const key = getProviderKey(type, name, address);\n//           return (\n//             <li key={index} style={styles.listItem}>\n//               <span style={{ ...styles.colorDot, backgroundColor: LINE_COLORS[index % LINE_COLORS.length] }} />\n//               <strong>{name}</strong><br />\n//               {address && <>Adresse: {address}<br /></>}\n//               {city && <>Stadt: {city}<br /></>}\n//               Beste Route: <span style={styles.bold}>{distances[key] || \"Berechne...\"} km</span>\n//             </li>\n//           );\n//         })}\n//       </ul>\n//     )\n//   );\n\n//   const mockICDData = [\n//     { icd: \"D27\", count: 120 },\n//     { icd: \"C50\", count: 85 },\n//     { icd: \"G40\", count: 42 },\n//     { icd: \"I10\", count: 60 },\n//     { icd: \"C34\", count: 30 }\n//   ];\n\n//   return (\n//     <div style={styles.scrollWrapper}>\n//       <div style={styles.scrollSection(20)}>\n//         <h3 style={styles.title}>Informationen zur ausgewählten Einrichtung</h3>\n//         <div style={styles.scrollSectionContent}>{renderSelectedLocationInfo()}</div>\n//       </div>\n\n//       <div style={styles.scrollSection(30)}>\n//         <h3 style={styles.title}>Leistungserbringer Informationen</h3>\n//         <div style={styles.scrollSectionContent}>{renderProviderList()}</div>\n//       </div>\n\n//       <div style={styles.scrollSection(45)}>\n//         <h3 style={styles.title}>Analytics Dashboard</h3>\n//         <div style={styles.scrollSectionContent}>\n//           <div style={{ marginBottom: \"20px\" }}>\n//             <h4>Verteilung der ICD-Fälle</h4>\n//             <p>Zeigt an, wie viele Fälle (Fallzahlen) mit jedem ICD-Code verbunden sind.</p>\n//             <p>Darstellung als Balkendiagramm nach ICD-Code.</p>\n//             <ResponsiveContainer width=\"100%\" height={200}>\n//               <BarChart data={mockICDData}>\n//                 <XAxis dataKey=\"icd\" />\n//                 <YAxis />\n//                 <Tooltip />\n//                 <Bar dataKey=\"count\" fill=\"#8884d8\" />\n//               </BarChart>\n//             </ResponsiveContainer>\n//           </div>\n//           <hr />\n//           <div style={{ margin: \"20px 0\" }}>\n//             <h4>Erreichbarkeit</h4>\n//             <p>Berechnet die beste Route (Straßenentfernung) zwischen dem Standort des Nutzers und jedem Anbieter.</p>\n//             <p style={styles.noData}>Noch keine Daten geladen.</p>\n//           </div>\n//           <hr />\n//           <div style={{ margin: \"20px 0\" }}>\n//             <h4>Spezialisierungsgrad</h4>\n//             <p>Ermittelt Zentren mit einer hohen Anzahl von Fällen in einem bestimmten ICD.</p>\n//             <p style={styles.noData}>Noch keine Daten geladen.</p>\n//           </div>\n//           <hr />\n//           <div style={{ margin: \"20px 0\" }}>\n//             <h4>Kooperationsnetzwerke</h4>\n//             <p>Visualisiert Kooperationen zwischen Kliniken, MVZs und ASVs.</p>\n//             <p>Basierend auf KOOPERIERT_MIT-Beziehungen.</p>\n//             <p style={styles.noData}>Noch keine Daten geladen.</p>\n//           </div>\n//           <hr />\n//           <div style={{ marginTop: \"20px\" }}>\n//             <h4>Empfohlene Behandlungsorte</h4>\n//             <p>Schlägt den besten Behandlungsort vor, basierend auf:</p>\n//             <ul>\n//               <li>Entfernung</li>\n//               <li>ICD-Spezialisierung</li>\n//               <li>Konnektivität der Kooperation</li>\n//             </ul>\n//             <p><strong>KI-basiertes Ranking:</strong> z.B. „Top 3 am nächsten + beste ICD-Übereinstimmung“</p>\n//             <p style={styles.noData}>Noch keine Empfehlungen verfügbar.</p>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// });\n\n// export default Analytics;\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { useLocation } from \"./LocationContext\";\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LINE_COLORS = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\nconst getRoadDistance = async (startLat, startLon, endLat, endLon) => {\n  if (!startLat || !startLon || !endLat || !endLon) return \"N/A\";\n  const url = `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    if (data.routes && data.routes.length > 0) {\n      return (data.routes[0].distance / 1000).toFixed(2);\n    }\n    return \"N/A\";\n  } catch (error) {\n    console.error(\"Distance fetch error:\", error);\n    return \"N/A\";\n  }\n};\nconst Analytics = () => {\n  _s();\n  const {\n    allLocations,\n    selectedLocation\n  } = useLocation();\n  const [distances, setDistances] = useState({});\n  const originLocation = useMemo(() => {\n    return allLocations.find(loc => loc.clinic_name === \"Your Location\" || loc.clinic_name === \"Zentrum (Umkreis)\");\n  }, [allLocations]);\n  useEffect(() => {\n    const calculateDistances = async () => {\n      if (!originLocation) return;\n      const newDistances = {};\n      for (const provider of allLocations) {\n        if ([\"Your Location\", \"Zentrum (Umkreis)\"].includes(provider.clinic_name)) continue;\n        const type = provider.clinic_name ? \"clinic\" : provider.mvz_name ? \"mvz\" : provider.asv_name ? \"asv\" : provider.niedergelassene_name ? \"niedergelassene\" : provider.neurologe_name ? \"neurologe\" : \"onkologe\";\n        const name = provider.clinic_name || provider.mvz_name || provider.asv_name || provider.niedergelassene_name || provider.neurologe_name || provider.onkologe_name;\n        const lat = provider.clinic_latitude || provider.mvz_latitude || provider.asv_latitude || provider.niedergelassene_latitude || provider.neurologe_latitude || provider.onkologe_latitude;\n        const lon = provider.clinic_longitude || provider.mvz_longitude || provider.asv_longitude || provider.niedergelassene_longitude || provider.neurologe_longitude || provider.onkologe_longitude;\n        const distance = await getRoadDistance(originLocation.latitude, originLocation.longitude, lat, lon);\n        newDistances[`${type}-${name}`] = distance;\n      }\n      setDistances(newDistances);\n    };\n    calculateDistances();\n  }, [allLocations, originLocation]);\n  const getProviderDetails = provider => ({\n    type: provider.clinic_name ? \"clinic\" : provider.mvz_name ? \"mvz\" : provider.asv_name ? \"asv\" : provider.niedergelassene_name ? \"niedergelassene\" : provider.neurologe_name ? \"neurologe\" : \"onkologe\",\n    name: provider.clinic_name || provider.mvz_name || provider.asv_name || provider.niedergelassene_name || provider.neurologe_name || provider.onkologe_name,\n    address: provider.clinic_address || provider.mvz_address || provider.asv_address || provider.niedergelassene_address || provider.neurologe_address || provider.onkologe_address,\n    city: provider.clinic_city || provider.mvz_city || provider.asv_city || provider.niedergelassene_city || provider.neurologe_city || provider.onkologe_city\n  });\n  const renderProviderList = () => /*#__PURE__*/_jsxDEV(\"ul\", {\n    style: styles.list,\n    children: allLocations.filter(p => ![\"Your Location\", \"Zentrum (Umkreis)\"].includes(p.clinic_name)).map((provider, index) => {\n      const {\n        type,\n        name,\n        address,\n        city\n      } = getProviderDetails(provider);\n      const key = `${type}-${name}`;\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        style: styles.listItem,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            ...styles.colorDot,\n            backgroundColor: LINE_COLORS[index % LINE_COLORS.length]\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 36\n        }, this), \"Adresse: \", address, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 31\n        }, this), \"Stadt: \", city, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 26\n        }, this), \"Beste Route: \", distances[key] ? `${distances[key]} km` : \"Berechne...\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.scrollWrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.scrollSection(50),\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: styles.title,\n        children: \"Leistungserbringer Informationen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.scrollSectionContent,\n        children: renderProviderList()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.scrollSection(50),\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: styles.title,\n        children: \"Analytics Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.scrollSectionContent,\n        children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 200,\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: [{\n              icd: \"D27\",\n              count: 120\n            }],\n            children: [/*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"icd\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"count\",\n              fill: \"#8884d8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 5\n  }, this);\n};\n_s(Analytics, \"+qRxEB3O4m2Uk26qScrf/23EdwQ=\", false, function () {\n  return [useLocation];\n});\n_c = Analytics;\nconst styles = {\n  scrollWrapper: {\n    position: \"absolute\",\n    width: \"35%\",\n    top: 130,\n    right: 10,\n    bottom: 5,\n    padding: 10,\n    overflowY: \"auto\",\n    fontSize: 12,\n    fontWeight: \"600\"\n  },\n  scrollSection: percentage => ({\n    height: `${percentage}%`,\n    marginBottom: 10\n  }),\n  scrollSectionContent: {\n    overflowY: \"auto\",\n    backgroundColor: \"#F0F1F1\",\n    padding: 10,\n    borderRadius: 8,\n    border: \"2px solid #b3e5fc\"\n  },\n  title: {\n    fontSize: 16,\n    marginBottom: 4\n  },\n  list: {\n    listStyle: \"none\",\n    padding: 0\n  },\n  listItem: {\n    borderBottom: \"1px solid #ddd\",\n    paddingBottom: 8,\n    marginBottom: 8\n  },\n  colorDot: {\n    width: 12,\n    height: 12,\n    borderRadius: \"50%\",\n    display: \"inline-block\",\n    marginRight: 5\n  }\n};\nexport default Analytics;\nvar _c;\n$RefreshReg$(_c, \"Analytics\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useLocation","BarChart","Bar","XAxis","YAxis","Tooltip","ResponsiveContainer","jsxDEV","_jsxDEV","LINE_COLORS","getRoadDistance","startLat","startLon","endLat","endLon","url","response","fetch","data","json","routes","length","distance","toFixed","error","console","Analytics","_s","allLocations","selectedLocation","distances","setDistances","originLocation","find","loc","clinic_name","calculateDistances","newDistances","provider","includes","type","mvz_name","asv_name","niedergelassene_name","neurologe_name","name","onkologe_name","lat","clinic_latitude","mvz_latitude","asv_latitude","niedergelassene_latitude","neurologe_latitude","onkologe_latitude","lon","clinic_longitude","mvz_longitude","asv_longitude","niedergelassene_longitude","neurologe_longitude","onkologe_longitude","latitude","longitude","getProviderDetails","address","clinic_address","mvz_address","asv_address","niedergelassene_address","neurologe_address","onkologe_address","city","clinic_city","mvz_city","asv_city","niedergelassene_city","neurologe_city","onkologe_city","renderProviderList","style","styles","list","children","filter","p","map","index","key","listItem","colorDot","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","scrollWrapper","scrollSection","title","scrollSectionContent","width","height","icd","count","dataKey","fill","_c","position","top","right","bottom","padding","overflowY","fontSize","fontWeight","percentage","marginBottom","borderRadius","border","listStyle","borderBottom","paddingBottom","display","marginRight","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/Analystics.js"],"sourcesContent":["// // export default Analytics;\r\n// import React, { useState, useEffect, useMemo, useCallback } from \"react\";\r\n// import { useLocation } from \"./LocationContext\";\r\n// import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from \"recharts\";\r\n\r\n// const LINE_COLORS = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// const styles = {\r\n//   scrollWrapper: {\r\n//     width: \"35%\",\r\n//     position: \"absolute\",\r\n//     right: \"10px\",\r\n//     top: \"130px\",\r\n//     bottom: \"5px\",\r\n//     height: \"100%\",\r\n//     display: \"flex\",\r\n//     flexDirection: \"column\",\r\n//     gap: \"10px\",\r\n//     padding: \"10px\",\r\n//     fontSize: \"12px\",\r\n//     fontWeight: \"600\",\r\n//     boxSizing: \"border-box\"\r\n//   },\r\n\r\n//   scrollSection: (percentage) => ({\r\n//     height: `${percentage}%`,\r\n//     display: \"flex\",\r\n//     flexDirection: \"column\",\r\n//     overflow: \"hidden\"\r\n//   }),\r\n\r\n//   scrollSectionContent: {\r\n//     flex: 1,\r\n//     overflowY: \"auto\",\r\n//     backgroundColor: \"#F0F1F1\",\r\n//     border: \"2px solid #b3e5fc\",\r\n//     padding: \"10px\",\r\n//     borderRadius: \"8px\",\r\n//     boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\"\r\n//   },\r\n\r\n//   title: {\r\n//     fontSize: \"16px\",\r\n//     marginBottom: \"4px\",\r\n//     fontWeight: \"600\",\r\n//     padding: \"2px 6px\",\r\n//     borderRadius: \"2px\"\r\n//   },\r\n\r\n//   list: {\r\n//     listStyleType: \"none\",\r\n//     padding: 0,\r\n//     margin: 0\r\n//   },\r\n\r\n//   listItem: {\r\n//     marginBottom: \"8px\",\r\n//     padding: \"8px\",\r\n//     borderBottom: \"1px solid #ddd\"\r\n//   },\r\n\r\n//   bold: { fontWeight: \"600\" },\r\n\r\n//   noData: {\r\n//     fontStyle: \"italic\",\r\n//     color: \"#999\"\r\n//   },\r\n\r\n//   colorDot: {\r\n//     display: \"inline-block\",\r\n//     width: \"12px\",\r\n//     height: \"12px\",\r\n//     borderRadius: \"50%\",\r\n//     marginRight: \"5px\"\r\n//   },\r\n\r\n//   calculatingText: {\r\n//     color: \"#666\",\r\n//     fontStyle: \"italic\"\r\n//   }\r\n// };\r\n\r\n// // Haversine Formula to calculate distances\r\n// const haversineDistance = (lat1, lon1, lat2, lon2) => {\r\n//     const toRad = (value) => (value * Math.PI) / 180;\r\n  \r\n//     const R = 6371; // Radius of Earth in kilometers\r\n//     const dLat = toRad(lat2 - lat1);\r\n//     const dLon = toRad(lon2 - lon1);\r\n  \r\n//     const a =\r\n//       Math.sin(dLat / 2) ** 2 +\r\n//       Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) ** 2;\r\n  \r\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n//     return (R * c).toFixed(2);\r\n//   };\r\n// const Analytics = React.memo(() => {\r\n//   const { allLocations, selectedLocation } = useLocation();\r\n//   const [distances, setDistances] = useState({});\r\n  \r\n//   const originLocation = useMemo(() => {\r\n//     return allLocations.find(loc =>\r\n//       loc.clinic_name === \"Your Location\" || loc.clinic_name === \"Zentrum (Umkreis)\"\r\n//     );\r\n//   }, [allLocations]);\r\n\r\n//   const getProviderKey = (type, name, address) => `${type}-${(name || '').trim()}-${(address || '').trim()}`;\r\n\r\n//   const getProviderDetails = (provider) => {\r\n//     const type = provider.clinic_name ? \"clinic\" :\r\n//       provider.mvz_name ? \"mvz\" :\r\n//       provider.asv_name ? \"asv\" :\r\n//       provider.niedergelassene_name ? \"niedergelassene\" :\r\n//       provider.neurologe_name ? \"neurologe\" :\r\n//       provider.onkologe_name ? \"onkologe\" : null;\r\n\r\n//     const name = provider.clinic_name || provider.mvz_name || provider.asv_name || provider.niedergelassene_name || provider.neurologe_name || provider.onkologe_name;\r\n//     const address = provider.clinic_address || provider.mvz_address || provider.asv_address || provider.niedergelassene_address || provider.neurologe_address || provider.onkologe_address;\r\n//     const city = provider.clinic_city || provider.mvz_city || provider.asv_city || provider.niedergelassene_city || provider.neurologe_city || provider.onkologe_city;\r\n\r\n//     const lat = provider.clinic_latitude || provider.mvz_latitude || provider.asv_latitude || provider.niedergelassene_latitude || provider.neurologe_latitude || provider.onkologe_latitude;\r\n//     const lon = provider.clinic_longitude || provider.mvz_longitude || provider.asv_longitude || provider.niedergelassene_longitude || provider.neurologe_longitude || provider.onkologe_longitude;\r\n\r\n//     return { type, name, address, city, lat, lon };\r\n//   };\r\n\r\n//   const filteredLocations = useMemo(() => allLocations.filter(p => p.clinic_name !== \"Your Location\" && p.clinic_name !== \"Zentrum (Umkreis)\"), [allLocations]);\r\n\r\n\r\n//   const renderSelectedLocationInfo = () => {\r\n//     const details = selectedLocation ? getProviderDetails(selectedLocation) : null;\r\n//     if (!details) return <p style={styles.noData}>Keine Einrichtung ausgewählt.</p>;\r\n//     const key = getProviderKey(details.type, details.name, details.address);\r\n//     return (\r\n//       <>\r\n//         <p><strong>Name:</strong> {details.name}</p>\r\n//         <p><strong>Adresse:</strong> {details.address}</p>\r\n//         <p><strong>Stadt:</strong> {details.city}</p>\r\n//         <p><strong>Beste Route:</strong> {distances[key] ? `${distances[key]} km` : \"Berechne...\"}</p>\r\n//       </>\r\n//     );\r\n//   };\r\n\r\n//   const renderProviderList = () => (\r\n//     filteredLocations.length === 0 ? <p style={styles.noData}>Keine Daten verfügbar.</p> : (\r\n//       <ul style={styles.list}>\r\n//         {filteredLocations.map((provider, index) => {\r\n//           const { type, name, address, city } = getProviderDetails(provider);\r\n//           const key = getProviderKey(type, name, address);\r\n//           return (\r\n//             <li key={index} style={styles.listItem}>\r\n//               <span style={{ ...styles.colorDot, backgroundColor: LINE_COLORS[index % LINE_COLORS.length] }} />\r\n//               <strong>{name}</strong><br />\r\n//               {address && <>Adresse: {address}<br /></>}\r\n//               {city && <>Stadt: {city}<br /></>}\r\n//               Beste Route: <span style={styles.bold}>{distances[key] || \"Berechne...\"} km</span>\r\n//             </li>\r\n//           );\r\n//         })}\r\n//       </ul>\r\n//     )\r\n//   );\r\n\r\n//   const mockICDData = [\r\n//     { icd: \"D27\", count: 120 },\r\n//     { icd: \"C50\", count: 85 },\r\n//     { icd: \"G40\", count: 42 },\r\n//     { icd: \"I10\", count: 60 },\r\n//     { icd: \"C34\", count: 30 }\r\n//   ];\r\n\r\n//   return (\r\n//     <div style={styles.scrollWrapper}>\r\n//       <div style={styles.scrollSection(20)}>\r\n//         <h3 style={styles.title}>Informationen zur ausgewählten Einrichtung</h3>\r\n//         <div style={styles.scrollSectionContent}>{renderSelectedLocationInfo()}</div>\r\n//       </div>\r\n\r\n//       <div style={styles.scrollSection(30)}>\r\n//         <h3 style={styles.title}>Leistungserbringer Informationen</h3>\r\n//         <div style={styles.scrollSectionContent}>{renderProviderList()}</div>\r\n//       </div>\r\n\r\n//       <div style={styles.scrollSection(45)}>\r\n//         <h3 style={styles.title}>Analytics Dashboard</h3>\r\n//         <div style={styles.scrollSectionContent}>\r\n//           <div style={{ marginBottom: \"20px\" }}>\r\n//             <h4>Verteilung der ICD-Fälle</h4>\r\n//             <p>Zeigt an, wie viele Fälle (Fallzahlen) mit jedem ICD-Code verbunden sind.</p>\r\n//             <p>Darstellung als Balkendiagramm nach ICD-Code.</p>\r\n//             <ResponsiveContainer width=\"100%\" height={200}>\r\n//               <BarChart data={mockICDData}>\r\n//                 <XAxis dataKey=\"icd\" />\r\n//                 <YAxis />\r\n//                 <Tooltip />\r\n//                 <Bar dataKey=\"count\" fill=\"#8884d8\" />\r\n//               </BarChart>\r\n//             </ResponsiveContainer>\r\n//           </div>\r\n//           <hr />\r\n//           <div style={{ margin: \"20px 0\" }}>\r\n//             <h4>Erreichbarkeit</h4>\r\n//             <p>Berechnet die beste Route (Straßenentfernung) zwischen dem Standort des Nutzers und jedem Anbieter.</p>\r\n//             <p style={styles.noData}>Noch keine Daten geladen.</p>\r\n//           </div>\r\n//           <hr />\r\n//           <div style={{ margin: \"20px 0\" }}>\r\n//             <h4>Spezialisierungsgrad</h4>\r\n//             <p>Ermittelt Zentren mit einer hohen Anzahl von Fällen in einem bestimmten ICD.</p>\r\n//             <p style={styles.noData}>Noch keine Daten geladen.</p>\r\n//           </div>\r\n//           <hr />\r\n//           <div style={{ margin: \"20px 0\" }}>\r\n//             <h4>Kooperationsnetzwerke</h4>\r\n//             <p>Visualisiert Kooperationen zwischen Kliniken, MVZs und ASVs.</p>\r\n//             <p>Basierend auf KOOPERIERT_MIT-Beziehungen.</p>\r\n//             <p style={styles.noData}>Noch keine Daten geladen.</p>\r\n//           </div>\r\n//           <hr />\r\n//           <div style={{ marginTop: \"20px\" }}>\r\n//             <h4>Empfohlene Behandlungsorte</h4>\r\n//             <p>Schlägt den besten Behandlungsort vor, basierend auf:</p>\r\n//             <ul>\r\n//               <li>Entfernung</li>\r\n//               <li>ICD-Spezialisierung</li>\r\n//               <li>Konnektivität der Kooperation</li>\r\n//             </ul>\r\n//             <p><strong>KI-basiertes Ranking:</strong> z.B. „Top 3 am nächsten + beste ICD-Übereinstimmung“</p>\r\n//             <p style={styles.noData}>Noch keine Empfehlungen verfügbar.</p>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// });\r\n\r\n// export default Analytics;\r\nimport React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useLocation } from \"./LocationContext\";\r\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from \"recharts\";\r\n\r\nconst LINE_COLORS = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\nconst getRoadDistance = async (startLat, startLon, endLat, endLon) => {\r\n  if (!startLat || !startLon || !endLat || !endLon) return \"N/A\";\r\n\r\n  const url = `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    if (data.routes && data.routes.length > 0) {\r\n      return (data.routes[0].distance / 1000).toFixed(2);\r\n    }\r\n    return \"N/A\";\r\n  } catch (error) {\r\n    console.error(\"Distance fetch error:\", error);\r\n    return \"N/A\";\r\n  }\r\n};\r\n\r\nconst Analytics = () => {\r\n  const { allLocations, selectedLocation } = useLocation();\r\n  const [distances, setDistances] = useState({});\r\n\r\n  const originLocation = useMemo(() => {\r\n    return allLocations.find(loc =>\r\n      loc.clinic_name === \"Your Location\" || loc.clinic_name === \"Zentrum (Umkreis)\"\r\n    );\r\n  }, [allLocations]);\r\n\r\n  useEffect(() => {\r\n    const calculateDistances = async () => {\r\n      if (!originLocation) return;\r\n      const newDistances = {};\r\n\r\n      for (const provider of allLocations) {\r\n        if ([\"Your Location\", \"Zentrum (Umkreis)\"].includes(provider.clinic_name)) continue;\r\n\r\n        const type = provider.clinic_name ? \"clinic\" : provider.mvz_name ? \"mvz\" : provider.asv_name ? \"asv\" : provider.niedergelassene_name ? \"niedergelassene\" : provider.neurologe_name ? \"neurologe\" : \"onkologe\";\r\n\r\n        const name = provider.clinic_name || provider.mvz_name || provider.asv_name || provider.niedergelassene_name || provider.neurologe_name || provider.onkologe_name;\r\n\r\n        const lat = provider.clinic_latitude || provider.mvz_latitude || provider.asv_latitude || provider.niedergelassene_latitude || provider.neurologe_latitude || provider.onkologe_latitude;\r\n        const lon = provider.clinic_longitude || provider.mvz_longitude || provider.asv_longitude || provider.niedergelassene_longitude || provider.neurologe_longitude || provider.onkologe_longitude;\r\n\r\n        const distance = await getRoadDistance(\r\n          originLocation.latitude,\r\n          originLocation.longitude,\r\n          lat,\r\n          lon\r\n        );\r\n\r\n        newDistances[`${type}-${name}`] = distance;\r\n      }\r\n      setDistances(newDistances);\r\n    };\r\n\r\n    calculateDistances();\r\n  }, [allLocations, originLocation]);\r\n\r\n  const getProviderDetails = (provider) => ({\r\n    type: provider.clinic_name ? \"clinic\" : provider.mvz_name ? \"mvz\" : provider.asv_name ? \"asv\" : provider.niedergelassene_name ? \"niedergelassene\" : provider.neurologe_name ? \"neurologe\" : \"onkologe\",\r\n    name: provider.clinic_name || provider.mvz_name || provider.asv_name || provider.niedergelassene_name || provider.neurologe_name || provider.onkologe_name,\r\n    address: provider.clinic_address || provider.mvz_address || provider.asv_address || provider.niedergelassene_address || provider.neurologe_address || provider.onkologe_address,\r\n    city: provider.clinic_city || provider.mvz_city || provider.asv_city || provider.niedergelassene_city || provider.neurologe_city || provider.onkologe_city\r\n  });\r\n\r\n  const renderProviderList = () => (\r\n    <ul style={styles.list}>\r\n      {allLocations.filter(p => ![\"Your Location\", \"Zentrum (Umkreis)\"].includes(p.clinic_name)).map((provider, index) => {\r\n        const { type, name, address, city } = getProviderDetails(provider);\r\n        const key = `${type}-${name}`;\r\n\r\n        return (\r\n          <li key={index} style={styles.listItem}>\r\n            <span style={{ ...styles.colorDot, backgroundColor: LINE_COLORS[index % LINE_COLORS.length] }} />\r\n            <strong>{name}</strong><br />\r\n            Adresse: {address}<br />\r\n            Stadt: {city}<br />\r\n            Beste Route: {distances[key] ? `${distances[key]} km` : \"Berechne...\"}\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n\r\n  return (\r\n    <div style={styles.scrollWrapper}>\r\n      <div style={styles.scrollSection(50)}>\r\n        <h3 style={styles.title}>Leistungserbringer Informationen</h3>\r\n        <div style={styles.scrollSectionContent}>{renderProviderList()}</div>\r\n      </div>\r\n\r\n      <div style={styles.scrollSection(50)}>\r\n        <h3 style={styles.title}>Analytics Dashboard</h3>\r\n        <div style={styles.scrollSectionContent}>\r\n          <ResponsiveContainer width=\"100%\" height={200}>\r\n            <BarChart data={[{ icd: \"D27\", count: 120 }]}>\r\n              <XAxis dataKey=\"icd\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Bar dataKey=\"count\" fill=\"#8884d8\" />\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  scrollWrapper: { position: \"absolute\", width: \"35%\", top: 130, right: 10, bottom: 5, padding: 10, overflowY: \"auto\", fontSize: 12, fontWeight: \"600\" },\r\n  scrollSection: (percentage) => ({ height: `${percentage}%`, marginBottom: 10 }),\r\n  scrollSectionContent: { overflowY: \"auto\", backgroundColor: \"#F0F1F1\", padding: 10, borderRadius: 8, border: \"2px solid #b3e5fc\" },\r\n  title: { fontSize: 16, marginBottom: 4 },\r\n  list: { listStyle: \"none\", padding: 0 },\r\n  listItem: { borderBottom: \"1px solid #ddd\", paddingBottom: 8, marginBottom: 8 },\r\n  colorDot: { width: 12, height: 12, borderRadius: \"50%\", display: \"inline-block\", marginRight: 5 }\r\n};\r\n\r\nexport default Analytics;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC3D,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,QAAQ,EAAEC,GAAG,EAAEC,KAAK,EA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}