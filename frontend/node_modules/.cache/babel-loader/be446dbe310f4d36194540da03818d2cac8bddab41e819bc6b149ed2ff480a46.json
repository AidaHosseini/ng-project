{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\Analystics.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"./LocationContext\";\n\n// // Function to get road distance from OSRM API\n// const getRoadDistance = async (startLat, startLon, endLat, endLon) => {\n//     const url = `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`;\n\n//     try {\n//         const response = await fetch(url);\n//         const data = await response.json();\n//         if (data.routes && data.routes.length > 0) {\n//             return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\n//         } else {\n//             return \"N/A\";\n//         }\n//     } catch (error) {\n//         console.error(\"❌ Error fetching road distance:\", error);\n//         return \"N/A\";\n//     }\n// };\n\n// const Analystics = () => {\n//     const { allLocations } = useLocation();\n//     const [distances, setDistances] = useState({});\n\n//     // Extract Unique ICD Name & Fallzahl (Only Once)\n//     const uniqueICDInfo = allLocations.length > 0\n//         ? { \n//             icd_name: allLocations[0].icd_name || \"N/A\",\n//             icd_fallzahl: allLocations[0].icd_fallzahl || \"N/A\"\n//         } : null;\n\n//     // Find the user's location (if available)\n//     const userLocation = allLocations.find(loc => loc.clinic_name === \"Your Location\");\n\n//     // Fetch road distances between the user's location and all clinics\n//     useEffect(() => {\n//         const fetchDistances = async () => {\n//             if (!userLocation || !userLocation.latitude || !userLocation.longitude) {\n//                 console.warn(\"⚠️ No valid user location found!\");\n//                 return;\n//             }\n\n//             const newDistances = {};\n//             for (const clinic of allLocations) {\n//                 if (clinic.clinic_name === \"Your Location\") continue; // Skip user location\n\n//                 const roadDistance = await getRoadDistance(\n//                     userLocation.latitude, userLocation.longitude, // User's location\n//                     clinic.clinic_latitude, clinic.clinic_longitude // Clinic's location\n//                 );\n\n//                 newDistances[clinic.clinic_name] = roadDistance;\n//             }\n\n//             setDistances(newDistances);\n//         };\n\n//         fetchDistances();\n//     }, [userLocation, allLocations]);\n\n//     return (\n//         <>\n//             {/* Informations Box - ICD Name & ICD Fallzahl (Displayed Once) */}\n//             {uniqueICDInfo && (\n//                 <div style={styles.informationsContainer}>\n//                     <h3 style={styles.title}>Informationen zur Krankheit</h3>\n//                     <p><strong>ICD Name:</strong> {uniqueICDInfo.icd_name}</p>\n\n//                 </div>\n//             )}\n\n//             {/* Leistungserbringer Informations */}\n//             <div style={styles.analysticContainer}>\n//                 <h3 style={styles.title}>Leistungserbringer Informationen</h3>\n//                 {allLocations.length > 0 ? (\n//                     <ul style={styles.list}>\n//                         {allLocations.map((clinic, index) => {\n//                             if (clinic.clinic_name === \"Your Location\") return null; // Skip user location\n\n//                             return (\n//                                 <li key={index} style={styles.listItem}>\n//                                     {/* Circle icon before clinic name */}\n//                                     <span \n//                                         style={{\n//                                             color: lineColors[index % lineColors.length], \n//                                             fontSize: \"14px\",  \n//                                             marginRight: \"5px\",\n//                                             display: \"inline-block\",\n//                                             width: \"12px\",\n//                                             height: \"12px\",\n//                                             borderRadius: \"50%\",\n//                                             backgroundColor: lineColors[index % lineColors.length],\n//                                         }}>\n//                                     </span>\n//                                     <strong>{clinic.clinic_name}</strong> <br />\n//                                     <strong>Stadt:</strong> {clinic.clinic_city || \"N/A\"} <br />\n//                                     <strong>Chefarzt:</strong> {clinic.clinic_chefarzts || \"N/A\"} <br />\n//                                     <strong>Addresse:</strong> {clinic.clinic_address || \"N/A\"} <br />\n//                                     <strong>Anzahl von Betten:</strong> {clinic.clinic_number_of_beds || \"N/A\"} <br />\n//                                     <strong>Entfernung:</strong> <span style={styles.bold}>{distances[clinic.clinic_name] || \"Calculating...\"} km</span>\n//                                 </li>\n\n//                             );\n//                         })}\n//                     </ul>\n//                 ) : (\n//                     <p style={styles.noData}>No data available.</p>\n//                 )}\n//             </div>\n//         </>\n//     );\n// };\n\n// // CSS-in-JS styles\n// const styles = {\n//     informationsContainer: {\n//         width: \"35%\",\n//         fontWeight: \"600\",\n//         position: \"absolute\",\n//         border: \"2px solid #b3e5fc\",\n//         right: \"10px\",\n//         top: \"130px\",\n//         padding: \"15px\",\n//         backgroundColor: \"#e1ecf0\",\n//         boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\n//         borderRadius: \"8px\",\n//         marginBottom: \"15px\",\n//         fontSize: \"12px\",\n//     },\n//     analysticContainer: {\n//         width: \"35%\",\n//         fontWeight: \"600\",\n//         border: \"2px solid #b3e5fc\",\n//         position: \"absolute\",\n//         right: \"10px\",\n//         top: \"235px\",\n//         padding: \"15px\",\n//         backgroundColor: \"#e1ecf0\",\n//         boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\n//         borderRadius: \"8px\",\n//         fontSize: \"12px\",\n//     },\n//     title: {\n//         fontSize: \"14px\",\n//         marginBottom: \"8px\"\n//     },\n//     list: {\n//         listStyleType: \"none\",\n//         padding: 0,\n//         margin: 0\n//     },\n//     listItem: {\n//         marginBottom: \"8px\", // Reduce spacing between each item\n//         padding: \"8px\",\n//         borderBottom: \"1px solid #ddd\"\n//     },\n//     bold: {\n//         fontWeight: \"600\"\n//     },\n//     noData: {\n//         fontStyle: \"italic\",\n//         color: \"#999\"\n//     }\n// };\n\n// // Colors for circles (same as lines)\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// export default Analystics;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { useLocation } from \"./LocationContext\";\n\n// // const Analystics = () => {\n// //     const { allLocations } = useLocation();\n// //     const [distances, setDistances] = useState({});\n\n// //     // Function to dynamically generate provider info\n// //     const renderProviderInfo = (provider, index) => {\n// //         return (\n// //             <li key={index} style={styles.listItem}>\n// //                 {/* Colored Circle */}\n// //                 <span\n// //                     style={{\n// //                         color: lineColors[index % lineColors.length],\n// //                         fontSize: \"14px\",\n// //                         marginRight: \"5px\",\n// //                         display: \"inline-block\",\n// //                         width: \"12px\",\n// //                         height: \"12px\",\n// //                         borderRadius: \"50%\",\n// //                         backgroundColor: lineColors[index % lineColors.length],\n// //                     }}>\n// //                 </span>\n// //                 <strong>{provider.clinic_name || provider.mvz_name || provider.neurologe_name || provider.onkologe_name}</strong> <br />\n\n// //                 {provider.clinic_city || provider.mvz_city || provider.neurologe_city || provider.onkologe_city ? (\n// //                     <><strong>Stadt:</strong> {provider.clinic_city || provider.mvz_city || provider.neurologe_city || provider.onkologe_city} <br /></>\n// //                 ) : null}\n\n// //                 {provider.clinic_chefarzt ? (\n// //                     <><strong>Chefarzt:</strong> {provider.clinic_chefarzt} <br /></>\n// //                 ) : null}\n\n// //                 {provider.clinic_address || provider.mvz_address || provider.neurologe_address || provider.onkologe_address ? (\n// //                     <><strong>Adresse:</strong> {provider.clinic_address || provider.mvz_address || provider.neurologe_address || provider.onkologe_address} <br /></>\n// //                 ) : null}\n\n// //                 {provider.clinic_number_of_beds ? (\n// //                     <><strong>Anzahl von Betten:</strong> {provider.clinic_number_of_beds} <br /></>\n// //                 ) : null}\n\n// //                 {distances[provider.clinic_name] ? (\n// //                     <><strong>Entfernung:</strong> <span style={styles.bold}>{distances[provider.clinic_name]} km</span><br /></>\n// //                 ) : (\n// //                     <><strong>Entfernung:</strong> <span style={styles.bold}>Berechnung läuft...</span><br /></>\n// //                 )}\n// //             </li>\n// //         );\n// //     };\n\n// //     return (\n// //         <div style={styles.analysticContainer}>\n// //             <h3 style={styles.title}>Leistungserbringer Informationen</h3>\n// //             {allLocations.length > 0 ? (\n// //                 <ul style={styles.list}>\n// //                     {allLocations.map((provider, index) => (\n// //                         renderProviderInfo(provider, index)\n// //                     ))}\n// //                 </ul>\n// //             ) : (\n// //                 <p style={styles.noData}>Keine Daten verfügbar.</p>\n// //             )}\n// //         </div>\n// //     );\n// // };\n\n// // // ✅ Define Styling\n// // const styles = {\n// //     analysticContainer: {\n// //         width: \"35%\",\n// //         fontWeight: \"600\",\n// //         position: \"absolute\",\n// //         right: \"10px\",\n// //         top: \"235px\",\n// //         padding: \"15px\",\n// //         backgroundColor: \"#d0ebff\",\n// //         boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\n// //         borderRadius: \"8px\",\n// //         fontSize: \"12px\",\n// //     },\n// //     title: {\n// //         fontSize: \"14px\",\n// //         marginBottom: \"8px\"\n// //     },\n// //     list: {\n// //         listStyleType: \"none\",\n// //         padding: 0,\n// //         margin: 0\n// //     },\n// //     listItem: {\n// //         marginBottom: \"8px\",\n// //         padding: \"8px\",\n// //         borderBottom: \"1px solid #ddd\"\n// //     },\n// //     bold: {\n// //         fontWeight: \"600\"\n// //     },\n// //     noData: {\n// //         fontStyle: \"italic\",\n// //         color: \"#999\"\n// //     }\n// // };\n\n// // // Define colors for providers\n// // const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// // export default Analystics;\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"./LocationContext\";\n\n// Function to get road distance from OSRM API\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getRoadDistance = async (startLat, startLon, endLat, endLon) => {\n  const url = `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    if (data.routes && data.routes.length > 0) {\n      return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\n    } else {\n      return \"N/A\";\n    }\n  } catch (error) {\n    console.error(\"❌ Error fetching road distance:\", error);\n    return \"N/A\";\n  }\n};\nconst Analystics = () => {\n  _s();\n  const {\n    allLocations\n  } = useLocation();\n  const [distances, setDistances] = useState({});\n\n  // ✅ Fetch distances when locations update\n  useEffect(() => {\n    const fetchDistances = async () => {\n      const userLocation = allLocations.find(loc => loc.clinic_name === \"Your Location\");\n      if (!userLocation) return; // Exit if no user location\n\n      const newDistances = {};\n      for (const provider of allLocations) {\n        if (provider.clinic_name === \"Your Location\") continue; // Skip user location\n\n        // Extract provider coordinates\n        const providerLat = provider.clinic_latitude || provider.mvz_latitude || provider.neurologe_latitude || provider.onkologe_latitude;\n        const providerLon = provider.clinic_longitude || provider.mvz_longitude || provider.neurologe_longitude || provider.onkologe_longitude;\n        if (providerLat && providerLon) {\n          const roadDistance = await getRoadDistance(userLocation.clinic_latitude, userLocation.clinic_longitude, providerLat, providerLon);\n          newDistances[provider.clinic_name || provider.mvz_name || provider.neurologe_name || provider.onkologe_name] = roadDistance;\n        }\n      }\n      setDistances(newDistances); // Update state with fetched distances\n    };\n    if (allLocations.length > 1) {\n      fetchDistances();\n    }\n  }, [allLocations]); // Runs when locations change\n\n  // Function to dynamically generate provider info\n  const renderProviderInfo = (provider, index) => {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      style: styles.listItem,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: lineColors[index % lineColors.length],\n          fontSize: \"14px\",\n          marginRight: \"5px\",\n          display: \"inline-block\",\n          width: \"12px\",\n          height: \"12px\",\n          borderRadius: \"50%\",\n          backgroundColor: lineColors[index % lineColors.length]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: provider.clinic_name || provider.mvz_name || provider.neurologe_name || provider.onkologe_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 131\n      }, this), provider.clinic_city || provider.mvz_city || provider.neurologe_city || provider.onkologe_city ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Stadt:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 23\n        }, this), \" \", provider.clinic_city || provider.mvz_city || provider.neurologe_city || provider.onkologe_city, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 144\n        }, this)]\n      }, void 0, true) : null, provider.clinic_chefarzt ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Chefarzt:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 23\n        }, this), \" \", provider.clinic_chefarzt, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 77\n        }, this)]\n      }, void 0, true) : null, provider.clinic_address || provider.mvz_address || provider.neurologe_address || provider.onkologe_address ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Adresse:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 23\n        }, this), \" \", provider.clinic_address || provider.mvz_address || provider.neurologe_address || provider.onkologe_address, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 158\n        }, this)]\n      }, void 0, true) : null, provider.clinic_number_of_beds ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Anzahl von Betten:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 23\n        }, this), \" \", provider.clinic_number_of_beds, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 92\n        }, this)]\n      }, void 0, true) : null, distances[provider.clinic_name] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Entfernung:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 23\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: styles.bold,\n          children: [distances[provider.clinic_name], \" km\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 52\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 121\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Entfernung:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 23\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: styles.bold,\n          children: \"Berechnung l\\xE4uft...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 52\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 104\n        }, this)]\n      }, void 0, true)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.analysticContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: styles.title,\n      children: \"Leistungserbringer Informationen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 13\n    }, this), allLocations.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: styles.list,\n      children: allLocations.map((provider, index) => renderProviderInfo(provider, index))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      style: styles.noData,\n      children: \"Keine Daten verf\\xFCgbar.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 380,\n    columnNumber: 9\n  }, this);\n};\n\n// ✅ Define Styling\n_s(Analystics, \"LnnOKaSQI01tsLJ9WEFGZVouI2A=\", false, function () {\n  return [useLocation];\n});\n_c = Analystics;\nconst styles = {\n  analysticContainer: {\n    width: \"35%\",\n    fontWeight: \"600\",\n    position: \"absolute\",\n    right: \"10px\",\n    top: \"235px\",\n    padding: \"15px\",\n    backgroundColor: \"#d0ebff\",\n    boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\n    borderRadius: \"8px\",\n    fontSize: \"12px\"\n  },\n  title: {\n    fontSize: \"14px\",\n    marginBottom: \"8px\"\n  },\n  list: {\n    listStyleType: \"none\",\n    padding: 0,\n    margin: 0\n  },\n  listItem: {\n    marginBottom: \"8px\",\n    padding: \"8px\",\n    borderBottom: \"1px solid #ddd\"\n  },\n  bold: {\n    fontWeight: \"600\"\n  },\n  noData: {\n    fontStyle: \"italic\",\n    color: \"#999\"\n  }\n};\n\n// Define colors for providers\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\nexport default Analystics;\nvar _c;\n$RefreshReg$(_c, \"Analystics\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","jsxDEV","_jsxDEV","Fragment","_Fragment","getRoadDistance","startLat","startLon","endLat","endLon","url","response","fetch","data","json","routes","length","distance","toFixed","error","console","Analystics","_s","allLocations","distances","setDistances","fetchDistances","userLocation","find","loc","clinic_name","newDistances","provider","providerLat","clinic_latitude","mvz_latitude","neurologe_latitude","onkologe_latitude","providerLon","clinic_longitude","mvz_longitude","neurologe_longitude","onkologe_longitude","roadDistance","mvz_name","neurologe_name","onkologe_name","renderProviderInfo","index","style","styles","listItem","children","color","lineColors","fontSize","marginRight","display","width","height","borderRadius","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","clinic_city","mvz_city","neurologe_city","onkologe_city","clinic_chefarzt","clinic_address","mvz_address","neurologe_address","onkologe_address","clinic_number_of_beds","bold","analysticContainer","title","list","map","noData","_c","fontWeight","position","right","top","padding","boxShadow","marginBottom","listStyleType","margin","borderBottom","fontStyle","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/Analystics.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"./LocationContext\";\r\n\r\n// // Function to get road distance from OSRM API\r\n// const getRoadDistance = async (startLat, startLon, endLat, endLon) => {\r\n//     const url = `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`;\r\n\r\n//     try {\r\n//         const response = await fetch(url);\r\n//         const data = await response.json();\r\n//         if (data.routes && data.routes.length > 0) {\r\n//             return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\r\n//         } else {\r\n//             return \"N/A\";\r\n//         }\r\n//     } catch (error) {\r\n//         console.error(\"❌ Error fetching road distance:\", error);\r\n//         return \"N/A\";\r\n//     }\r\n// };\r\n\r\n// const Analystics = () => {\r\n//     const { allLocations } = useLocation();\r\n//     const [distances, setDistances] = useState({});\r\n    \r\n//     // Extract Unique ICD Name & Fallzahl (Only Once)\r\n//     const uniqueICDInfo = allLocations.length > 0\r\n//         ? { \r\n//             icd_name: allLocations[0].icd_name || \"N/A\",\r\n//             icd_fallzahl: allLocations[0].icd_fallzahl || \"N/A\"\r\n//         } : null;\r\n\r\n//     // Find the user's location (if available)\r\n//     const userLocation = allLocations.find(loc => loc.clinic_name === \"Your Location\");\r\n\r\n//     // Fetch road distances between the user's location and all clinics\r\n//     useEffect(() => {\r\n//         const fetchDistances = async () => {\r\n//             if (!userLocation || !userLocation.latitude || !userLocation.longitude) {\r\n//                 console.warn(\"⚠️ No valid user location found!\");\r\n//                 return;\r\n//             }\r\n\r\n//             const newDistances = {};\r\n//             for (const clinic of allLocations) {\r\n//                 if (clinic.clinic_name === \"Your Location\") continue; // Skip user location\r\n\r\n//                 const roadDistance = await getRoadDistance(\r\n//                     userLocation.latitude, userLocation.longitude, // User's location\r\n//                     clinic.clinic_latitude, clinic.clinic_longitude // Clinic's location\r\n//                 );\r\n\r\n//                 newDistances[clinic.clinic_name] = roadDistance;\r\n//             }\r\n\r\n//             setDistances(newDistances);\r\n//         };\r\n\r\n//         fetchDistances();\r\n//     }, [userLocation, allLocations]);\r\n\r\n//     return (\r\n//         <>\r\n//             {/* Informations Box - ICD Name & ICD Fallzahl (Displayed Once) */}\r\n//             {uniqueICDInfo && (\r\n//                 <div style={styles.informationsContainer}>\r\n//                     <h3 style={styles.title}>Informationen zur Krankheit</h3>\r\n//                     <p><strong>ICD Name:</strong> {uniqueICDInfo.icd_name}</p>\r\n                    \r\n//                 </div>\r\n//             )}\r\n\r\n//             {/* Leistungserbringer Informations */}\r\n//             <div style={styles.analysticContainer}>\r\n//                 <h3 style={styles.title}>Leistungserbringer Informationen</h3>\r\n//                 {allLocations.length > 0 ? (\r\n//                     <ul style={styles.list}>\r\n//                         {allLocations.map((clinic, index) => {\r\n//                             if (clinic.clinic_name === \"Your Location\") return null; // Skip user location\r\n\r\n//                             return (\r\n//                                 <li key={index} style={styles.listItem}>\r\n//                                     {/* Circle icon before clinic name */}\r\n//                                     <span \r\n//                                         style={{\r\n//                                             color: lineColors[index % lineColors.length], \r\n//                                             fontSize: \"14px\",  \r\n//                                             marginRight: \"5px\",\r\n//                                             display: \"inline-block\",\r\n//                                             width: \"12px\",\r\n//                                             height: \"12px\",\r\n//                                             borderRadius: \"50%\",\r\n//                                             backgroundColor: lineColors[index % lineColors.length],\r\n//                                         }}>\r\n//                                     </span>\r\n//                                     <strong>{clinic.clinic_name}</strong> <br />\r\n//                                     <strong>Stadt:</strong> {clinic.clinic_city || \"N/A\"} <br />\r\n//                                     <strong>Chefarzt:</strong> {clinic.clinic_chefarzts || \"N/A\"} <br />\r\n//                                     <strong>Addresse:</strong> {clinic.clinic_address || \"N/A\"} <br />\r\n//                                     <strong>Anzahl von Betten:</strong> {clinic.clinic_number_of_beds || \"N/A\"} <br />\r\n//                                     <strong>Entfernung:</strong> <span style={styles.bold}>{distances[clinic.clinic_name] || \"Calculating...\"} km</span>\r\n//                                 </li>\r\n\r\n\r\n//                             );\r\n//                         })}\r\n//                     </ul>\r\n//                 ) : (\r\n//                     <p style={styles.noData}>No data available.</p>\r\n//                 )}\r\n//             </div>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// // CSS-in-JS styles\r\n// const styles = {\r\n//     informationsContainer: {\r\n//         width: \"35%\",\r\n//         fontWeight: \"600\",\r\n//         position: \"absolute\",\r\n//         border: \"2px solid #b3e5fc\",\r\n//         right: \"10px\",\r\n//         top: \"130px\",\r\n//         padding: \"15px\",\r\n//         backgroundColor: \"#e1ecf0\",\r\n//         boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\r\n//         borderRadius: \"8px\",\r\n//         marginBottom: \"15px\",\r\n//         fontSize: \"12px\",\r\n//     },\r\n//     analysticContainer: {\r\n//         width: \"35%\",\r\n//         fontWeight: \"600\",\r\n//         border: \"2px solid #b3e5fc\",\r\n//         position: \"absolute\",\r\n//         right: \"10px\",\r\n//         top: \"235px\",\r\n//         padding: \"15px\",\r\n//         backgroundColor: \"#e1ecf0\",\r\n//         boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\r\n//         borderRadius: \"8px\",\r\n//         fontSize: \"12px\",\r\n//     },\r\n//     title: {\r\n//         fontSize: \"14px\",\r\n//         marginBottom: \"8px\"\r\n//     },\r\n//     list: {\r\n//         listStyleType: \"none\",\r\n//         padding: 0,\r\n//         margin: 0\r\n//     },\r\n//     listItem: {\r\n//         marginBottom: \"8px\", // Reduce spacing between each item\r\n//         padding: \"8px\",\r\n//         borderBottom: \"1px solid #ddd\"\r\n//     },\r\n//     bold: {\r\n//         fontWeight: \"600\"\r\n//     },\r\n//     noData: {\r\n//         fontStyle: \"italic\",\r\n//         color: \"#999\"\r\n//     }\r\n// };\r\n\r\n// // Colors for circles (same as lines)\r\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// export default Analystics;\r\n\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import { useLocation } from \"./LocationContext\";\r\n\r\n// // const Analystics = () => {\r\n// //     const { allLocations } = useLocation();\r\n// //     const [distances, setDistances] = useState({});\r\n\r\n// //     // Function to dynamically generate provider info\r\n// //     const renderProviderInfo = (provider, index) => {\r\n// //         return (\r\n// //             <li key={index} style={styles.listItem}>\r\n// //                 {/* Colored Circle */}\r\n// //                 <span\r\n// //                     style={{\r\n// //                         color: lineColors[index % lineColors.length],\r\n// //                         fontSize: \"14px\",\r\n// //                         marginRight: \"5px\",\r\n// //                         display: \"inline-block\",\r\n// //                         width: \"12px\",\r\n// //                         height: \"12px\",\r\n// //                         borderRadius: \"50%\",\r\n// //                         backgroundColor: lineColors[index % lineColors.length],\r\n// //                     }}>\r\n// //                 </span>\r\n// //                 <strong>{provider.clinic_name || provider.mvz_name || provider.neurologe_name || provider.onkologe_name}</strong> <br />\r\n\r\n// //                 {provider.clinic_city || provider.mvz_city || provider.neurologe_city || provider.onkologe_city ? (\r\n// //                     <><strong>Stadt:</strong> {provider.clinic_city || provider.mvz_city || provider.neurologe_city || provider.onkologe_city} <br /></>\r\n// //                 ) : null}\r\n\r\n// //                 {provider.clinic_chefarzt ? (\r\n// //                     <><strong>Chefarzt:</strong> {provider.clinic_chefarzt} <br /></>\r\n// //                 ) : null}\r\n\r\n// //                 {provider.clinic_address || provider.mvz_address || provider.neurologe_address || provider.onkologe_address ? (\r\n// //                     <><strong>Adresse:</strong> {provider.clinic_address || provider.mvz_address || provider.neurologe_address || provider.onkologe_address} <br /></>\r\n// //                 ) : null}\r\n\r\n// //                 {provider.clinic_number_of_beds ? (\r\n// //                     <><strong>Anzahl von Betten:</strong> {provider.clinic_number_of_beds} <br /></>\r\n// //                 ) : null}\r\n\r\n// //                 {distances[provider.clinic_name] ? (\r\n// //                     <><strong>Entfernung:</strong> <span style={styles.bold}>{distances[provider.clinic_name]} km</span><br /></>\r\n// //                 ) : (\r\n// //                     <><strong>Entfernung:</strong> <span style={styles.bold}>Berechnung läuft...</span><br /></>\r\n// //                 )}\r\n// //             </li>\r\n// //         );\r\n// //     };\r\n\r\n// //     return (\r\n// //         <div style={styles.analysticContainer}>\r\n// //             <h3 style={styles.title}>Leistungserbringer Informationen</h3>\r\n// //             {allLocations.length > 0 ? (\r\n// //                 <ul style={styles.list}>\r\n// //                     {allLocations.map((provider, index) => (\r\n// //                         renderProviderInfo(provider, index)\r\n// //                     ))}\r\n// //                 </ul>\r\n// //             ) : (\r\n// //                 <p style={styles.noData}>Keine Daten verfügbar.</p>\r\n// //             )}\r\n// //         </div>\r\n// //     );\r\n// // };\r\n\r\n// // // ✅ Define Styling\r\n// // const styles = {\r\n// //     analysticContainer: {\r\n// //         width: \"35%\",\r\n// //         fontWeight: \"600\",\r\n// //         position: \"absolute\",\r\n// //         right: \"10px\",\r\n// //         top: \"235px\",\r\n// //         padding: \"15px\",\r\n// //         backgroundColor: \"#d0ebff\",\r\n// //         boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\r\n// //         borderRadius: \"8px\",\r\n// //         fontSize: \"12px\",\r\n// //     },\r\n// //     title: {\r\n// //         fontSize: \"14px\",\r\n// //         marginBottom: \"8px\"\r\n// //     },\r\n// //     list: {\r\n// //         listStyleType: \"none\",\r\n// //         padding: 0,\r\n// //         margin: 0\r\n// //     },\r\n// //     listItem: {\r\n// //         marginBottom: \"8px\",\r\n// //         padding: \"8px\",\r\n// //         borderBottom: \"1px solid #ddd\"\r\n// //     },\r\n// //     bold: {\r\n// //         fontWeight: \"600\"\r\n// //     },\r\n// //     noData: {\r\n// //         fontStyle: \"italic\",\r\n// //         color: \"#999\"\r\n// //     }\r\n// // };\r\n\r\n// // // Define colors for providers\r\n// // const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// // export default Analystics;\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"./LocationContext\";\r\n\r\n// Function to get road distance from OSRM API\r\nconst getRoadDistance = async (startLat, startLon, endLat, endLon) => {\r\n    const url = `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`;\r\n\r\n    try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        if (data.routes && data.routes.length > 0) {\r\n            return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\r\n        } else {\r\n            return \"N/A\";\r\n        }\r\n    } catch (error) {\r\n        console.error(\"❌ Error fetching road distance:\", error);\r\n        return \"N/A\";\r\n    }\r\n};\r\n\r\nconst Analystics = () => {\r\n    const { allLocations } = useLocation();\r\n    const [distances, setDistances] = useState({});\r\n\r\n    // ✅ Fetch distances when locations update\r\n    useEffect(() => {\r\n        const fetchDistances = async () => {\r\n            const userLocation = allLocations.find(loc => loc.clinic_name === \"Your Location\");\r\n\r\n            if (!userLocation) return; // Exit if no user location\r\n\r\n            const newDistances = {};\r\n            for (const provider of allLocations) {\r\n                if (provider.clinic_name === \"Your Location\") continue; // Skip user location\r\n\r\n                // Extract provider coordinates\r\n                const providerLat = provider.clinic_latitude || provider.mvz_latitude || provider.neurologe_latitude || provider.onkologe_latitude;\r\n                const providerLon = provider.clinic_longitude || provider.mvz_longitude || provider.neurologe_longitude || provider.onkologe_longitude;\r\n\r\n                if (providerLat && providerLon) {\r\n                    const roadDistance = await getRoadDistance(userLocation.clinic_latitude, userLocation.clinic_longitude, providerLat, providerLon);\r\n                    newDistances[provider.clinic_name || provider.mvz_name || provider.neurologe_name || provider.onkologe_name] = roadDistance;\r\n                }\r\n            }\r\n\r\n            setDistances(newDistances); // Update state with fetched distances\r\n        };\r\n\r\n        if (allLocations.length > 1) {\r\n            fetchDistances();\r\n        }\r\n    }, [allLocations]); // Runs when locations change\r\n\r\n    // Function to dynamically generate provider info\r\n    const renderProviderInfo = (provider, index) => {\r\n        return (\r\n            <li key={index} style={styles.listItem}>\r\n                {/* Colored Circle */}\r\n                <span\r\n                    style={{\r\n                        color: lineColors[index % lineColors.length],\r\n                        fontSize: \"14px\",\r\n                        marginRight: \"5px\",\r\n                        display: \"inline-block\",\r\n                        width: \"12px\",\r\n                        height: \"12px\",\r\n                        borderRadius: \"50%\",\r\n                        backgroundColor: lineColors[index % lineColors.length],\r\n                    }}>\r\n                </span>\r\n                <strong>{provider.clinic_name || provider.mvz_name || provider.neurologe_name || provider.onkologe_name}</strong> <br />\r\n\r\n                {provider.clinic_city || provider.mvz_city || provider.neurologe_city || provider.onkologe_city ? (\r\n                    <><strong>Stadt:</strong> {provider.clinic_city || provider.mvz_city || provider.neurologe_city || provider.onkologe_city} <br /></>\r\n                ) : null}\r\n\r\n                {provider.clinic_chefarzt ? (\r\n                    <><strong>Chefarzt:</strong> {provider.clinic_chefarzt} <br /></>\r\n                ) : null}\r\n\r\n                {provider.clinic_address || provider.mvz_address || provider.neurologe_address || provider.onkologe_address ? (\r\n                    <><strong>Adresse:</strong> {provider.clinic_address || provider.mvz_address || provider.neurologe_address || provider.onkologe_address} <br /></>\r\n                ) : null}\r\n\r\n                {provider.clinic_number_of_beds ? (\r\n                    <><strong>Anzahl von Betten:</strong> {provider.clinic_number_of_beds} <br /></>\r\n                ) : null}\r\n\r\n                {distances[provider.clinic_name] ? (\r\n                    <><strong>Entfernung:</strong> <span style={styles.bold}>{distances[provider.clinic_name]} km</span><br /></>\r\n                ) : (\r\n                    <><strong>Entfernung:</strong> <span style={styles.bold}>Berechnung läuft...</span><br /></>\r\n                )}\r\n            </li>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div style={styles.analysticContainer}>\r\n            <h3 style={styles.title}>Leistungserbringer Informationen</h3>\r\n            {allLocations.length > 0 ? (\r\n                <ul style={styles.list}>\r\n                    {allLocations.map((provider, index) => (\r\n                        renderProviderInfo(provider, index)\r\n                    ))}\r\n                </ul>\r\n            ) : (\r\n                <p style={styles.noData}>Keine Daten verfügbar.</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n// ✅ Define Styling\r\nconst styles = {\r\n    analysticContainer: {\r\n        width: \"35%\",\r\n        fontWeight: \"600\",\r\n        position: \"absolute\",\r\n        right: \"10px\",\r\n        top: \"235px\",\r\n        padding: \"15px\",\r\n        backgroundColor: \"#d0ebff\",\r\n        boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\r\n        borderRadius: \"8px\",\r\n        fontSize: \"12px\",\r\n    },\r\n    title: {\r\n        fontSize: \"14px\",\r\n        marginBottom: \"8px\"\r\n    },\r\n    list: {\r\n        listStyleType: \"none\",\r\n        padding: 0,\r\n        margin: 0\r\n    },\r\n    listItem: {\r\n        marginBottom: \"8px\",\r\n        padding: \"8px\",\r\n        borderBottom: \"1px solid #ddd\"\r\n    },\r\n    bold: {\r\n        fontWeight: \"600\"\r\n    },\r\n    noData: {\r\n        fontStyle: \"italic\",\r\n        color: \"#999\"\r\n    }\r\n};\r\n\r\n// Define colors for providers\r\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\nexport default Analystics;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}