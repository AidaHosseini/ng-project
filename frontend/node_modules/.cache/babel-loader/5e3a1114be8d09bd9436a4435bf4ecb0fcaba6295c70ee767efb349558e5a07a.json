{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\Analystics.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useMemo, useCallback } from \"react\";\n// import { useLocation } from \"./LocationContext\";\n\n// // Constants\n// const LINE_COLORS = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// // Styles\n// const styles = {\n//   informationsContainer: {\n//     width: \"35%\",\n//     fontWeight: \"600\",\n//     position: \"absolute\",\n//     border: \"2px solid #b3e5fc\",\n//     right: \"10px\",\n//     top: \"130px\",\n//     overflowY: \"auto\",\n//     maxHeight: \"200px\",\n//     padding: \"15px\",\n//     backgroundColor: \"#e1ecf0\",\n//     borderRadius: \"8px\",\n//     fontSize: \"12px\"\n//   },\n//   analysticContainer: {\n//     width: \"35%\",\n//     fontWeight: \"600\",\n//     position: \"absolute\",\n//     border: \"2px solid #b3e5fc\",\n//     right: \"10px\",\n//     top: \"250px\",\n//     overflowY: \"auto\",\n//     maxHeight: \"635px\",\n//     padding: \"15px\",\n//     backgroundColor: \"#e1ecf0\",\n//     borderRadius: \"8px\",\n//     fontSize: \"12px\"\n//   },\n//   analysticContainer2: {\n//     width: \"35%\",\n//     fontWeight: \"600\",\n//     position: \"absolute\",\n//     border: \"2px solid #b3e5fc\",\n//     right: \"10px\",\n//     top: \"400px\",\n//     overflowY: \"auto\",\n//     maxHeight: \"635px\",\n//     padding: \"15px\",\n//     backgroundColor: \"#e1ecf0\",\n//     borderRadius: \"8px\",\n//     fontSize: \"12px\"\n//   },\n//   title: {\n//     fontSize: \"18px\",\n//     marginBottom: \"8px\",\n//     fontWeight: \"600\"\n//   },\n//   list: {\n//     listStyleType: \"none\",\n//     padding: 0,\n//     margin: 0\n//   },\n//   listItem: {\n//     marginBottom: \"8px\",\n//     padding: \"8px\",\n//     borderBottom: \"1px solid #ddd\"\n//   },\n//   bold: {\n//     fontWeight: \"600\"\n//   },\n//   noData: {\n//     fontStyle: \"italic\",\n//     color: \"#999\"\n//   },\n//   colorDot: {\n//     display: \"inline-block\",\n//     width: \"12px\",\n//     height: \"12px\",\n//     borderRadius: \"50%\",\n//     marginRight: \"5px\"\n//   },\n//   calculatingText: {\n//     color: \"#666\",\n//     fontStyle: \"italic\"\n//   }\n// };\n\n// // Helper functions\n// const getProviderKey = (type, name, address) => {\n//   return `${type}-${(name || \"\").trim()}-${(address || \"\").trim()}`;\n// };\n\n// const getRoadDistance = async (startLat, startLon, endLat, endLon, attempt = 1) => {\n//   if (!startLat || !startLon || !endLat || !endLon) return null;\n\n//   // Add a small delay between requests to avoid rate limiting\n//   await new Promise(resolve => setTimeout(resolve, attempt * 200));\n\n//   try {\n//     const response = await fetch(\n//       `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`\n//     );\n\n//     if (!response.ok) {\n//       if (response.status === 429 && attempt < 3) {\n//         // Exponential backoff for rate limiting\n//         return getRoadDistance(startLat, startLon, endLat, endLon, attempt + 1);\n//       }\n//       return null;\n//     }\n\n//     const data = await response.json();\n//     return data.routes?.[0]?.distance ? (data.routes[0].distance / 1000).toFixed(2) : null;\n//   } catch (err) {\n//     console.error(\"Distance fetch error:\", err);\n//     return null;\n//   }\n// };\n\n// const getProviderDetails = (provider) => {\n//   const type = provider.clinic_name ? \"clinic\" :\n//     provider.mvz_name ? \"mvz\" :\n//     provider.asv_name ? \"asv\" :\n//     provider.niedergelassene_name ? \"niedergelassene\" :\n//     provider.neurologe_name ? \"neurologe\" :\n//     provider.onkologe_name ? \"onkologe\" : null;\n\n//   const name = provider.clinic_name || provider.mvz_name || provider.asv_name || \n//     provider.niedergelassene_name || provider.neurologe_name || provider.onkologe_name;\n\n//   const address = provider.clinic_address || provider.mvz_address || provider.asv_address || \n//     provider.niedergelassene_address || provider.neurologe_address || provider.onkologe_address;\n\n//   const city = provider.clinic_city || provider.mvz_city || provider.asv_city || \n//     provider.niedergelassene_city || provider.neurologe_city || provider.onkologe_city;\n\n//   const lat = provider.clinic_latitude || provider.mvz_latitude || provider.asv_latitude || \n//     provider.niedergelassene_latitude || provider.neurologe_latitude || provider.onkologe_latitude;\n\n//   const lon = provider.clinic_longitude || provider.mvz_longitude || provider.asv_longitude || \n//     provider.niedergelassene_longitude || provider.neurologe_longitude || provider.onkologe_longitude;\n\n//   return { type, name, address, city, lat, lon };\n// };\n\n// const Analytics = React.memo(() => {\n//   const [distances, setDistances] = useState({});\n//   const [isCalculating, setIsCalculating] = useState(false);\n//   const { allLocations, selectedLocation, userLocation } = useLocation();\n\n//     // const originLocation = useMemo(() => {\n//     //     return userLocation || allLocations.find(loc => \n//     //     loc.clinic_name === \"Your Location\" || loc.clinic_name === \"Zentrum (Umkreis)\"\n//     //     );\n//     // }, [userLocation, allLocations]);\n\n//         const originLocation = useMemo(() => {\n//             return allLocations.find(loc => \n//             loc.clinic_name === \"Your Location\" || loc.clinic_name === \"Zentrum (Umkreis)\"\n//             );\n//         }, [allLocations]);\n\n//   const fetchDistances = useCallback(async () => {\n//     if (!originLocation?.latitude || !originLocation?.longitude) return;\n\n//     setIsCalculating(true);\n//     const newDistances = {};\n\n//     // Process locations in batches to avoid overwhelming the API/browser\n//     const batchSize = 5;\n//     const batches = [];\n\n//     for (let i = 0; i < allLocations.length; i += batchSize) {\n//       batches.push(allLocations.slice(i, i + batchSize));\n//     }\n\n//     for (const batch of batches) {\n//       const batchPromises = batch.map(provider => {\n//         if (provider.clinic_name === \"Your Location\" || provider.clinic_name === \"Zentrum (Umkreis)\") {\n//           return Promise.resolve();\n//         }\n\n//         const { type, name, address, lat, lon } = getProviderDetails(provider);\n//         if (!type || !name || !lat || !lon) return Promise.resolve();\n\n//         const key = getProviderKey(type, name, address);\n//         return getRoadDistance(originLocation.latitude, originLocation.longitude, lat, lon)\n//           .then(distance => { \n//             if (distance !== null) {\n//               newDistances[key] = distance;\n//             }\n//           });\n//       });\n\n//       await Promise.all(batchPromises);\n\n//       // Update state after each batch to show partial progress\n//       setDistances(prev => ({ ...prev, ...newDistances }));\n\n//       // Small delay between batches\n//       await new Promise(resolve => setTimeout(resolve, 500));\n//     }\n\n//     setIsCalculating(false);\n//   }, [originLocation, allLocations]);\n\n//   useEffect(() => {\n//     fetchDistances();\n//   }, [fetchDistances]);\n\n//   const selectedDetails = useMemo(() => {\n//     if (!selectedLocation) return null;\n//     return getProviderDetails(selectedLocation);\n//   }, [selectedLocation]);\n\n//   const selectedDistanceKey = useMemo(() => {\n//     if (!selectedDetails) return null;\n//     return getProviderKey(selectedDetails.type, selectedDetails.name, selectedDetails.address);\n//   }, [selectedDetails]);\n\n//   const filteredLocations = useMemo(() => {\n//     return allLocations.filter(provider => \n//       provider.clinic_name !== \"Your Location\" && \n//       provider.clinic_name !== \"Zentrum (Umkreis)\"\n//     );\n//   }, [allLocations]);\n\n//   const renderDistance = (key) => {\n//     if (!key) return <span style={styles.calculatingText}>Nicht verfügbar</span>;\n//     if (key in distances) return <span>{distances[key]} km</span>;\n//     return <span style={styles.calculatingText}>Berechne...</span>;\n//   };\n\n//   const renderSelectedLocationInfo = useMemo(() => {\n//     if (!selectedDetails) {\n//       return <p style={{ fontStyle: \"italic\", color: \"#666\" }}>Keine Einrichtung ausgewählt.</p>;\n//     }\n\n//     return (\n//       <>\n//         {selectedDetails.name && <p><strong>Name:</strong> {selectedDetails.name}</p>}\n//         {selectedDetails.address && <p><strong>Adresse:</strong> {selectedDetails.address}</p>}\n//         {selectedDetails.city && <p><strong>Stadt:</strong> {selectedDetails.city}</p>}\n//         <p>\n//           <strong>Beste Route:</strong>{\" \"}\n//           <span style={styles.bold}>\n//             {renderDistance(selectedDistanceKey)}\n//           </span>\n//         </p>\n//       </>\n//     );\n//   }, [selectedDetails, selectedDistanceKey, distances]);\n\n//   const renderProviderList = useMemo(() => {\n//     if (filteredLocations.length === 0) {\n//       return <p style={styles.noData}>Keine Daten verfügbar.</p>;\n//     }\n\n//     return (\n//       <ul style={styles.list}>\n//         {filteredLocations.map((provider, index) => {\n//           const { type, name, address, city } = getProviderDetails(provider);\n//           if (!type || !name) return null;\n\n//           const key = getProviderKey(type, name, address);\n\n//           return (\n//             <li key={`provider-${index}`} style={styles.listItem}>\n//               <span style={{ ...styles.colorDot, backgroundColor: LINE_COLORS[index % LINE_COLORS.length] }} />\n//               <strong>{name}</strong><br />\n//               {address && <><strong>Adresse:</strong> {address}<br /></>}\n//               {city && <><strong>Stadt:</strong> {city}<br /></>}\n//               <strong>Beste Route:</strong>{\" \"}\n//               <span style={styles.bold}>\n//                 {renderDistance(key)}\n//               </span>\n//             </li>\n//           );\n//         })}\n//       </ul>\n//     );\n//   }, [filteredLocations, distances]);\n\n//   return (\n//     <>\n//       <div style={styles.informationsContainer}>\n//         <h3 style={styles.title}>Informationen zur ausgewählten Einrichtung</h3>\n//         {renderSelectedLocationInfo}\n//       </div>\n\n//       <div style={styles.analysticContainer}>\n//         <h3 style={styles.title}>Leistungserbringer Informationen</h3>\n//         {isCalculating && filteredLocations.length > 0 && (\n//           <p style={styles.calculatingText}>Berechne Entfernungen...</p>\n//         )}\n//         {renderProviderList}\n//       </div>\n//       <div style={styles.analysticContainer2}>\n//         <h3 style={styles.title}>Analytics Dashboard</h3>\n//         {isCalculating && filteredLocations.length > 0 && (\n//           <p style={styles.calculatingText}>Berechne Entfernungen...</p>\n//         )}\n//         {renderProviderList}\n//       </div>\n//     </>\n//   );\n// });\n\n// export default Analytics;\nimport React, { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { useLocation } from \"./LocationContext\";\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LINE_COLORS = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\nconst styles = {\n  scrollWrapper: {\n    width: \"35%\",\n    position: \"absolute\",\n    right: \"10px\",\n    top: \"130px\",\n    height: \"calc(100vh - 140px)\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: \"10px\",\n    padding: \"10px\",\n    fontSize: \"12px\",\n    fontWeight: \"600\",\n    boxSizing: \"border-box\"\n  },\n  // Top two sections: fixed height\n  sectionFixed: {\n    height: \"120px\",\n    // Adjust if needed\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  // Last section: fills remaining space\n  sectionFlexible: {\n    flex: 1,\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  // Scrollable content inside each box\n  scrollSectionContent: {\n    flex: 1,\n    overflowY: \"auto\",\n    backgroundColor: \"#F0F1F1\",\n    border: \"2px solid #b3e5fc\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\"\n  },\n  title: {\n    fontSize: \"16px\",\n    marginBottom: \"4px\",\n    fontWeight: \"600\",\n    // backgroundColor: \"#fff\",\n    padding: \"2px 6px\",\n    borderRadius: \"2px\"\n  },\n  list: {\n    listStyleType: \"none\",\n    padding: 0,\n    margin: 0\n  },\n  listItem: {\n    marginBottom: \"8px\",\n    padding: \"8px\",\n    borderBottom: \"1px solid #ddd\"\n  },\n  bold: {\n    fontWeight: \"600\"\n  },\n  noData: {\n    fontStyle: \"italic\",\n    color: \"#999\"\n  },\n  colorDot: {\n    display: \"inline-block\",\n    width: \"12px\",\n    height: \"12px\",\n    borderRadius: \"50%\",\n    marginRight: \"5px\"\n  },\n  stickyHeader: {\n    position: \"sticky\",\n    top: 0,\n    backgroundColor: \"#e1ecf0\",\n    // same as scrollWrapper background\n    zIndex: 1,\n    paddingBottom: \"6px\",\n    paddingTop: \"4px\"\n  },\n  calculatingText: {\n    color: \"#666\",\n    fontStyle: \"italic\"\n  }\n};\nconst getProviderKey = (type, name, address) => {\n  return `${type}-${(name || \"\").trim()}-${(address || \"\").trim()}`;\n};\nconst getRoadDistance = async (startLat, startLon, endLat, endLon, attempt = 1) => {\n  if (!startLat || !startLon || !endLat || !endLon) return null;\n  await new Promise(resolve => setTimeout(resolve, attempt * 200));\n  try {\n    var _data$routes, _data$routes$;\n    const response = await fetch(`https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`);\n    if (!response.ok) {\n      if (response.status === 429 && attempt < 3) {\n        return getRoadDistance(startLat, startLon, endLat, endLon, attempt + 1);\n      }\n      return null;\n    }\n    const data = await response.json();\n    return (_data$routes = data.routes) !== null && _data$routes !== void 0 && (_data$routes$ = _data$routes[0]) !== null && _data$routes$ !== void 0 && _data$routes$.distance ? (data.routes[0].distance / 1000).toFixed(2) : null;\n  } catch (err) {\n    console.error(\"Distance fetch error:\", err);\n    return null;\n  }\n};\nconst getProviderDetails = provider => {\n  const type = provider.clinic_name ? \"clinic\" : provider.mvz_name ? \"mvz\" : provider.asv_name ? \"asv\" : provider.niedergelassene_name ? \"niedergelassene\" : provider.neurologe_name ? \"neurologe\" : provider.onkologe_name ? \"onkologe\" : null;\n  const name = provider.clinic_name || provider.mvz_name || provider.asv_name || provider.niedergelassene_name || provider.neurologe_name || provider.onkologe_name;\n  const address = provider.clinic_address || provider.mvz_address || provider.asv_address || provider.niedergelassene_address || provider.neurologe_address || provider.onkologe_address;\n  const city = provider.clinic_city || provider.mvz_city || provider.asv_city || provider.niedergelassene_city || provider.neurologe_city || provider.onkologe_city;\n  const lat = provider.clinic_latitude || provider.mvz_latitude || provider.asv_latitude || provider.niedergelassene_latitude || provider.neurologe_latitude || provider.onkologe_latitude;\n  const lon = provider.clinic_longitude || provider.mvz_longitude || provider.asv_longitude || provider.niedergelassene_longitude || provider.neurologe_longitude || provider.onkologe_longitude;\n  return {\n    type,\n    name,\n    address,\n    city,\n    lat,\n    lon\n  };\n};\nconst Analytics = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_c = _s(() => {\n  _s();\n  const [distances, setDistances] = useState({});\n  const [isCalculating, setIsCalculating] = useState(false);\n  const {\n    allLocations,\n    selectedLocation,\n    userLocation\n  } = useLocation();\n  const originLocation = useMemo(() => {\n    return allLocations.find(loc => loc.clinic_name === \"Your Location\" || loc.clinic_name === \"Zentrum (Umkreis)\");\n  }, [allLocations]);\n  const fetchDistances = useCallback(async () => {\n    if (!(originLocation !== null && originLocation !== void 0 && originLocation.latitude) || !(originLocation !== null && originLocation !== void 0 && originLocation.longitude)) return;\n    setIsCalculating(true);\n    const newDistances = {};\n    const batchSize = 5;\n    const batches = [];\n    for (let i = 0; i < allLocations.length; i += batchSize) {\n      batches.push(allLocations.slice(i, i + batchSize));\n    }\n    for (const batch of batches) {\n      const batchPromises = batch.map(provider => {\n        if (provider.clinic_name === \"Your Location\" || provider.clinic_name === \"Zentrum (Umkreis)\") {\n          return Promise.resolve();\n        }\n        const {\n          type,\n          name,\n          address,\n          lat,\n          lon\n        } = getProviderDetails(provider);\n        if (!type || !name || !lat || !lon) return Promise.resolve();\n        const key = getProviderKey(type, name, address);\n        return getRoadDistance(originLocation.latitude, originLocation.longitude, lat, lon).then(distance => {\n          if (distance !== null) {\n            newDistances[key] = distance;\n          }\n        });\n      });\n      await Promise.all(batchPromises);\n      setDistances(prev => ({\n        ...prev,\n        ...newDistances\n      }));\n      await new Promise(resolve => setTimeout(resolve, 500));\n    }\n    setIsCalculating(false);\n  }, [originLocation, allLocations]);\n  useEffect(() => {\n    fetchDistances();\n  }, [fetchDistances]);\n  const selectedDetails = useMemo(() => {\n    if (!selectedLocation) return null;\n    return getProviderDetails(selectedLocation);\n  }, [selectedLocation]);\n  const selectedDistanceKey = useMemo(() => {\n    if (!selectedDetails) return null;\n    return getProviderKey(selectedDetails.type, selectedDetails.name, selectedDetails.address);\n  }, [selectedDetails]);\n  const filteredLocations = useMemo(() => {\n    return allLocations.filter(provider => provider.clinic_name !== \"Your Location\" && provider.clinic_name !== \"Zentrum (Umkreis)\");\n  }, [allLocations]);\n  const renderDistance = key => {\n    if (!key) return /*#__PURE__*/_jsxDEV(\"span\", {\n      style: styles.calculatingText,\n      children: \"Nicht verf\\xFCgbar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 22\n    }, this);\n    if (key in distances) return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [distances[key], \" km\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 34\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      style: styles.calculatingText,\n      children: \"Berechne...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 12\n    }, this);\n  };\n  const renderSelectedLocationInfo = useMemo(() => {\n    if (!selectedDetails) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontStyle: \"italic\",\n          color: \"#666\"\n        },\n        children: \"Keine Einrichtung ausgew\\xE4hlt.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [selectedDetails.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 37\n        }, this), \" \", selectedDetails.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 34\n      }, this), selectedDetails.address && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Adresse:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 40\n        }, this), \" \", selectedDetails.address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 37\n      }, this), selectedDetails.city && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Stadt:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 37\n        }, this), \" \", selectedDetails.city]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Beste Route:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: styles.bold,\n          children: renderDistance(selectedDistanceKey)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }, [selectedDetails, selectedDistanceKey, distances]);\n  const renderProviderList = useMemo(() => {\n    if (filteredLocations.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        style: styles.noData,\n        children: \"Keine Daten verf\\xFCgbar.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: styles.list,\n      children: filteredLocations.map((provider, index) => {\n        const {\n          type,\n          name,\n          address,\n          city\n        } = getProviderDetails(provider);\n        if (!type || !name) return null;\n        const key = getProviderKey(type, name, address);\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          style: styles.listItem,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              ...styles.colorDot,\n              backgroundColor: LINE_COLORS[index % LINE_COLORS.length]\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 38\n          }, this), address && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Adresse:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 29\n            }, this), \" \", address, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 64\n            }, this)]\n          }, void 0, true), city && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Stadt:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 26\n            }, this), \" \", city, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 56\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Beste Route:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: styles.bold,\n            children: renderDistance(key)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 15\n          }, this)]\n        }, `provider-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 7\n    }, this);\n  }, [filteredLocations, distances]);\n  const mockICDData = [{\n    icd: \"D27\",\n    count: 120\n  }, {\n    icd: \"C50\",\n    count: 85\n  }, {\n    icd: \"G40\",\n    count: 42\n  }, {\n    icd: \"I10\",\n    count: 60\n  }, {\n    icd: \"C34\",\n    count: 30\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.scrollWrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.sectionFixed,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: styles.title,\n        children: \"Informationen zur ausgew\\xE4hlten Einrichtung\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.scrollSectionContent,\n        children: renderSelectedLocationInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.sectionFixed,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: styles.title,\n        children: \"Leistungserbringer Informationen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.scrollSectionContent,\n        children: renderProviderList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.sectionFlexible,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: styles.title,\n        children: \"Analytics Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.scrollSectionContent,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: \"20px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Verteilung der ICD-F\\xE4lle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Zeigt an, wie viele F\\xE4lle (Fallzahlen) mit jedem ICD-Code verbunden sind.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Darstellung als Balkendiagramm nach ICD-Code.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: 200,\n            children: /*#__PURE__*/_jsxDEV(BarChart, {\n              data: mockICDData,\n              children: [/*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"icd\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 617,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 618,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 619,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                dataKey: \"count\",\n                fill: \"#8884d8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 620,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 616,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            margin: \"20px 0\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Erreichbarkeit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Berechnet die beste Route (Stra\\xDFenentfernung) zwischen dem Standort des Nutzers und jedem Anbieter.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: styles.noData,\n            children: \"Noch keine Daten geladen.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            margin: \"20px 0\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Spezialisierungsgrad\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Ermittelt Zentren mit einer hohen Anzahl von F\\xE4llen in einem bestimmten ICD.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: styles.noData,\n            children: \"Noch keine Daten geladen.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            margin: \"20px 0\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Kooperationsnetzwerke\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Visualisiert Kooperationen zwischen Kliniken, MVZs und ASVs.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Basierend auf KOOPERIERT_MIT-Beziehungen.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: styles.noData,\n            children: \"Noch keine Daten geladen.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 650,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: \"20px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Empfohlene Behandlungsorte\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Schl\\xE4gt den besten Behandlungsort vor, basierend auf:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Entfernung\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 660,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"ICD-Spezialisierung\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 661,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Konnektivit\\xE4t der Kooperation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 662,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 659,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"KI-basiertes Ranking:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 8\n            }, this), \" z.B. \\u201ETop 3 am n\\xE4chsten + beste ICD-\\xDCbereinstimmung\\u201C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: styles.noData,\n            children: \"Noch keine Empfehlungen verf\\xFCgbar.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 588,\n    columnNumber: 5\n  }, this);\n}, \"R+TN7npk7ULG4pV6GT2gzdZCIec=\", false, function () {\n  return [useLocation];\n})), \"R+TN7npk7ULG4pV6GT2gzdZCIec=\", false, function () {\n  return [useLocation];\n});\n_c2 = Analytics;\nexport default Analytics;\nvar _c, _c2;\n$RefreshReg$(_c, \"Analytics$React.memo\");\n$RefreshReg$(_c2, \"Analytics\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","useLocation","BarChart","Bar","XAxis","YAxis","Tooltip","ResponsiveContainer","jsxDEV","_jsxDEV","Fragment","_Fragment","LINE_COLORS","styles","scrollWrapper","width","position","right","top","height","display","flexDirection","gap","padding","fontSize","fontWeight","boxSizing","sectionFixed","sectionFlexible","flex","scrollSectionContent","overflowY","backgroundColor","border","borderRadius","boxShadow","title","marginBottom","list","listStyleType","margin","listItem","borderBottom","bold","noData","fontStyle","color","colorDot","marginRight","stickyHeader","zIndex","paddingBottom","paddingTop","calculatingText","getProviderKey","type","name","address","trim","getRoadDistance","startLat","startLon","endLat","endLon","attempt","Promise","resolve","setTimeout","_data$routes","_data$routes$","response","fetch","ok","status","data","json","routes","distance","toFixed","err","console","error","getProviderDetails","provider","clinic_name","mvz_name","asv_name","niedergelassene_name","neurologe_name","onkologe_name","clinic_address","mvz_address","asv_address","niedergelassene_address","neurologe_address","onkologe_address","city","clinic_city","mvz_city","asv_city","niedergelassene_city","neurologe_city","onkologe_city","lat","clinic_latitude","mvz_latitude","asv_latitude","niedergelassene_latitude","neurologe_latitude","onkologe_latitude","lon","clinic_longitude","mvz_longitude","asv_longitude","niedergelassene_longitude","neurologe_longitude","onkologe_longitude","Analytics","_s","memo","_c","distances","setDistances","isCalculating","setIsCalculating","allLocations","selectedLocation","userLocation","originLocation","find","loc","fetchDistances","latitude","longitude","newDistances","batchSize","batches","i","length","push","slice","batch","batchPromises","map","key","then","all","prev","selectedDetails","selectedDistanceKey","filteredLocations","filter","renderDistance","style","children","fileName","_jsxFileName","lineNumber","columnNumber","renderSelectedLocationInfo","renderProviderList","index","mockICDData","icd","count","dataKey","fill","marginTop","_c2","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/Analystics.js"],"sourcesContent":["// import React, { useState, useEffect, useMemo, useCallback } from \"react\";\r\n// import { useLocation } from \"./LocationContext\";\r\n\r\n// // Constants\r\n// const LINE_COLORS = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// // Styles\r\n// const styles = {\r\n//   informationsContainer: {\r\n//     width: \"35%\",\r\n//     fontWeight: \"600\",\r\n//     position: \"absolute\",\r\n//     border: \"2px solid #b3e5fc\",\r\n//     right: \"10px\",\r\n//     top: \"130px\",\r\n//     overflowY: \"auto\",\r\n//     maxHeight: \"200px\",\r\n//     padding: \"15px\",\r\n//     backgroundColor: \"#e1ecf0\",\r\n//     borderRadius: \"8px\",\r\n//     fontSize: \"12px\"\r\n//   },\r\n//   analysticContainer: {\r\n//     width: \"35%\",\r\n//     fontWeight: \"600\",\r\n//     position: \"absolute\",\r\n//     border: \"2px solid #b3e5fc\",\r\n//     right: \"10px\",\r\n//     top: \"250px\",\r\n//     overflowY: \"auto\",\r\n//     maxHeight: \"635px\",\r\n//     padding: \"15px\",\r\n//     backgroundColor: \"#e1ecf0\",\r\n//     borderRadius: \"8px\",\r\n//     fontSize: \"12px\"\r\n//   },\r\n//   analysticContainer2: {\r\n//     width: \"35%\",\r\n//     fontWeight: \"600\",\r\n//     position: \"absolute\",\r\n//     border: \"2px solid #b3e5fc\",\r\n//     right: \"10px\",\r\n//     top: \"400px\",\r\n//     overflowY: \"auto\",\r\n//     maxHeight: \"635px\",\r\n//     padding: \"15px\",\r\n//     backgroundColor: \"#e1ecf0\",\r\n//     borderRadius: \"8px\",\r\n//     fontSize: \"12px\"\r\n//   },\r\n//   title: {\r\n//     fontSize: \"18px\",\r\n//     marginBottom: \"8px\",\r\n//     fontWeight: \"600\"\r\n//   },\r\n//   list: {\r\n//     listStyleType: \"none\",\r\n//     padding: 0,\r\n//     margin: 0\r\n//   },\r\n//   listItem: {\r\n//     marginBottom: \"8px\",\r\n//     padding: \"8px\",\r\n//     borderBottom: \"1px solid #ddd\"\r\n//   },\r\n//   bold: {\r\n//     fontWeight: \"600\"\r\n//   },\r\n//   noData: {\r\n//     fontStyle: \"italic\",\r\n//     color: \"#999\"\r\n//   },\r\n//   colorDot: {\r\n//     display: \"inline-block\",\r\n//     width: \"12px\",\r\n//     height: \"12px\",\r\n//     borderRadius: \"50%\",\r\n//     marginRight: \"5px\"\r\n//   },\r\n//   calculatingText: {\r\n//     color: \"#666\",\r\n//     fontStyle: \"italic\"\r\n//   }\r\n// };\r\n\r\n// // Helper functions\r\n// const getProviderKey = (type, name, address) => {\r\n//   return `${type}-${(name || \"\").trim()}-${(address || \"\").trim()}`;\r\n// };\r\n\r\n// const getRoadDistance = async (startLat, startLon, endLat, endLon, attempt = 1) => {\r\n//   if (!startLat || !startLon || !endLat || !endLon) return null;\r\n\r\n//   // Add a small delay between requests to avoid rate limiting\r\n//   await new Promise(resolve => setTimeout(resolve, attempt * 200));\r\n\r\n//   try {\r\n//     const response = await fetch(\r\n//       `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`\r\n//     );\r\n    \r\n//     if (!response.ok) {\r\n//       if (response.status === 429 && attempt < 3) {\r\n//         // Exponential backoff for rate limiting\r\n//         return getRoadDistance(startLat, startLon, endLat, endLon, attempt + 1);\r\n//       }\r\n//       return null;\r\n//     }\r\n\r\n//     const data = await response.json();\r\n//     return data.routes?.[0]?.distance ? (data.routes[0].distance / 1000).toFixed(2) : null;\r\n//   } catch (err) {\r\n//     console.error(\"Distance fetch error:\", err);\r\n//     return null;\r\n//   }\r\n// };\r\n\r\n// const getProviderDetails = (provider) => {\r\n//   const type = provider.clinic_name ? \"clinic\" :\r\n//     provider.mvz_name ? \"mvz\" :\r\n//     provider.asv_name ? \"asv\" :\r\n//     provider.niedergelassene_name ? \"niedergelassene\" :\r\n//     provider.neurologe_name ? \"neurologe\" :\r\n//     provider.onkologe_name ? \"onkologe\" : null;\r\n\r\n//   const name = provider.clinic_name || provider.mvz_name || provider.asv_name || \r\n//     provider.niedergelassene_name || provider.neurologe_name || provider.onkologe_name;\r\n\r\n//   const address = provider.clinic_address || provider.mvz_address || provider.asv_address || \r\n//     provider.niedergelassene_address || provider.neurologe_address || provider.onkologe_address;\r\n\r\n//   const city = provider.clinic_city || provider.mvz_city || provider.asv_city || \r\n//     provider.niedergelassene_city || provider.neurologe_city || provider.onkologe_city;\r\n\r\n//   const lat = provider.clinic_latitude || provider.mvz_latitude || provider.asv_latitude || \r\n//     provider.niedergelassene_latitude || provider.neurologe_latitude || provider.onkologe_latitude;\r\n\r\n//   const lon = provider.clinic_longitude || provider.mvz_longitude || provider.asv_longitude || \r\n//     provider.niedergelassene_longitude || provider.neurologe_longitude || provider.onkologe_longitude;\r\n\r\n//   return { type, name, address, city, lat, lon };\r\n// };\r\n\r\n// const Analytics = React.memo(() => {\r\n//   const [distances, setDistances] = useState({});\r\n//   const [isCalculating, setIsCalculating] = useState(false);\r\n//   const { allLocations, selectedLocation, userLocation } = useLocation();\r\n\r\n\r\n//     // const originLocation = useMemo(() => {\r\n//     //     return userLocation || allLocations.find(loc => \r\n//     //     loc.clinic_name === \"Your Location\" || loc.clinic_name === \"Zentrum (Umkreis)\"\r\n//     //     );\r\n//     // }, [userLocation, allLocations]);\r\n\r\n//         const originLocation = useMemo(() => {\r\n//             return allLocations.find(loc => \r\n//             loc.clinic_name === \"Your Location\" || loc.clinic_name === \"Zentrum (Umkreis)\"\r\n//             );\r\n//         }, [allLocations]);\r\n      \r\n\r\n//   const fetchDistances = useCallback(async () => {\r\n//     if (!originLocation?.latitude || !originLocation?.longitude) return;\r\n\r\n//     setIsCalculating(true);\r\n//     const newDistances = {};\r\n    \r\n//     // Process locations in batches to avoid overwhelming the API/browser\r\n//     const batchSize = 5;\r\n//     const batches = [];\r\n    \r\n//     for (let i = 0; i < allLocations.length; i += batchSize) {\r\n//       batches.push(allLocations.slice(i, i + batchSize));\r\n//     }\r\n\r\n//     for (const batch of batches) {\r\n//       const batchPromises = batch.map(provider => {\r\n//         if (provider.clinic_name === \"Your Location\" || provider.clinic_name === \"Zentrum (Umkreis)\") {\r\n//           return Promise.resolve();\r\n//         }\r\n\r\n//         const { type, name, address, lat, lon } = getProviderDetails(provider);\r\n//         if (!type || !name || !lat || !lon) return Promise.resolve();\r\n\r\n//         const key = getProviderKey(type, name, address);\r\n//         return getRoadDistance(originLocation.latitude, originLocation.longitude, lat, lon)\r\n//           .then(distance => { \r\n//             if (distance !== null) {\r\n//               newDistances[key] = distance;\r\n//             }\r\n//           });\r\n//       });\r\n\r\n//       await Promise.all(batchPromises);\r\n      \r\n//       // Update state after each batch to show partial progress\r\n//       setDistances(prev => ({ ...prev, ...newDistances }));\r\n      \r\n//       // Small delay between batches\r\n//       await new Promise(resolve => setTimeout(resolve, 500));\r\n//     }\r\n\r\n//     setIsCalculating(false);\r\n//   }, [originLocation, allLocations]);\r\n\r\n//   useEffect(() => {\r\n//     fetchDistances();\r\n//   }, [fetchDistances]);\r\n\r\n//   const selectedDetails = useMemo(() => {\r\n//     if (!selectedLocation) return null;\r\n//     return getProviderDetails(selectedLocation);\r\n//   }, [selectedLocation]);\r\n\r\n//   const selectedDistanceKey = useMemo(() => {\r\n//     if (!selectedDetails) return null;\r\n//     return getProviderKey(selectedDetails.type, selectedDetails.name, selectedDetails.address);\r\n//   }, [selectedDetails]);\r\n\r\n//   const filteredLocations = useMemo(() => {\r\n//     return allLocations.filter(provider => \r\n//       provider.clinic_name !== \"Your Location\" && \r\n//       provider.clinic_name !== \"Zentrum (Umkreis)\"\r\n//     );\r\n//   }, [allLocations]);\r\n\r\n//   const renderDistance = (key) => {\r\n//     if (!key) return <span style={styles.calculatingText}>Nicht verfügbar</span>;\r\n//     if (key in distances) return <span>{distances[key]} km</span>;\r\n//     return <span style={styles.calculatingText}>Berechne...</span>;\r\n//   };\r\n\r\n//   const renderSelectedLocationInfo = useMemo(() => {\r\n//     if (!selectedDetails) {\r\n//       return <p style={{ fontStyle: \"italic\", color: \"#666\" }}>Keine Einrichtung ausgewählt.</p>;\r\n//     }\r\n\r\n//     return (\r\n//       <>\r\n//         {selectedDetails.name && <p><strong>Name:</strong> {selectedDetails.name}</p>}\r\n//         {selectedDetails.address && <p><strong>Adresse:</strong> {selectedDetails.address}</p>}\r\n//         {selectedDetails.city && <p><strong>Stadt:</strong> {selectedDetails.city}</p>}\r\n//         <p>\r\n//           <strong>Beste Route:</strong>{\" \"}\r\n//           <span style={styles.bold}>\r\n//             {renderDistance(selectedDistanceKey)}\r\n//           </span>\r\n//         </p>\r\n//       </>\r\n//     );\r\n//   }, [selectedDetails, selectedDistanceKey, distances]);\r\n\r\n//   const renderProviderList = useMemo(() => {\r\n//     if (filteredLocations.length === 0) {\r\n//       return <p style={styles.noData}>Keine Daten verfügbar.</p>;\r\n//     }\r\n\r\n//     return (\r\n//       <ul style={styles.list}>\r\n//         {filteredLocations.map((provider, index) => {\r\n//           const { type, name, address, city } = getProviderDetails(provider);\r\n//           if (!type || !name) return null;\r\n\r\n//           const key = getProviderKey(type, name, address);\r\n\r\n//           return (\r\n//             <li key={`provider-${index}`} style={styles.listItem}>\r\n//               <span style={{ ...styles.colorDot, backgroundColor: LINE_COLORS[index % LINE_COLORS.length] }} />\r\n//               <strong>{name}</strong><br />\r\n//               {address && <><strong>Adresse:</strong> {address}<br /></>}\r\n//               {city && <><strong>Stadt:</strong> {city}<br /></>}\r\n//               <strong>Beste Route:</strong>{\" \"}\r\n//               <span style={styles.bold}>\r\n//                 {renderDistance(key)}\r\n//               </span>\r\n//             </li>\r\n//           );\r\n//         })}\r\n//       </ul>\r\n//     );\r\n//   }, [filteredLocations, distances]);\r\n\r\n//   return (\r\n//     <>\r\n//       <div style={styles.informationsContainer}>\r\n//         <h3 style={styles.title}>Informationen zur ausgewählten Einrichtung</h3>\r\n//         {renderSelectedLocationInfo}\r\n//       </div>\r\n\r\n//       <div style={styles.analysticContainer}>\r\n//         <h3 style={styles.title}>Leistungserbringer Informationen</h3>\r\n//         {isCalculating && filteredLocations.length > 0 && (\r\n//           <p style={styles.calculatingText}>Berechne Entfernungen...</p>\r\n//         )}\r\n//         {renderProviderList}\r\n//       </div>\r\n//       <div style={styles.analysticContainer2}>\r\n//         <h3 style={styles.title}>Analytics Dashboard</h3>\r\n//         {isCalculating && filteredLocations.length > 0 && (\r\n//           <p style={styles.calculatingText}>Berechne Entfernungen...</p>\r\n//         )}\r\n//         {renderProviderList}\r\n//       </div>\r\n//     </>\r\n//   );\r\n// });\r\n\r\n// export default Analytics;\r\nimport React, { useState, useEffect, useMemo, useCallback } from \"react\";\r\nimport { useLocation } from \"./LocationContext\";\r\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from \"recharts\";\r\n\r\n\r\nconst LINE_COLORS = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\nconst styles = {\r\n    scrollWrapper: {\r\n        width: \"35%\",\r\n        position: \"absolute\",\r\n        right: \"10px\",\r\n        top: \"130px\",\r\n        height: \"calc(100vh - 140px)\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        gap: \"10px\",\r\n        padding: \"10px\",\r\n        fontSize: \"12px\",\r\n        fontWeight: \"600\",\r\n        boxSizing: \"border-box\"\r\n      },\r\n      \r\n      // Top two sections: fixed height\r\n      sectionFixed: {\r\n        height: \"120px\", // Adjust if needed\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n      },\r\n      \r\n      // Last section: fills remaining space\r\n      sectionFlexible: {\r\n        flex: 1,\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n      },\r\n      \r\n      // Scrollable content inside each box\r\n      scrollSectionContent: {\r\n        flex: 1,\r\n        overflowY: \"auto\",\r\n        backgroundColor: \"#F0F1F1\",\r\n        border: \"2px solid #b3e5fc\",\r\n        padding: \"10px\",\r\n        borderRadius: \"8px\",\r\n        boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\"\r\n      },\r\n  title: {\r\n    fontSize: \"16px\",\r\n    marginBottom: \"4px\",\r\n    fontWeight: \"600\",\r\n    // backgroundColor: \"#fff\",\r\n    padding: \"2px 6px\",\r\n    borderRadius: \"2px\"\r\n  },\r\n  list: {\r\n    listStyleType: \"none\",\r\n    padding: 0,\r\n    margin: 0\r\n  },\r\n  listItem: {\r\n    marginBottom: \"8px\",\r\n    padding: \"8px\",\r\n    borderBottom: \"1px solid #ddd\"\r\n  },\r\n  bold: {\r\n    fontWeight: \"600\"\r\n  },\r\n  noData: {\r\n    fontStyle: \"italic\",\r\n    color: \"#999\"\r\n  },\r\n  colorDot: {\r\n    display: \"inline-block\",\r\n    width: \"12px\",\r\n    height: \"12px\",\r\n    borderRadius: \"50%\",\r\n    marginRight: \"5px\"\r\n  },\r\n  stickyHeader: {\r\n    position: \"sticky\",\r\n    top: 0,\r\n    backgroundColor: \"#e1ecf0\",  // same as scrollWrapper background\r\n    zIndex: 1,\r\n    paddingBottom: \"6px\",\r\n    paddingTop: \"4px\"\r\n  },\r\n  \r\n  calculatingText: {\r\n    color: \"#666\",\r\n    fontStyle: \"italic\"\r\n  }\r\n};\r\n\r\nconst getProviderKey = (type, name, address) => {\r\n  return `${type}-${(name || \"\").trim()}-${(address || \"\").trim()}`;\r\n};\r\n\r\nconst getRoadDistance = async (startLat, startLon, endLat, endLon, attempt = 1) => {\r\n  if (!startLat || !startLon || !endLat || !endLon) return null;\r\n  await new Promise(resolve => setTimeout(resolve, attempt * 200));\r\n  try {\r\n    const response = await fetch(\r\n      `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`\r\n    );\r\n    if (!response.ok) {\r\n      if (response.status === 429 && attempt < 3) {\r\n        return getRoadDistance(startLat, startLon, endLat, endLon, attempt + 1);\r\n      }\r\n      return null;\r\n    }\r\n    const data = await response.json();\r\n    return data.routes?.[0]?.distance ? (data.routes[0].distance / 1000).toFixed(2) : null;\r\n  } catch (err) {\r\n    console.error(\"Distance fetch error:\", err);\r\n    return null;\r\n  }\r\n};\r\n\r\nconst getProviderDetails = (provider) => {\r\n  const type = provider.clinic_name ? \"clinic\" :\r\n    provider.mvz_name ? \"mvz\" :\r\n    provider.asv_name ? \"asv\" :\r\n    provider.niedergelassene_name ? \"niedergelassene\" :\r\n    provider.neurologe_name ? \"neurologe\" :\r\n    provider.onkologe_name ? \"onkologe\" : null;\r\n\r\n  const name = provider.clinic_name || provider.mvz_name || provider.asv_name || \r\n    provider.niedergelassene_name || provider.neurologe_name || provider.onkologe_name;\r\n\r\n  const address = provider.clinic_address || provider.mvz_address || provider.asv_address || \r\n    provider.niedergelassene_address || provider.neurologe_address || provider.onkologe_address;\r\n\r\n  const city = provider.clinic_city || provider.mvz_city || provider.asv_city || \r\n    provider.niedergelassene_city || provider.neurologe_city || provider.onkologe_city;\r\n\r\n  const lat = provider.clinic_latitude || provider.mvz_latitude || provider.asv_latitude || \r\n    provider.niedergelassene_latitude || provider.neurologe_latitude || provider.onkologe_latitude;\r\n\r\n  const lon = provider.clinic_longitude || provider.mvz_longitude || provider.asv_longitude || \r\n    provider.niedergelassene_longitude || provider.neurologe_longitude || provider.onkologe_longitude;\r\n\r\n  return { type, name, address, city, lat, lon };\r\n};\r\n\r\nconst Analytics = React.memo(() => {\r\n  const [distances, setDistances] = useState({});\r\n  const [isCalculating, setIsCalculating] = useState(false);\r\n  const { allLocations, selectedLocation, userLocation } = useLocation();\r\n\r\n  const originLocation = useMemo(() => {\r\n    return allLocations.find(loc => \r\n      loc.clinic_name === \"Your Location\" || loc.clinic_name === \"Zentrum (Umkreis)\"\r\n    );\r\n  }, [allLocations]);\r\n\r\n  const fetchDistances = useCallback(async () => {\r\n    if (!originLocation?.latitude || !originLocation?.longitude) return;\r\n    setIsCalculating(true);\r\n    const newDistances = {};\r\n    const batchSize = 5;\r\n    const batches = [];\r\n    for (let i = 0; i < allLocations.length; i += batchSize) {\r\n      batches.push(allLocations.slice(i, i + batchSize));\r\n    }\r\n\r\n    for (const batch of batches) {\r\n      const batchPromises = batch.map(provider => {\r\n        if (provider.clinic_name === \"Your Location\" || provider.clinic_name === \"Zentrum (Umkreis)\") {\r\n          return Promise.resolve();\r\n        }\r\n\r\n        const { type, name, address, lat, lon } = getProviderDetails(provider);\r\n        if (!type || !name || !lat || !lon) return Promise.resolve();\r\n\r\n        const key = getProviderKey(type, name, address);\r\n        return getRoadDistance(originLocation.latitude, originLocation.longitude, lat, lon)\r\n          .then(distance => { \r\n            if (distance !== null) {\r\n              newDistances[key] = distance;\r\n            }\r\n          });\r\n      });\r\n\r\n      await Promise.all(batchPromises);\r\n      setDistances(prev => ({ ...prev, ...newDistances }));\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n    }\r\n    setIsCalculating(false);\r\n  }, [originLocation, allLocations]);\r\n\r\n  useEffect(() => {\r\n    fetchDistances();\r\n  }, [fetchDistances]);\r\n\r\n  const selectedDetails = useMemo(() => {\r\n    if (!selectedLocation) return null;\r\n    return getProviderDetails(selectedLocation);\r\n  }, [selectedLocation]);\r\n\r\n  const selectedDistanceKey = useMemo(() => {\r\n    if (!selectedDetails) return null;\r\n    return getProviderKey(selectedDetails.type, selectedDetails.name, selectedDetails.address);\r\n  }, [selectedDetails]);\r\n\r\n  const filteredLocations = useMemo(() => {\r\n    return allLocations.filter(provider => \r\n      provider.clinic_name !== \"Your Location\" && \r\n      provider.clinic_name !== \"Zentrum (Umkreis)\"\r\n    );\r\n  }, [allLocations]);\r\n\r\n  const renderDistance = (key) => {\r\n    if (!key) return <span style={styles.calculatingText}>Nicht verfügbar</span>;\r\n    if (key in distances) return <span>{distances[key]} km</span>;\r\n    return <span style={styles.calculatingText}>Berechne...</span>;\r\n  };\r\n\r\n  const renderSelectedLocationInfo = useMemo(() => {\r\n    if (!selectedDetails) {\r\n      return <p style={{ fontStyle: \"italic\", color: \"#666\" }}>Keine Einrichtung ausgewählt.</p>;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {selectedDetails.name && <p><strong>Name:</strong> {selectedDetails.name}</p>}\r\n        {selectedDetails.address && <p><strong>Adresse:</strong> {selectedDetails.address}</p>}\r\n        {selectedDetails.city && <p><strong>Stadt:</strong> {selectedDetails.city}</p>}\r\n        <p>\r\n          <strong>Beste Route:</strong>{\" \"}\r\n          <span style={styles.bold}>\r\n            {renderDistance(selectedDistanceKey)}\r\n          </span>\r\n        </p>\r\n      </>\r\n    );\r\n  }, [selectedDetails, selectedDistanceKey, distances]);\r\n\r\n  const renderProviderList = useMemo(() => {\r\n    if (filteredLocations.length === 0) {\r\n      return <p style={styles.noData}>Keine Daten verfügbar.</p>;\r\n    }\r\n\r\n    return (\r\n      <ul style={styles.list}>\r\n        {filteredLocations.map((provider, index) => {\r\n          const { type, name, address, city } = getProviderDetails(provider);\r\n          if (!type || !name) return null;\r\n\r\n          const key = getProviderKey(type, name, address);\r\n\r\n          return (\r\n            <li key={`provider-${index}`} style={styles.listItem}>\r\n              <span style={{ ...styles.colorDot, backgroundColor: LINE_COLORS[index % LINE_COLORS.length] }} />\r\n              <strong>{name}</strong><br />\r\n              {address && <><strong>Adresse:</strong> {address}<br /></>}\r\n              {city && <><strong>Stadt:</strong> {city}<br /></>}\r\n              <strong>Beste Route:</strong>{\" \"}\r\n              <span style={styles.bold}>\r\n                {renderDistance(key)}\r\n              </span>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }, [filteredLocations, distances]);\r\n\r\n  const mockICDData = [\r\n    { icd: \"D27\", count: 120 },\r\n    { icd: \"C50\", count: 85 },\r\n    { icd: \"G40\", count: 42 },\r\n    { icd: \"I10\", count: 60 },\r\n    { icd: \"C34\", count: 30 }\r\n  ];\r\n  \r\n\r\n  return (\r\n    <div style={styles.scrollWrapper}>\r\n  {/* Section 1 */}\r\n  <div style={styles.sectionFixed}>\r\n    <h3 style={styles.title}>Informationen zur ausgewählten Einrichtung</h3>\r\n    <div style={styles.scrollSectionContent}>\r\n      {renderSelectedLocationInfo}\r\n    </div>\r\n  </div>\r\n\r\n  {/* Section 2 */}\r\n  <div style={styles.sectionFixed}>\r\n    <h3 style={styles.title}>Leistungserbringer Informationen</h3>\r\n    <div style={styles.scrollSectionContent}>\r\n      {renderProviderList}\r\n    </div>\r\n  </div>\r\n  \r\n      {/* Section 3 */}\r\n      <div style={styles.sectionFlexible}>\r\n    <h3 style={styles.title}>Analytics Dashboard</h3>\r\n    <div style={styles.scrollSectionContent}>\r\n  {/* 1. Verteilung der ICD-Fälle */}\r\n  <div style={{ marginBottom: \"20px\" }}>\r\n    <h4>Verteilung der ICD-Fälle</h4>\r\n    <p>Zeigt an, wie viele Fälle (Fallzahlen) mit jedem ICD-Code verbunden sind.</p>\r\n    <p>Darstellung als Balkendiagramm nach ICD-Code.</p>\r\n    \r\n    <ResponsiveContainer width=\"100%\" height={200}>\r\n      <BarChart data={mockICDData}>\r\n        <XAxis dataKey=\"icd\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Bar dataKey=\"count\" fill=\"#8884d8\" />\r\n      </BarChart>\r\n    </ResponsiveContainer>\r\n  </div>\r\n\r\n  <hr />\r\n\r\n  {/* 2. Erreichbarkeit */}\r\n  <div style={{ margin: \"20px 0\" }}>\r\n    <h4>Erreichbarkeit</h4>\r\n    <p>Berechnet die beste Route (Straßenentfernung) zwischen dem Standort des Nutzers und jedem Anbieter.</p>\r\n    <p style={styles.noData}>Noch keine Daten geladen.</p>\r\n  </div>\r\n\r\n  <hr />\r\n\r\n  {/* 3. Spezialisierungsgrad */}\r\n  <div style={{ margin: \"20px 0\" }}>\r\n    <h4>Spezialisierungsgrad</h4>\r\n    <p>Ermittelt Zentren mit einer hohen Anzahl von Fällen in einem bestimmten ICD.</p>\r\n    <p style={styles.noData}>Noch keine Daten geladen.</p>\r\n  </div>\r\n\r\n  <hr />\r\n\r\n  {/* 4. Kooperationsnetzwerke */}\r\n  <div style={{ margin: \"20px 0\" }}>\r\n    <h4>Kooperationsnetzwerke</h4>\r\n    <p>Visualisiert Kooperationen zwischen Kliniken, MVZs und ASVs.</p>\r\n    <p>Basierend auf KOOPERIERT_MIT-Beziehungen.</p>\r\n    <p style={styles.noData}>Noch keine Daten geladen.</p>\r\n  </div>\r\n\r\n  <hr />\r\n\r\n  {/* 5. Empfohlene Behandlungsorte */}\r\n  <div style={{ marginTop: \"20px\" }}>\r\n    <h4>Empfohlene Behandlungsorte</h4>\r\n    <p>Schlägt den besten Behandlungsort vor, basierend auf:</p>\r\n    <ul>\r\n      <li>Entfernung</li>\r\n      <li>ICD-Spezialisierung</li>\r\n      <li>Konnektivität der Kooperation</li>\r\n    </ul>\r\n    <p><strong>KI-basiertes Ranking:</strong> z.B. „Top 3 am nächsten + beste ICD-Übereinstimmung“</p>\r\n    <p style={styles.noData}>Noch keine Empfehlungen verfügbar.</p>\r\n  </div>\r\n</div>\r\n\r\n</div>\r\n</div>\r\n  );\r\n  \r\n});\r\n\r\nexport default Analytics;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}