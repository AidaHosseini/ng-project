{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\Analystics.js\",\n  _s = $RefreshSig$();\n// // export default Analystics;\n// import React, { useState, useEffect, useMemo } from \"react\";\n// import { useLocation } from \"./LocationContext\";\n\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// // üõ†Ô∏è Generate consistent keys for storing/retrieving distances\n// const getProviderKey = (type, name, address) => {\n//     const safeName = (name || \"\").trim();\n//     const safeAddress = (address || \"\").trim();\n//     return `${type}-${safeName}-${safeAddress}`;\n// };\n\n// // üöó Fetch road distance using OSRM API\n// const getRoadDistance = async (startLat, startLon, endLat, endLon) => {\n//     if (!startLat || !startLon || !endLat || !endLon) return \"N/A\";\n\n//     const url = `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`;\n\n//     try {\n//         const response = await fetch(url);\n//         const data = await response.json();\n//         if (data.routes?.length > 0) {\n//             return (data.routes[0].distance / 1000).toFixed(2); // meters ‚Üí km\n//         } else {\n//             console.warn(\"No route found\", { startLat, startLon, endLat, endLon });\n//             return \"N/A\";\n//         }\n//     } catch (err) {\n//         console.error(\"Distance fetch error:\", err);\n//         return \"N/A\";\n//     }\n// };\n\n// const Analystics = () => {\n//     const [distances, setDistances] = useState({});\n//     const { allLocations, selectedLocation } = useLocation();\n\n//     // ‚úÖ Detect origin location (user or city center)\n//     const originLocation = useMemo(() => {\n//         return allLocations.find(loc =>\n//             loc.clinic_name === \"Your Location\" || loc.clinic_name === \"Zentrum (Umkreis)\"\n//         );\n//     }, [allLocations]);\n\n//     // üöÄ Calculate distances once locations are ready\n//     useEffect(() => {\n//         const fetchDistances = async () => {\n//             if (!originLocation?.latitude || !originLocation?.longitude) {\n//                 console.warn(\"üö´ Origin location missing!\");\n//                 return;\n//             }\n\n//             const newDistances = {};\n\n//             for (const provider of allLocations) {\n//                 if (\n//                     provider.clinic_name === \"Your Location\" ||\n//                     provider.clinic_name === \"Zentrum (Umkreis)\"\n//                 ) continue;\n\n//                 const providerType = provider.clinic_name\n//                     ? \"clinic\"\n//                     : provider.mvz_name\n//                     ? \"mvz\"\n//                     : provider.asv_name\n//                     ? \"asv\"\n//                     : provider.niedergelassene_name\n//                     ? \"niedergelassene\"\n//                     : provider.neurologe_name\n//                     ? \"neurologe\"\n//                     : provider.onkologe_name\n//                     ? \"onkologe\"\n//                     : null;\n\n//                 const providerName =\n//                     provider.clinic_name ||\n//                     provider.mvz_name ||\n//                     provider.asv_name ||\n//                     provider.niedergelassene_name ||\n//                     provider.neurologe_name ||\n//                     provider.onkologe_name;\n\n//                 const providerAddress =\n//                     provider.clinic_address ||\n//                     provider.mvz_address ||\n//                     provider.asv_address ||\n//                     provider.niedergelassene_address ||\n//                     provider.neurologe_address ||\n//                     provider.onkologe_address;\n\n//                 const lat =\n//                     provider.clinic_latitude ||\n//                     provider.mvz_latitude ||\n//                     provider.asv_latitude ||\n//                     provider.niedergelassene_latitude ||\n//                     provider.neurologe_latitude ||\n//                     provider.onkologe_latitude;\n\n//                 const lon =\n//                     provider.clinic_longitude ||\n//                     provider.mvz_longitude ||\n//                     provider.asv_longitude ||\n//                     provider.niedergelassene_longitude ||\n//                     provider.neurologe_longitude ||\n//                     provider.onkologe_longitude;\n\n//                 if (!providerType || !providerName || !lat || !lon) continue;\n\n//                 const key = getProviderKey(providerType, providerName, providerAddress);\n//                 const distance = await getRoadDistance(\n//                     originLocation.latitude,\n//                     originLocation.longitude,\n//                     lat,\n//                     lon\n//                 );\n//                 newDistances[key] = distance;\n//             }\n\n//             setDistances(newDistances);\n//         };\n\n//         fetchDistances();\n//     }, [originLocation, allLocations]);\n\n//     // üîç Determine selected item key\n//     const selectedProviderType = selectedLocation?.clinic_name\n//         ? \"clinic\"\n//         : selectedLocation?.mvz_name\n//         ? \"mvz\"\n//         : selectedLocation?.asv_name\n//         ? \"asv\"\n//         : selectedLocation?.niedergelassene_name\n//         ? \"niedergelassene\"\n//         : selectedLocation?.neurologe_name\n//         ? \"neurologe\"\n//         : selectedLocation?.onkologe_name\n//         ? \"onkologe\"\n//         : null;\n\n//     const selectedProviderName =\n//         selectedLocation?.clinic_name ||\n//         selectedLocation?.mvz_name ||\n//         selectedLocation?.asv_name ||\n//         selectedLocation?.niedergelassene_name ||\n//         selectedLocation?.neurologe_name ||\n//         selectedLocation?.onkologe_name;\n\n//     const selectedAddress =\n//         selectedLocation?.clinic_address ||\n//         selectedLocation?.mvz_address ||\n//         selectedLocation?.asv_address ||\n//         selectedLocation?.niedergelassene_address ||\n//         selectedLocation?.neurologe_address ||\n//         selectedLocation?.onkologe_address;\n\n//     const selectedDistanceKey = getProviderKey(\n//         selectedProviderType,\n//         selectedProviderName,\n//         selectedAddress\n//     );\n\n//     return (\n//         <>\n//             <div style={styles.informationsContainer}>\n//                 <h3 style={styles.title}>Informationen zur ausgew√§hlten Einrichtung</h3>\n\n//                 {selectedLocation ? (\n//                     <>\n//                         {selectedProviderName && (\n//                             <p><strong>Name:</strong> {selectedProviderName}</p>\n//                         )}\n//                         {selectedAddress && (\n//                             <p><strong>Adresse:</strong> {selectedAddress}</p>\n//                         )}\n//                         {(selectedLocation.clinic_city ||\n//                             selectedLocation.mvz_city ||\n//                             selectedLocation.asv_city ||\n//                             selectedLocation.niedergelassene_city ||\n//                             selectedLocation.neurologe_city ||\n//                             selectedLocation.onkologe_city) && (\n//                             <p><strong>Stadt:</strong> {selectedLocation.clinic_city ||\n//                                 selectedLocation.mvz_city ||\n//                                 selectedLocation.asv_city ||\n//                                 selectedLocation.niedergelassene_city ||\n//                                 selectedLocation.neurologe_city ||\n//                                 selectedLocation.onkologe_city}</p>\n//                         )}\n//                         <p><strong>Beste Route:</strong>{\" \"}\n//                             <span style={styles.bold}>\n//                                 {distances[selectedDistanceKey] || \"Berechne...\"} km\n//                             </span></p>\n//                     </>\n//                 ) : (\n//                     <p style={{ fontStyle: \"italic\", color: \"#666\" }}>\n//                         Keine Einrichtung ausgew√§hlt.\n//                     </p>\n//                 )}\n//             </div>\n\n//             <div style={styles.analysticContainer}>\n//                 <h3 style={styles.title}>Leistungserbringer Informationen</h3>\n//                 {allLocations.length > 0 ? (\n//                     <ul style={styles.list}>\n//                         {allLocations.map((provider, index) => {\n//                             if (\n//                                 provider.clinic_name === \"Your Location\" ||\n//                                 provider.clinic_name === \"Zentrum (Umkreis)\"\n//                             ) return null;\n\n//                             const type = provider.clinic_name\n//                                 ? \"clinic\"\n//                                 : provider.mvz_name\n//                                 ? \"mvz\"\n//                                 : provider.asv_name\n//                                 ? \"asv\"\n//                                 : provider.niedergelassene_name\n//                                 ? \"niedergelassene\"\n//                                 : provider.neurologe_name\n//                                 ? \"neurologe\"\n//                                 : provider.onkologe_name\n//                                 ? \"onkologe\"\n//                                 : null;\n\n//                             const name =\n//                                 provider.clinic_name ||\n//                                 provider.mvz_name ||\n//                                 provider.asv_name ||\n//                                 provider.niedergelassene_name ||\n//                                 provider.neurologe_name ||\n//                                 provider.onkologe_name;\n\n//                             const address =\n//                                 provider.clinic_address ||\n//                                 provider.mvz_address ||\n//                                 provider.asv_address ||\n//                                 provider.niedergelassene_address ||\n//                                 provider.neurologe_address ||\n//                                 provider.onkologe_address;\n\n//                             const key = getProviderKey(type, name, address);\n\n//                             if (!type || !name) return null;\n\n//                             return (\n//                                 <li key={index} style={styles.listItem}>\n//                                     <span\n//                                         style={{\n//                                             backgroundColor: lineColors[index % lineColors.length],\n//                                             display: \"inline-block\",\n//                                             width: \"12px\",\n//                                             height: \"12px\",\n//                                             borderRadius: \"50%\",\n//                                             marginRight: \"5px\"\n//                                         }}\n//                                     />\n//                                     <strong>{name}</strong><br />\n//                                     {address && <><strong>Adresse:</strong> {address}<br /></>}\n//                                     {(provider.clinic_city || provider.mvz_city || provider.asv_city || provider.niedergelassene_city || provider.neurologe_city || provider.onkologe_city) && (\n//                                         <><strong>Stadt:</strong> {provider.clinic_city || provider.mvz_city || provider.asv_city || provider.niedergelassene_city || provider.neurologe_city || provider.onkologe_city}<br /></>\n//                                     )}\n//                                     <strong>Beste Route:</strong>{\" \"}\n//                                     <span style={styles.bold}>\n//                                         {distances[key] || \"Berechne...\"} km\n//                                     </span>\n//                                 </li>\n//                             );\n//                         })}\n//                     </ul>\n//                 ) : (\n//                     <p style={styles.noData}>Keine Daten verf√ºgbar.</p>\n//                 )}\n//             </div>\n//         </>\n//     );\n// };\n\n// const styles = {\n//     informationsContainer: {\n//         width: \"35%\",\n//         fontWeight: \"600\",\n//         position: \"absolute\",\n//         border: \"2px solid #b3e5fc\",\n//         right: \"10px\",\n//         top: \"130px\",\n//         overflowY: \"scroll\",\n//         maxHeight: \"200px\",\n//         // bottom: \"520px\",\n//         padding: \"15px\",\n//         backgroundColor: \"#e1ecf0\",\n//         borderRadius: \"8px\",\n//         fontSize: \"12px\"\n//     },\n//     analysticContainer: {\n//         width: \"35%\",\n//         fontWeight: \"600\",\n//         position: \"absolute\",\n//         border: \"2px solid #b3e5fc\",\n//         right: \"10px\",\n//         top: \"350px\",\n//         // height: \"635px\",\n//         overflowY: \"scroll\",  // Enables vertical scroll\n//         maxHeight: \"635px\",\n//         padding: \"15px\",\n//         backgroundColor: \"#e1ecf0\",\n//         borderRadius: \"8px\",\n//         fontSize: \"12px\"\n//     },\n//     title: {\n//         fontSize: \"18px\",\n//         marginBottom: \"8px\",\n//         fontWeight: \"600\"\n//     },\n//     list: {\n//         listStyleType: \"none\",\n//         padding: 0,\n//         margin: 0\n//     },\n//     listItem: {\n//         marginBottom: \"8px\",\n//         padding: \"8px\",\n//         borderBottom: \"1px solid #ddd\"\n//     },\n//     bold: {\n//         fontWeight: \"600\"\n//     },\n//     noData: {\n//         fontStyle: \"italic\",\n//         color: \"#999\"\n//     }\n// };\n\n// export default Analystics;\n\nimport React, { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { useLocation } from \"./LocationContext\";\n\n// Constants\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LINE_COLORS = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// Styles\nconst styles = {\n  informationsContainer: {\n    width: \"35%\",\n    fontWeight: \"600\",\n    position: \"absolute\",\n    border: \"2px solid #b3e5fc\",\n    right: \"10px\",\n    top: \"130px\",\n    overflowY: \"auto\",\n    maxHeight: \"200px\",\n    padding: \"15px\",\n    backgroundColor: \"#e1ecf0\",\n    borderRadius: \"8px\",\n    fontSize: \"12px\"\n  },\n  analysticContainer: {\n    width: \"35%\",\n    fontWeight: \"600\",\n    position: \"absolute\",\n    border: \"2px solid #b3e5fc\",\n    right: \"10px\",\n    top: \"350px\",\n    overflowY: \"auto\",\n    maxHeight: \"635px\",\n    padding: \"15px\",\n    backgroundColor: \"#e1ecf0\",\n    borderRadius: \"8px\",\n    fontSize: \"12px\"\n  },\n  title: {\n    fontSize: \"18px\",\n    marginBottom: \"8px\",\n    fontWeight: \"600\"\n  },\n  list: {\n    listStyleType: \"none\",\n    padding: 0,\n    margin: 0\n  },\n  listItem: {\n    marginBottom: \"8px\",\n    padding: \"8px\",\n    borderBottom: \"1px solid #ddd\"\n  },\n  bold: {\n    fontWeight: \"600\"\n  },\n  noData: {\n    fontStyle: \"italic\",\n    color: \"#999\"\n  },\n  colorDot: {\n    display: \"inline-block\",\n    width: \"12px\",\n    height: \"12px\",\n    borderRadius: \"50%\",\n    marginRight: \"5px\"\n  },\n  calculatingText: {\n    color: \"#666\",\n    fontStyle: \"italic\"\n  }\n};\n\n// Helper functions\nconst getProviderKey = (type, name, address) => {\n  return `${type}-${(name || \"\").trim()}-${(address || \"\").trim()}`;\n};\nconst getRoadDistance = async (startLat, startLon, endLat, endLon, attempt = 1) => {\n  if (!startLat || !startLon || !endLat || !endLon) return null;\n\n  // Add a small delay between requests to avoid rate limiting\n  await new Promise(resolve => setTimeout(resolve, attempt * 200));\n  try {\n    var _data$routes, _data$routes$;\n    const response = await fetch(`https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`);\n    if (!response.ok) {\n      if (response.status === 429 && attempt < 3) {\n        // Exponential backoff for rate limiting\n        return getRoadDistance(startLat, startLon, endLat, endLon, attempt + 1);\n      }\n      return null;\n    }\n    const data = await response.json();\n    return (_data$routes = data.routes) !== null && _data$routes !== void 0 && (_data$routes$ = _data$routes[0]) !== null && _data$routes$ !== void 0 && _data$routes$.distance ? (data.routes[0].distance / 1000).toFixed(2) : null;\n  } catch (err) {\n    console.error(\"Distance fetch error:\", err);\n    return null;\n  }\n};\nconst getProviderDetails = provider => {\n  const type = provider.clinic_name ? \"clinic\" : provider.mvz_name ? \"mvz\" : provider.asv_name ? \"asv\" : provider.niedergelassene_name ? \"niedergelassene\" : provider.neurologe_name ? \"neurologe\" : provider.onkologe_name ? \"onkologe\" : null;\n  const name = provider.clinic_name || provider.mvz_name || provider.asv_name || provider.niedergelassene_name || provider.neurologe_name || provider.onkologe_name;\n  const address = provider.clinic_address || provider.mvz_address || provider.asv_address || provider.niedergelassene_address || provider.neurologe_address || provider.onkologe_address;\n  const city = provider.clinic_city || provider.mvz_city || provider.asv_city || provider.niedergelassene_city || provider.neurologe_city || provider.onkologe_city;\n  const lat = provider.clinic_latitude || provider.mvz_latitude || provider.asv_latitude || provider.niedergelassene_latitude || provider.neurologe_latitude || provider.onkologe_latitude;\n  const lon = provider.clinic_longitude || provider.mvz_longitude || provider.asv_longitude || provider.niedergelassene_longitude || provider.neurologe_longitude || provider.onkologe_longitude;\n  return {\n    type,\n    name,\n    address,\n    city,\n    lat,\n    lon\n  };\n};\nconst Analytics = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_c = _s(() => {\n  _s();\n  const [distances, setDistances] = useState({});\n  const [isCalculating, setIsCalculating] = useState(false);\n  const {\n    allLocations,\n    selectedLocation\n  } = useLocation();\n  const originLocation = useMemo(() => {\n    return allLocations.find(loc => loc.clinic_name === \"Your Location\" || loc.clinic_name === \"Zentrum (Umkreis)\");\n  }, [allLocations]);\n  const fetchDistances = useCallback(async () => {\n    if (!(originLocation !== null && originLocation !== void 0 && originLocation.latitude) || !(originLocation !== null && originLocation !== void 0 && originLocation.longitude)) return;\n    setIsCalculating(true);\n    const newDistances = {};\n\n    // Process locations in batches to avoid overwhelming the API/browser\n    const batchSize = 5;\n    const batches = [];\n    for (let i = 0; i < allLocations.length; i += batchSize) {\n      batches.push(allLocations.slice(i, i + batchSize));\n    }\n    for (const batch of batches) {\n      const batchPromises = batch.map(provider => {\n        if (provider.clinic_name === \"Your Location\" || provider.clinic_name === \"Zentrum (Umkreis)\") {\n          return Promise.resolve();\n        }\n        const {\n          type,\n          name,\n          address,\n          lat,\n          lon\n        } = getProviderDetails(provider);\n        if (!type || !name || !lat || !lon) return Promise.resolve();\n        const key = getProviderKey(type, name, address);\n        return getRoadDistance(originLocation.latitude, originLocation.longitude, lat, lon).then(distance => {\n          if (distance !== null) {\n            newDistances[key] = distance;\n          }\n        });\n      });\n      await Promise.all(batchPromises);\n\n      // Update state after each batch to show partial progress\n      setDistances(prev => ({\n        ...prev,\n        ...newDistances\n      }));\n\n      // Small delay between batches\n      await new Promise(resolve => setTimeout(resolve, 500));\n    }\n    setIsCalculating(false);\n  }, [originLocation, allLocations]);\n  useEffect(() => {\n    fetchDistances();\n  }, [fetchDistances]);\n  const selectedDetails = useMemo(() => {\n    if (!selectedLocation) return null;\n    return getProviderDetails(selectedLocation);\n  }, [selectedLocation]);\n  const selectedDistanceKey = useMemo(() => {\n    if (!selectedDetails) return null;\n    return getProviderKey(selectedDetails.type, selectedDetails.name, selectedDetails.address);\n  }, [selectedDetails]);\n  const filteredLocations = useMemo(() => {\n    return allLocations.filter(provider => provider.clinic_name !== \"Your Location\" && provider.clinic_name !== \"Zentrum (Umkreis)\");\n  }, [allLocations]);\n  const renderDistance = key => {\n    if (!key) return /*#__PURE__*/_jsxDEV(\"span\", {\n      style: styles.calculatingText,\n      children: \"Nicht verf\\xFCgbar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 22\n    }, this);\n    if (key in distances) return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [distances[key], \" km\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 34\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      style: styles.calculatingText,\n      children: \"Berechne...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 12\n    }, this);\n  };\n  const renderSelectedLocationInfo = useMemo(() => {\n    if (!selectedDetails) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontStyle: \"italic\",\n          color: \"#666\"\n        },\n        children: \"Keine Einrichtung ausgew\\xE4hlt.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [selectedDetails.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 37\n        }, this), \" \", selectedDetails.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 34\n      }, this), selectedDetails.address && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Adresse:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 40\n        }, this), \" \", selectedDetails.address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 37\n      }, this), selectedDetails.city && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Stadt:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 37\n        }, this), \" \", selectedDetails.city]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Beste Route:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: styles.bold,\n          children: renderDistance(selectedDistanceKey)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }, [selectedDetails, selectedDistanceKey, distances]);\n  const renderProviderList = useMemo(() => {\n    if (filteredLocations.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        style: styles.noData,\n        children: \"Keine Daten verf\\xFCgbar.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: styles.list,\n      children: filteredLocations.map((provider, index) => {\n        const {\n          type,\n          name,\n          address,\n          city\n        } = getProviderDetails(provider);\n        if (!type || !name) return null;\n        const key = getProviderKey(type, name, address);\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          style: styles.listItem,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              ...styles.colorDot,\n              backgroundColor: LINE_COLORS[index % LINE_COLORS.length]\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 585,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 585,\n            columnNumber: 38\n          }, this), address && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Adresse:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 586,\n              columnNumber: 29\n            }, this), \" \", address, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 586,\n              columnNumber: 64\n            }, this)]\n          }, void 0, true), city && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Stadt:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 26\n            }, this), \" \", city, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 56\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Beste Route:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: styles.bold,\n            children: renderDistance(key)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 15\n          }, this)]\n        }, `provider-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 7\n    }, this);\n  }, [filteredLocations, distances]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.informationsContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: styles.title,\n        children: \"Informationen zur ausgew\\xE4hlten Einrichtung\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 9\n      }, this), renderSelectedLocationInfo]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.analysticContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: styles.title,\n        children: \"Leistungserbringer Informationen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 9\n      }, this), isCalculating && filteredLocations.length > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: styles.calculatingText,\n        children: \"Berechne Entfernungen...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 11\n      }, this), renderProviderList]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}, \"LT7sm+Zpnhqw8s04Obm6YCLg1W0=\", false, function () {\n  return [useLocation];\n})), \"LT7sm+Zpnhqw8s04Obm6YCLg1W0=\", false, function () {\n  return [useLocation];\n});\n_c2 = Analytics;\nexport default Analytics;\nvar _c, _c2;\n$RefreshReg$(_c, \"Analytics$React.memo\");\n$RefreshReg$(_c2, \"Analytics\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","useLocation","jsxDEV","_jsxDEV","Fragment","_Fragment","LINE_COLORS","styles","informationsContainer","width","fontWeight","position","border","right","top","overflowY","maxHeight","padding","backgroundColor","borderRadius","fontSize","analysticContainer","title","marginBottom","list","listStyleType","margin","listItem","borderBottom","bold","noData","fontStyle","color","colorDot","display","height","marginRight","calculatingText","getProviderKey","type","name","address","trim","getRoadDistance","startLat","startLon","endLat","endLon","attempt","Promise","resolve","setTimeout","_data$routes","_data$routes$","response","fetch","ok","status","data","json","routes","distance","toFixed","err","console","error","getProviderDetails","provider","clinic_name","mvz_name","asv_name","niedergelassene_name","neurologe_name","onkologe_name","clinic_address","mvz_address","asv_address","niedergelassene_address","neurologe_address","onkologe_address","city","clinic_city","mvz_city","asv_city","niedergelassene_city","neurologe_city","onkologe_city","lat","clinic_latitude","mvz_latitude","asv_latitude","niedergelassene_latitude","neurologe_latitude","onkologe_latitude","lon","clinic_longitude","mvz_longitude","asv_longitude","niedergelassene_longitude","neurologe_longitude","onkologe_longitude","Analytics","_s","memo","_c","distances","setDistances","isCalculating","setIsCalculating","allLocations","selectedLocation","originLocation","find","loc","fetchDistances","latitude","longitude","newDistances","batchSize","batches","i","length","push","slice","batch","batchPromises","map","key","then","all","prev","selectedDetails","selectedDistanceKey","filteredLocations","filter","renderDistance","style","children","fileName","_jsxFileName","lineNumber","columnNumber","renderSelectedLocationInfo","renderProviderList","index","_c2","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/Analystics.js"],"sourcesContent":["// // export default Analystics;\r\n// import React, { useState, useEffect, useMemo } from \"react\";\r\n// import { useLocation } from \"./LocationContext\";\r\n\r\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// // üõ†Ô∏è Generate consistent keys for storing/retrieving distances\r\n// const getProviderKey = (type, name, address) => {\r\n//     const safeName = (name || \"\").trim();\r\n//     const safeAddress = (address || \"\").trim();\r\n//     return `${type}-${safeName}-${safeAddress}`;\r\n// };\r\n\r\n\r\n\r\n// // üöó Fetch road distance using OSRM API\r\n// const getRoadDistance = async (startLat, startLon, endLat, endLon) => {\r\n//     if (!startLat || !startLon || !endLat || !endLon) return \"N/A\";\r\n\r\n//     const url = `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`;\r\n\r\n//     try {\r\n//         const response = await fetch(url);\r\n//         const data = await response.json();\r\n//         if (data.routes?.length > 0) {\r\n//             return (data.routes[0].distance / 1000).toFixed(2); // meters ‚Üí km\r\n//         } else {\r\n//             console.warn(\"No route found\", { startLat, startLon, endLat, endLon });\r\n//             return \"N/A\";\r\n//         }\r\n//     } catch (err) {\r\n//         console.error(\"Distance fetch error:\", err);\r\n//         return \"N/A\";\r\n//     }\r\n// };\r\n\r\n// const Analystics = () => {\r\n//     const [distances, setDistances] = useState({});\r\n//     const { allLocations, selectedLocation } = useLocation();\r\n\r\n//     // ‚úÖ Detect origin location (user or city center)\r\n//     const originLocation = useMemo(() => {\r\n//         return allLocations.find(loc =>\r\n//             loc.clinic_name === \"Your Location\" || loc.clinic_name === \"Zentrum (Umkreis)\"\r\n//         );\r\n//     }, [allLocations]);\r\n    \r\n\r\n//     // üöÄ Calculate distances once locations are ready\r\n//     useEffect(() => {\r\n//         const fetchDistances = async () => {\r\n//             if (!originLocation?.latitude || !originLocation?.longitude) {\r\n//                 console.warn(\"üö´ Origin location missing!\");\r\n//                 return;\r\n//             }\r\n\r\n//             const newDistances = {};\r\n\r\n//             for (const provider of allLocations) {\r\n//                 if (\r\n//                     provider.clinic_name === \"Your Location\" ||\r\n//                     provider.clinic_name === \"Zentrum (Umkreis)\"\r\n//                 ) continue;\r\n\r\n//                 const providerType = provider.clinic_name\r\n//                     ? \"clinic\"\r\n//                     : provider.mvz_name\r\n//                     ? \"mvz\"\r\n//                     : provider.asv_name\r\n//                     ? \"asv\"\r\n//                     : provider.niedergelassene_name\r\n//                     ? \"niedergelassene\"\r\n//                     : provider.neurologe_name\r\n//                     ? \"neurologe\"\r\n//                     : provider.onkologe_name\r\n//                     ? \"onkologe\"\r\n//                     : null;\r\n\r\n//                 const providerName =\r\n//                     provider.clinic_name ||\r\n//                     provider.mvz_name ||\r\n//                     provider.asv_name ||\r\n//                     provider.niedergelassene_name ||\r\n//                     provider.neurologe_name ||\r\n//                     provider.onkologe_name;\r\n\r\n//                 const providerAddress =\r\n//                     provider.clinic_address ||\r\n//                     provider.mvz_address ||\r\n//                     provider.asv_address ||\r\n//                     provider.niedergelassene_address ||\r\n//                     provider.neurologe_address ||\r\n//                     provider.onkologe_address;\r\n\r\n//                 const lat =\r\n//                     provider.clinic_latitude ||\r\n//                     provider.mvz_latitude ||\r\n//                     provider.asv_latitude ||\r\n//                     provider.niedergelassene_latitude ||\r\n//                     provider.neurologe_latitude ||\r\n//                     provider.onkologe_latitude;\r\n\r\n//                 const lon =\r\n//                     provider.clinic_longitude ||\r\n//                     provider.mvz_longitude ||\r\n//                     provider.asv_longitude ||\r\n//                     provider.niedergelassene_longitude ||\r\n//                     provider.neurologe_longitude ||\r\n//                     provider.onkologe_longitude;\r\n\r\n//                 if (!providerType || !providerName || !lat || !lon) continue;\r\n\r\n//                 const key = getProviderKey(providerType, providerName, providerAddress);\r\n//                 const distance = await getRoadDistance(\r\n//                     originLocation.latitude,\r\n//                     originLocation.longitude,\r\n//                     lat,\r\n//                     lon\r\n//                 );\r\n//                 newDistances[key] = distance;\r\n//             }\r\n\r\n//             setDistances(newDistances);\r\n//         };\r\n\r\n//         fetchDistances();\r\n//     }, [originLocation, allLocations]);\r\n\r\n//     // üîç Determine selected item key\r\n//     const selectedProviderType = selectedLocation?.clinic_name\r\n//         ? \"clinic\"\r\n//         : selectedLocation?.mvz_name\r\n//         ? \"mvz\"\r\n//         : selectedLocation?.asv_name\r\n//         ? \"asv\"\r\n//         : selectedLocation?.niedergelassene_name\r\n//         ? \"niedergelassene\"\r\n//         : selectedLocation?.neurologe_name\r\n//         ? \"neurologe\"\r\n//         : selectedLocation?.onkologe_name\r\n//         ? \"onkologe\"\r\n//         : null;\r\n\r\n//     const selectedProviderName =\r\n//         selectedLocation?.clinic_name ||\r\n//         selectedLocation?.mvz_name ||\r\n//         selectedLocation?.asv_name ||\r\n//         selectedLocation?.niedergelassene_name ||\r\n//         selectedLocation?.neurologe_name ||\r\n//         selectedLocation?.onkologe_name;\r\n\r\n//     const selectedAddress =\r\n//         selectedLocation?.clinic_address ||\r\n//         selectedLocation?.mvz_address ||\r\n//         selectedLocation?.asv_address ||\r\n//         selectedLocation?.niedergelassene_address ||\r\n//         selectedLocation?.neurologe_address ||\r\n//         selectedLocation?.onkologe_address;\r\n\r\n//     const selectedDistanceKey = getProviderKey(\r\n//         selectedProviderType,\r\n//         selectedProviderName,\r\n//         selectedAddress\r\n//     );\r\n\r\n//     return (\r\n//         <>\r\n//             <div style={styles.informationsContainer}>\r\n//                 <h3 style={styles.title}>Informationen zur ausgew√§hlten Einrichtung</h3>\r\n\r\n//                 {selectedLocation ? (\r\n//                     <>\r\n//                         {selectedProviderName && (\r\n//                             <p><strong>Name:</strong> {selectedProviderName}</p>\r\n//                         )}\r\n//                         {selectedAddress && (\r\n//                             <p><strong>Adresse:</strong> {selectedAddress}</p>\r\n//                         )}\r\n//                         {(selectedLocation.clinic_city ||\r\n//                             selectedLocation.mvz_city ||\r\n//                             selectedLocation.asv_city ||\r\n//                             selectedLocation.niedergelassene_city ||\r\n//                             selectedLocation.neurologe_city ||\r\n//                             selectedLocation.onkologe_city) && (\r\n//                             <p><strong>Stadt:</strong> {selectedLocation.clinic_city ||\r\n//                                 selectedLocation.mvz_city ||\r\n//                                 selectedLocation.asv_city ||\r\n//                                 selectedLocation.niedergelassene_city ||\r\n//                                 selectedLocation.neurologe_city ||\r\n//                                 selectedLocation.onkologe_city}</p>\r\n//                         )}\r\n//                         <p><strong>Beste Route:</strong>{\" \"}\r\n//                             <span style={styles.bold}>\r\n//                                 {distances[selectedDistanceKey] || \"Berechne...\"} km\r\n//                             </span></p>\r\n//                     </>\r\n//                 ) : (\r\n//                     <p style={{ fontStyle: \"italic\", color: \"#666\" }}>\r\n//                         Keine Einrichtung ausgew√§hlt.\r\n//                     </p>\r\n//                 )}\r\n//             </div>\r\n\r\n//             <div style={styles.analysticContainer}>\r\n//                 <h3 style={styles.title}>Leistungserbringer Informationen</h3>\r\n//                 {allLocations.length > 0 ? (\r\n//                     <ul style={styles.list}>\r\n//                         {allLocations.map((provider, index) => {\r\n//                             if (\r\n//                                 provider.clinic_name === \"Your Location\" ||\r\n//                                 provider.clinic_name === \"Zentrum (Umkreis)\"\r\n//                             ) return null;\r\n\r\n//                             const type = provider.clinic_name\r\n//                                 ? \"clinic\"\r\n//                                 : provider.mvz_name\r\n//                                 ? \"mvz\"\r\n//                                 : provider.asv_name\r\n//                                 ? \"asv\"\r\n//                                 : provider.niedergelassene_name\r\n//                                 ? \"niedergelassene\"\r\n//                                 : provider.neurologe_name\r\n//                                 ? \"neurologe\"\r\n//                                 : provider.onkologe_name\r\n//                                 ? \"onkologe\"\r\n//                                 : null;\r\n\r\n//                             const name =\r\n//                                 provider.clinic_name ||\r\n//                                 provider.mvz_name ||\r\n//                                 provider.asv_name ||\r\n//                                 provider.niedergelassene_name ||\r\n//                                 provider.neurologe_name ||\r\n//                                 provider.onkologe_name;\r\n\r\n//                             const address =\r\n//                                 provider.clinic_address ||\r\n//                                 provider.mvz_address ||\r\n//                                 provider.asv_address ||\r\n//                                 provider.niedergelassene_address ||\r\n//                                 provider.neurologe_address ||\r\n//                                 provider.onkologe_address;\r\n\r\n//                             const key = getProviderKey(type, name, address);\r\n\r\n//                             if (!type || !name) return null;\r\n\r\n//                             return (\r\n//                                 <li key={index} style={styles.listItem}>\r\n//                                     <span\r\n//                                         style={{\r\n//                                             backgroundColor: lineColors[index % lineColors.length],\r\n//                                             display: \"inline-block\",\r\n//                                             width: \"12px\",\r\n//                                             height: \"12px\",\r\n//                                             borderRadius: \"50%\",\r\n//                                             marginRight: \"5px\"\r\n//                                         }}\r\n//                                     />\r\n//                                     <strong>{name}</strong><br />\r\n//                                     {address && <><strong>Adresse:</strong> {address}<br /></>}\r\n//                                     {(provider.clinic_city || provider.mvz_city || provider.asv_city || provider.niedergelassene_city || provider.neurologe_city || provider.onkologe_city) && (\r\n//                                         <><strong>Stadt:</strong> {provider.clinic_city || provider.mvz_city || provider.asv_city || provider.niedergelassene_city || provider.neurologe_city || provider.onkologe_city}<br /></>\r\n//                                     )}\r\n//                                     <strong>Beste Route:</strong>{\" \"}\r\n//                                     <span style={styles.bold}>\r\n//                                         {distances[key] || \"Berechne...\"} km\r\n//                                     </span>\r\n//                                 </li>\r\n//                             );\r\n//                         })}\r\n//                     </ul>\r\n//                 ) : (\r\n//                     <p style={styles.noData}>Keine Daten verf√ºgbar.</p>\r\n//                 )}\r\n//             </div>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// const styles = {\r\n//     informationsContainer: {\r\n//         width: \"35%\",\r\n//         fontWeight: \"600\",\r\n//         position: \"absolute\",\r\n//         border: \"2px solid #b3e5fc\",\r\n//         right: \"10px\",\r\n//         top: \"130px\",\r\n//         overflowY: \"scroll\",\r\n//         maxHeight: \"200px\",\r\n//         // bottom: \"520px\",\r\n//         padding: \"15px\",\r\n//         backgroundColor: \"#e1ecf0\",\r\n//         borderRadius: \"8px\",\r\n//         fontSize: \"12px\"\r\n//     },\r\n//     analysticContainer: {\r\n//         width: \"35%\",\r\n//         fontWeight: \"600\",\r\n//         position: \"absolute\",\r\n//         border: \"2px solid #b3e5fc\",\r\n//         right: \"10px\",\r\n//         top: \"350px\",\r\n//         // height: \"635px\",\r\n//         overflowY: \"scroll\",  // Enables vertical scroll\r\n//         maxHeight: \"635px\",\r\n//         padding: \"15px\",\r\n//         backgroundColor: \"#e1ecf0\",\r\n//         borderRadius: \"8px\",\r\n//         fontSize: \"12px\"\r\n//     },\r\n//     title: {\r\n//         fontSize: \"18px\",\r\n//         marginBottom: \"8px\",\r\n//         fontWeight: \"600\"\r\n//     },\r\n//     list: {\r\n//         listStyleType: \"none\",\r\n//         padding: 0,\r\n//         margin: 0\r\n//     },\r\n//     listItem: {\r\n//         marginBottom: \"8px\",\r\n//         padding: \"8px\",\r\n//         borderBottom: \"1px solid #ddd\"\r\n//     },\r\n//     bold: {\r\n//         fontWeight: \"600\"\r\n//     },\r\n//     noData: {\r\n//         fontStyle: \"italic\",\r\n//         color: \"#999\"\r\n//     }\r\n// };\r\n\r\n// export default Analystics;\r\n\r\nimport React, { useState, useEffect, useMemo, useCallback } from \"react\";\r\nimport { useLocation } from \"./LocationContext\";\r\n\r\n// Constants\r\nconst LINE_COLORS = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// Styles\r\nconst styles = {\r\n  informationsContainer: {\r\n    width: \"35%\",\r\n    fontWeight: \"600\",\r\n    position: \"absolute\",\r\n    border: \"2px solid #b3e5fc\",\r\n    right: \"10px\",\r\n    top: \"130px\",\r\n    overflowY: \"auto\",\r\n    maxHeight: \"200px\",\r\n    padding: \"15px\",\r\n    backgroundColor: \"#e1ecf0\",\r\n    borderRadius: \"8px\",\r\n    fontSize: \"12px\"\r\n  },\r\n  analysticContainer: {\r\n    width: \"35%\",\r\n    fontWeight: \"600\",\r\n    position: \"absolute\",\r\n    border: \"2px solid #b3e5fc\",\r\n    right: \"10px\",\r\n    top: \"350px\",\r\n    overflowY: \"auto\",\r\n    maxHeight: \"635px\",\r\n    padding: \"15px\",\r\n    backgroundColor: \"#e1ecf0\",\r\n    borderRadius: \"8px\",\r\n    fontSize: \"12px\"\r\n  },\r\n  title: {\r\n    fontSize: \"18px\",\r\n    marginBottom: \"8px\",\r\n    fontWeight: \"600\"\r\n  },\r\n  list: {\r\n    listStyleType: \"none\",\r\n    padding: 0,\r\n    margin: 0\r\n  },\r\n  listItem: {\r\n    marginBottom: \"8px\",\r\n    padding: \"8px\",\r\n    borderBottom: \"1px solid #ddd\"\r\n  },\r\n  bold: {\r\n    fontWeight: \"600\"\r\n  },\r\n  noData: {\r\n    fontStyle: \"italic\",\r\n    color: \"#999\"\r\n  },\r\n  colorDot: {\r\n    display: \"inline-block\",\r\n    width: \"12px\",\r\n    height: \"12px\",\r\n    borderRadius: \"50%\",\r\n    marginRight: \"5px\"\r\n  },\r\n  calculatingText: {\r\n    color: \"#666\",\r\n    fontStyle: \"italic\"\r\n  }\r\n};\r\n\r\n// Helper functions\r\nconst getProviderKey = (type, name, address) => {\r\n  return `${type}-${(name || \"\").trim()}-${(address || \"\").trim()}`;\r\n};\r\n\r\nconst getRoadDistance = async (startLat, startLon, endLat, endLon, attempt = 1) => {\r\n  if (!startLat || !startLon || !endLat || !endLon) return null;\r\n\r\n  // Add a small delay between requests to avoid rate limiting\r\n  await new Promise(resolve => setTimeout(resolve, attempt * 200));\r\n\r\n  try {\r\n    const response = await fetch(\r\n      `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      if (response.status === 429 && attempt < 3) {\r\n        // Exponential backoff for rate limiting\r\n        return getRoadDistance(startLat, startLon, endLat, endLon, attempt + 1);\r\n      }\r\n      return null;\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.routes?.[0]?.distance ? (data.routes[0].distance / 1000).toFixed(2) : null;\r\n  } catch (err) {\r\n    console.error(\"Distance fetch error:\", err);\r\n    return null;\r\n  }\r\n};\r\n\r\nconst getProviderDetails = (provider) => {\r\n  const type = provider.clinic_name ? \"clinic\" :\r\n    provider.mvz_name ? \"mvz\" :\r\n    provider.asv_name ? \"asv\" :\r\n    provider.niedergelassene_name ? \"niedergelassene\" :\r\n    provider.neurologe_name ? \"neurologe\" :\r\n    provider.onkologe_name ? \"onkologe\" : null;\r\n\r\n  const name = provider.clinic_name || provider.mvz_name || provider.asv_name || \r\n    provider.niedergelassene_name || provider.neurologe_name || provider.onkologe_name;\r\n\r\n  const address = provider.clinic_address || provider.mvz_address || provider.asv_address || \r\n    provider.niedergelassene_address || provider.neurologe_address || provider.onkologe_address;\r\n\r\n  const city = provider.clinic_city || provider.mvz_city || provider.asv_city || \r\n    provider.niedergelassene_city || provider.neurologe_city || provider.onkologe_city;\r\n\r\n  const lat = provider.clinic_latitude || provider.mvz_latitude || provider.asv_latitude || \r\n    provider.niedergelassene_latitude || provider.neurologe_latitude || provider.onkologe_latitude;\r\n\r\n  const lon = provider.clinic_longitude || provider.mvz_longitude || provider.asv_longitude || \r\n    provider.niedergelassene_longitude || provider.neurologe_longitude || provider.onkologe_longitude;\r\n\r\n  return { type, name, address, city, lat, lon };\r\n};\r\n\r\nconst Analytics = React.memo(() => {\r\n  const [distances, setDistances] = useState({});\r\n  const [isCalculating, setIsCalculating] = useState(false);\r\n  const { allLocations, selectedLocation } = useLocation();\r\n\r\n  const originLocation = useMemo(() => {\r\n    return allLocations.find(loc => \r\n      loc.clinic_name === \"Your Location\" || loc.clinic_name === \"Zentrum (Umkreis)\"\r\n    );\r\n  }, [allLocations]);\r\n\r\n  const fetchDistances = useCallback(async () => {\r\n    if (!originLocation?.latitude || !originLocation?.longitude) return;\r\n\r\n    setIsCalculating(true);\r\n    const newDistances = {};\r\n    \r\n    // Process locations in batches to avoid overwhelming the API/browser\r\n    const batchSize = 5;\r\n    const batches = [];\r\n    \r\n    for (let i = 0; i < allLocations.length; i += batchSize) {\r\n      batches.push(allLocations.slice(i, i + batchSize));\r\n    }\r\n\r\n    for (const batch of batches) {\r\n      const batchPromises = batch.map(provider => {\r\n        if (provider.clinic_name === \"Your Location\" || provider.clinic_name === \"Zentrum (Umkreis)\") {\r\n          return Promise.resolve();\r\n        }\r\n\r\n        const { type, name, address, lat, lon } = getProviderDetails(provider);\r\n        if (!type || !name || !lat || !lon) return Promise.resolve();\r\n\r\n        const key = getProviderKey(type, name, address);\r\n        return getRoadDistance(originLocation.latitude, originLocation.longitude, lat, lon)\r\n          .then(distance => { \r\n            if (distance !== null) {\r\n              newDistances[key] = distance;\r\n            }\r\n          });\r\n      });\r\n\r\n      await Promise.all(batchPromises);\r\n      \r\n      // Update state after each batch to show partial progress\r\n      setDistances(prev => ({ ...prev, ...newDistances }));\r\n      \r\n      // Small delay between batches\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n    }\r\n\r\n    setIsCalculating(false);\r\n  }, [originLocation, allLocations]);\r\n\r\n  useEffect(() => {\r\n    fetchDistances();\r\n  }, [fetchDistances]);\r\n\r\n  const selectedDetails = useMemo(() => {\r\n    if (!selectedLocation) return null;\r\n    return getProviderDetails(selectedLocation);\r\n  }, [selectedLocation]);\r\n\r\n  const selectedDistanceKey = useMemo(() => {\r\n    if (!selectedDetails) return null;\r\n    return getProviderKey(selectedDetails.type, selectedDetails.name, selectedDetails.address);\r\n  }, [selectedDetails]);\r\n\r\n  const filteredLocations = useMemo(() => {\r\n    return allLocations.filter(provider => \r\n      provider.clinic_name !== \"Your Location\" && \r\n      provider.clinic_name !== \"Zentrum (Umkreis)\"\r\n    );\r\n  }, [allLocations]);\r\n\r\n  const renderDistance = (key) => {\r\n    if (!key) return <span style={styles.calculatingText}>Nicht verf√ºgbar</span>;\r\n    if (key in distances) return <span>{distances[key]} km</span>;\r\n    return <span style={styles.calculatingText}>Berechne...</span>;\r\n  };\r\n\r\n  const renderSelectedLocationInfo = useMemo(() => {\r\n    if (!selectedDetails) {\r\n      return <p style={{ fontStyle: \"italic\", color: \"#666\" }}>Keine Einrichtung ausgew√§hlt.</p>;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {selectedDetails.name && <p><strong>Name:</strong> {selectedDetails.name}</p>}\r\n        {selectedDetails.address && <p><strong>Adresse:</strong> {selectedDetails.address}</p>}\r\n        {selectedDetails.city && <p><strong>Stadt:</strong> {selectedDetails.city}</p>}\r\n        <p>\r\n          <strong>Beste Route:</strong>{\" \"}\r\n          <span style={styles.bold}>\r\n            {renderDistance(selectedDistanceKey)}\r\n          </span>\r\n        </p>\r\n      </>\r\n    );\r\n  }, [selectedDetails, selectedDistanceKey, distances]);\r\n\r\n  const renderProviderList = useMemo(() => {\r\n    if (filteredLocations.length === 0) {\r\n      return <p style={styles.noData}>Keine Daten verf√ºgbar.</p>;\r\n    }\r\n\r\n    return (\r\n      <ul style={styles.list}>\r\n        {filteredLocations.map((provider, index) => {\r\n          const { type, name, address, city } = getProviderDetails(provider);\r\n          if (!type || !name) return null;\r\n\r\n          const key = getProviderKey(type, name, address);\r\n\r\n          return (\r\n            <li key={`provider-${index}`} style={styles.listItem}>\r\n              <span style={{ ...styles.colorDot, backgroundColor: LINE_COLORS[index % LINE_COLORS.length] }} />\r\n              <strong>{name}</strong><br />\r\n              {address && <><strong>Adresse:</strong> {address}<br /></>}\r\n              {city && <><strong>Stadt:</strong> {city}<br /></>}\r\n              <strong>Beste Route:</strong>{\" \"}\r\n              <span style={styles.bold}>\r\n                {renderDistance(key)}\r\n              </span>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }, [filteredLocations, distances]);\r\n\r\n  return (\r\n    <>\r\n      <div style={styles.informationsContainer}>\r\n        <h3 style={styles.title}>Informationen zur ausgew√§hlten Einrichtung</h3>\r\n        {renderSelectedLocationInfo}\r\n      </div>\r\n\r\n      <div style={styles.analysticContainer}>\r\n        <h3 style={styles.title}>Leistungserbringer Informationen</h3>\r\n        {isCalculating && filteredLocations.length > 0 && (\r\n          <p style={styles.calculatingText}>Berechne Entfernungen...</p>\r\n        )}\r\n        {renderProviderList}\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Analytics;"],"mappings":";;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,EAAEC,WAAW,QAAQ,OAAO;AACxE,SAASC,WAAW,QAAQ,mBAAmB;;AAE/C;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,WAAW,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC;;AAElF;AACA,MAAMC,MAAM,GAAG;EACbC,qBAAqB,EAAE;IACrBC,KAAK,EAAE,KAAK;IACZC,UAAU,EAAE,KAAK;IACjBC,QAAQ,EAAE,UAAU;IACpBC,MAAM,EAAE,mBAAmB;IAC3BC,KAAK,EAAE,MAAM;IACbC,GAAG,EAAE,OAAO;IACZC,SAAS,EAAE,MAAM;IACjBC,SAAS,EAAE,OAAO;IAClBC,OAAO,EAAE,MAAM;IACfC,eAAe,EAAE,SAAS;IAC1BC,YAAY,EAAE,KAAK;IACnBC,QAAQ,EAAE;EACZ,CAAC;EACDC,kBAAkB,EAAE;IAClBZ,KAAK,EAAE,KAAK;IACZC,UAAU,EAAE,KAAK;IACjBC,QAAQ,EAAE,UAAU;IACpBC,MAAM,EAAE,mBAAmB;IAC3BC,KAAK,EAAE,MAAM;IACbC,GAAG,EAAE,OAAO;IACZC,SAAS,EAAE,MAAM;IACjBC,SAAS,EAAE,OAAO;IAClBC,OAAO,EAAE,MAAM;IACfC,eAAe,EAAE,SAAS;IAC1BC,YAAY,EAAE,KAAK;IACnBC,QAAQ,EAAE;EACZ,CAAC;EACDE,KAAK,EAAE;IACLF,QAAQ,EAAE,MAAM;IAChBG,YAAY,EAAE,KAAK;IACnBb,UAAU,EAAE;EACd,CAAC;EACDc,IAAI,EAAE;IACJC,aAAa,EAAE,MAAM;IACrBR,OAAO,EAAE,CAAC;IACVS,MAAM,EAAE;EACV,CAAC;EACDC,QAAQ,EAAE;IACRJ,YAAY,EAAE,KAAK;IACnBN,OAAO,EAAE,KAAK;IACdW,YAAY,EAAE;EAChB,CAAC;EACDC,IAAI,EAAE;IACJnB,UAAU,EAAE;EACd,CAAC;EACDoB,MAAM,EAAE;IACNC,SAAS,EAAE,QAAQ;IACnBC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRC,OAAO,EAAE,cAAc;IACvBzB,KAAK,EAAE,MAAM;IACb0B,MAAM,EAAE,MAAM;IACdhB,YAAY,EAAE,KAAK;IACnBiB,WAAW,EAAE;EACf,CAAC;EACDC,eAAe,EAAE;IACfL,KAAK,EAAE,MAAM;IACbD,SAAS,EAAE;EACb;AACF,CAAC;;AAED;AACA,MAAMO,cAAc,GAAGA,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAC9C,OAAO,GAAGF,IAAI,IAAI,CAACC,IAAI,IAAI,EAAE,EAAEE,IAAI,CAAC,CAAC,IAAI,CAACD,OAAO,IAAI,EAAE,EAAEC,IAAI,CAAC,CAAC,EAAE;AACnE,CAAC;AAED,MAAMC,eAAe,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,MAAM,EAAEC,OAAO,GAAG,CAAC,KAAK;EACjF,IAAI,CAACJ,QAAQ,IAAI,CAACC,QAAQ,IAAI,CAACC,MAAM,IAAI,CAACC,MAAM,EAAE,OAAO,IAAI;;EAE7D;EACA,MAAM,IAAIE,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,OAAO,GAAG,GAAG,CAAC,CAAC;EAEhE,IAAI;IAAA,IAAAI,YAAA,EAAAC,aAAA;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,oDAAoDV,QAAQ,IAAID,QAAQ,IAAIG,MAAM,IAAID,MAAM,iBAC9F,CAAC;IAED,IAAI,CAACQ,QAAQ,CAACE,EAAE,EAAE;MAChB,IAAIF,QAAQ,CAACG,MAAM,KAAK,GAAG,IAAIT,OAAO,GAAG,CAAC,EAAE;QAC1C;QACA,OAAOL,eAAe,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC;MACzE;MACA,OAAO,IAAI;IACb;IAEA,MAAMU,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAO,CAAAP,YAAA,GAAAM,IAAI,CAACE,MAAM,cAAAR,YAAA,gBAAAC,aAAA,GAAXD,YAAA,CAAc,CAAC,CAAC,cAAAC,aAAA,eAAhBA,aAAA,CAAkBQ,QAAQ,GAAG,CAACH,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,QAAQ,GAAG,IAAI,EAAEC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI;EACxF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC;IAC3C,OAAO,IAAI;EACb;AACF,CAAC;AAED,MAAMG,kBAAkB,GAAIC,QAAQ,IAAK;EACvC,MAAM5B,IAAI,GAAG4B,QAAQ,CAACC,WAAW,GAAG,QAAQ,GAC1CD,QAAQ,CAACE,QAAQ,GAAG,KAAK,GACzBF,QAAQ,CAACG,QAAQ,GAAG,KAAK,GACzBH,QAAQ,CAACI,oBAAoB,GAAG,iBAAiB,GACjDJ,QAAQ,CAACK,cAAc,GAAG,WAAW,GACrCL,QAAQ,CAACM,aAAa,GAAG,UAAU,GAAG,IAAI;EAE5C,MAAMjC,IAAI,GAAG2B,QAAQ,CAACC,WAAW,IAAID,QAAQ,CAACE,QAAQ,IAAIF,QAAQ,CAACG,QAAQ,IACzEH,QAAQ,CAACI,oBAAoB,IAAIJ,QAAQ,CAACK,cAAc,IAAIL,QAAQ,CAACM,aAAa;EAEpF,MAAMhC,OAAO,GAAG0B,QAAQ,CAACO,cAAc,IAAIP,QAAQ,CAACQ,WAAW,IAAIR,QAAQ,CAACS,WAAW,IACrFT,QAAQ,CAACU,uBAAuB,IAAIV,QAAQ,CAACW,iBAAiB,IAAIX,QAAQ,CAACY,gBAAgB;EAE7F,MAAMC,IAAI,GAAGb,QAAQ,CAACc,WAAW,IAAId,QAAQ,CAACe,QAAQ,IAAIf,QAAQ,CAACgB,QAAQ,IACzEhB,QAAQ,CAACiB,oBAAoB,IAAIjB,QAAQ,CAACkB,cAAc,IAAIlB,QAAQ,CAACmB,aAAa;EAEpF,MAAMC,GAAG,GAAGpB,QAAQ,CAACqB,eAAe,IAAIrB,QAAQ,CAACsB,YAAY,IAAItB,QAAQ,CAACuB,YAAY,IACpFvB,QAAQ,CAACwB,wBAAwB,IAAIxB,QAAQ,CAACyB,kBAAkB,IAAIzB,QAAQ,CAAC0B,iBAAiB;EAEhG,MAAMC,GAAG,GAAG3B,QAAQ,CAAC4B,gBAAgB,IAAI5B,QAAQ,CAAC6B,aAAa,IAAI7B,QAAQ,CAAC8B,aAAa,IACvF9B,QAAQ,CAAC+B,yBAAyB,IAAI/B,QAAQ,CAACgC,mBAAmB,IAAIhC,QAAQ,CAACiC,kBAAkB;EAEnG,OAAO;IAAE7D,IAAI;IAAEC,IAAI;IAAEC,OAAO;IAAEuC,IAAI;IAAEO,GAAG;IAAEO;EAAI,CAAC;AAChD,CAAC;AAED,MAAMO,SAAS,gBAAAC,EAAA,cAAG1G,KAAK,CAAC2G,IAAI,CAAAC,EAAA,GAAAF,EAAA,CAAC,MAAM;EAAAA,EAAA;EACjC,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAG7G,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAM,CAAC8G,aAAa,EAAEC,gBAAgB,CAAC,GAAG/G,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM;IAAEgH,YAAY;IAAEC;EAAiB,CAAC,GAAG7G,WAAW,CAAC,CAAC;EAExD,MAAM8G,cAAc,GAAGhH,OAAO,CAAC,MAAM;IACnC,OAAO8G,YAAY,CAACG,IAAI,CAACC,GAAG,IAC1BA,GAAG,CAAC7C,WAAW,KAAK,eAAe,IAAI6C,GAAG,CAAC7C,WAAW,KAAK,mBAC7D,CAAC;EACH,CAAC,EAAE,CAACyC,YAAY,CAAC,CAAC;EAElB,MAAMK,cAAc,GAAGlH,WAAW,CAAC,YAAY;IAC7C,IAAI,EAAC+G,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEI,QAAQ,KAAI,EAACJ,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEK,SAAS,GAAE;IAE7DR,gBAAgB,CAAC,IAAI,CAAC;IACtB,MAAMS,YAAY,GAAG,CAAC,CAAC;;IAEvB;IACA,MAAMC,SAAS,GAAG,CAAC;IACnB,MAAMC,OAAO,GAAG,EAAE;IAElB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,YAAY,CAACY,MAAM,EAAED,CAAC,IAAIF,SAAS,EAAE;MACvDC,OAAO,CAACG,IAAI,CAACb,YAAY,CAACc,KAAK,CAACH,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAAC,CAAC;IACpD;IAEA,KAAK,MAAMM,KAAK,IAAIL,OAAO,EAAE;MAC3B,MAAMM,aAAa,GAAGD,KAAK,CAACE,GAAG,CAAC3D,QAAQ,IAAI;QAC1C,IAAIA,QAAQ,CAACC,WAAW,KAAK,eAAe,IAAID,QAAQ,CAACC,WAAW,KAAK,mBAAmB,EAAE;UAC5F,OAAOnB,OAAO,CAACC,OAAO,CAAC,CAAC;QAC1B;QAEA,MAAM;UAAEX,IAAI;UAAEC,IAAI;UAAEC,OAAO;UAAE8C,GAAG;UAAEO;QAAI,CAAC,GAAG5B,kBAAkB,CAACC,QAAQ,CAAC;QACtE,IAAI,CAAC5B,IAAI,IAAI,CAACC,IAAI,IAAI,CAAC+C,GAAG,IAAI,CAACO,GAAG,EAAE,OAAO7C,OAAO,CAACC,OAAO,CAAC,CAAC;QAE5D,MAAM6E,GAAG,GAAGzF,cAAc,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO,CAAC;QAC/C,OAAOE,eAAe,CAACoE,cAAc,CAACI,QAAQ,EAAEJ,cAAc,CAACK,SAAS,EAAE7B,GAAG,EAAEO,GAAG,CAAC,CAChFkC,IAAI,CAACnE,QAAQ,IAAI;UAChB,IAAIA,QAAQ,KAAK,IAAI,EAAE;YACrBwD,YAAY,CAACU,GAAG,CAAC,GAAGlE,QAAQ;UAC9B;QACF,CAAC,CAAC;MACN,CAAC,CAAC;MAEF,MAAMZ,OAAO,CAACgF,GAAG,CAACJ,aAAa,CAAC;;MAEhC;MACAnB,YAAY,CAACwB,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAE,GAAGb;MAAa,CAAC,CAAC,CAAC;;MAEpD;MACA,MAAM,IAAIpE,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACxD;IAEA0D,gBAAgB,CAAC,KAAK,CAAC;EACzB,CAAC,EAAE,CAACG,cAAc,EAAEF,YAAY,CAAC,CAAC;EAElC/G,SAAS,CAAC,MAAM;IACdoH,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;EAEpB,MAAMiB,eAAe,GAAGpI,OAAO,CAAC,MAAM;IACpC,IAAI,CAAC+G,gBAAgB,EAAE,OAAO,IAAI;IAClC,OAAO5C,kBAAkB,CAAC4C,gBAAgB,CAAC;EAC7C,CAAC,EAAE,CAACA,gBAAgB,CAAC,CAAC;EAEtB,MAAMsB,mBAAmB,GAAGrI,OAAO,CAAC,MAAM;IACxC,IAAI,CAACoI,eAAe,EAAE,OAAO,IAAI;IACjC,OAAO7F,cAAc,CAAC6F,eAAe,CAAC5F,IAAI,EAAE4F,eAAe,CAAC3F,IAAI,EAAE2F,eAAe,CAAC1F,OAAO,CAAC;EAC5F,CAAC,EAAE,CAAC0F,eAAe,CAAC,CAAC;EAErB,MAAME,iBAAiB,GAAGtI,OAAO,CAAC,MAAM;IACtC,OAAO8G,YAAY,CAACyB,MAAM,CAACnE,QAAQ,IACjCA,QAAQ,CAACC,WAAW,KAAK,eAAe,IACxCD,QAAQ,CAACC,WAAW,KAAK,mBAC3B,CAAC;EACH,CAAC,EAAE,CAACyC,YAAY,CAAC,CAAC;EAElB,MAAM0B,cAAc,GAAIR,GAAG,IAAK;IAC9B,IAAI,CAACA,GAAG,EAAE,oBAAO5H,OAAA;MAAMqI,KAAK,EAAEjI,MAAM,CAAC8B,eAAgB;MAAAoG,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;IAC5E,IAAId,GAAG,IAAItB,SAAS,EAAE,oBAAOtG,OAAA;MAAAsI,QAAA,GAAOhC,SAAS,CAACsB,GAAG,CAAC,EAAC,KAAG;IAAA;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;IAC7D,oBAAO1I,OAAA;MAAMqI,KAAK,EAAEjI,MAAM,CAAC8B,eAAgB;MAAAoG,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAChE,CAAC;EAED,MAAMC,0BAA0B,GAAG/I,OAAO,CAAC,MAAM;IAC/C,IAAI,CAACoI,eAAe,EAAE;MACpB,oBAAOhI,OAAA;QAAGqI,KAAK,EAAE;UAAEzG,SAAS,EAAE,QAAQ;UAAEC,KAAK,EAAE;QAAO,CAAE;QAAAyG,QAAA,EAAC;MAA6B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAC5F;IAEA,oBACE1I,OAAA,CAAAE,SAAA;MAAAoI,QAAA,GACGN,eAAe,CAAC3F,IAAI,iBAAIrC,OAAA;QAAAsI,QAAA,gBAAGtI,OAAA;UAAAsI,QAAA,EAAQ;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACV,eAAe,CAAC3F,IAAI;MAAA;QAAAkG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC5EV,eAAe,CAAC1F,OAAO,iBAAItC,OAAA;QAAAsI,QAAA,gBAAGtI,OAAA;UAAAsI,QAAA,EAAQ;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACV,eAAe,CAAC1F,OAAO;MAAA;QAAAiG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACrFV,eAAe,CAACnD,IAAI,iBAAI7E,OAAA;QAAAsI,QAAA,gBAAGtI,OAAA;UAAAsI,QAAA,EAAQ;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACV,eAAe,CAACnD,IAAI;MAAA;QAAA0D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9E1I,OAAA;QAAAsI,QAAA,gBACEtI,OAAA;UAAAsI,QAAA,EAAQ;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAAC,GAAG,eACjC1I,OAAA;UAAMqI,KAAK,EAAEjI,MAAM,CAACsB,IAAK;UAAA4G,QAAA,EACtBF,cAAc,CAACH,mBAAmB;QAAC;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA,eACJ,CAAC;EAEP,CAAC,EAAE,CAACV,eAAe,EAAEC,mBAAmB,EAAE3B,SAAS,CAAC,CAAC;EAErD,MAAMsC,kBAAkB,GAAGhJ,OAAO,CAAC,MAAM;IACvC,IAAIsI,iBAAiB,CAACZ,MAAM,KAAK,CAAC,EAAE;MAClC,oBAAOtH,OAAA;QAAGqI,KAAK,EAAEjI,MAAM,CAACuB,MAAO;QAAA2G,QAAA,EAAC;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAC5D;IAEA,oBACE1I,OAAA;MAAIqI,KAAK,EAAEjI,MAAM,CAACiB,IAAK;MAAAiH,QAAA,EACpBJ,iBAAiB,CAACP,GAAG,CAAC,CAAC3D,QAAQ,EAAE6E,KAAK,KAAK;QAC1C,MAAM;UAAEzG,IAAI;UAAEC,IAAI;UAAEC,OAAO;UAAEuC;QAAK,CAAC,GAAGd,kBAAkB,CAACC,QAAQ,CAAC;QAClE,IAAI,CAAC5B,IAAI,IAAI,CAACC,IAAI,EAAE,OAAO,IAAI;QAE/B,MAAMuF,GAAG,GAAGzF,cAAc,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO,CAAC;QAE/C,oBACEtC,OAAA;UAA8BqI,KAAK,EAAEjI,MAAM,CAACoB,QAAS;UAAA8G,QAAA,gBACnDtI,OAAA;YAAMqI,KAAK,EAAE;cAAE,GAAGjI,MAAM,CAAC0B,QAAQ;cAAEf,eAAe,EAAEZ,WAAW,CAAC0I,KAAK,GAAG1I,WAAW,CAACmH,MAAM;YAAE;UAAE;YAAAiB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACjG1I,OAAA;YAAAsI,QAAA,EAASjG;UAAI;YAAAkG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,eAAA1I,OAAA;YAAAuI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,EAC5BpG,OAAO,iBAAItC,OAAA,CAAAE,SAAA;YAAAoI,QAAA,gBAAEtI,OAAA;cAAAsI,QAAA,EAAQ;YAAQ;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACpG,OAAO,eAACtC,OAAA;cAAAuI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA,eAAE,CAAC,EACzD7D,IAAI,iBAAI7E,OAAA,CAAAE,SAAA;YAAAoI,QAAA,gBAAEtI,OAAA;cAAAsI,QAAA,EAAQ;YAAM;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAAC7D,IAAI,eAAC7E,OAAA;cAAAuI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA,eAAE,CAAC,eAClD1I,OAAA;YAAAsI,QAAA,EAAQ;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAAC,GAAG,eACjC1I,OAAA;YAAMqI,KAAK,EAAEjI,MAAM,CAACsB,IAAK;YAAA4G,QAAA,EACtBF,cAAc,CAACR,GAAG;UAAC;YAAAW,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChB,CAAC;QAAA,GARA,YAAYG,KAAK,EAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASxB,CAAC;MAET,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAET,CAAC,EAAE,CAACR,iBAAiB,EAAE5B,SAAS,CAAC,CAAC;EAElC,oBACEtG,OAAA,CAAAE,SAAA;IAAAoI,QAAA,gBACEtI,OAAA;MAAKqI,KAAK,EAAEjI,MAAM,CAACC,qBAAsB;MAAAiI,QAAA,gBACvCtI,OAAA;QAAIqI,KAAK,EAAEjI,MAAM,CAACe,KAAM;QAAAmH,QAAA,EAAC;MAA0C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACvEC,0BAA0B;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eAEN1I,OAAA;MAAKqI,KAAK,EAAEjI,MAAM,CAACc,kBAAmB;MAAAoH,QAAA,gBACpCtI,OAAA;QAAIqI,KAAK,EAAEjI,MAAM,CAACe,KAAM;QAAAmH,QAAA,EAAC;MAAgC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC7DlC,aAAa,IAAI0B,iBAAiB,CAACZ,MAAM,GAAG,CAAC,iBAC5CtH,OAAA;QAAGqI,KAAK,EAAEjI,MAAM,CAAC8B,eAAgB;QAAAoG,QAAA,EAAC;MAAwB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAC9D,EACAE,kBAAkB;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CAAC;EAAA,eACN,CAAC;AAEP,CAAC;EAAA,QAjJ4C5I,WAAW;AAAA,EAiJvD,CAAC;EAAA,QAjJ2CA,WAAW;AAAA,EAiJtD;AAACgJ,GAAA,GApJG5C,SAAS;AAsJf,eAAeA,SAAS;AAAC,IAAAG,EAAA,EAAAyC,GAAA;AAAAC,YAAA,CAAA1C,EAAA;AAAA0C,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}