{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\map.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport SearchForm from \"./SearchForm\";\nimport L from \"leaflet\";\nimport { useLocation } from \"./LocationContext\";\nimport Button from '@mui/material/Button';\n\n// 🎯 Predefined colors for clinics, MVZ, ASV\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// 🟢 Custom icons for different provider types\nconst userIcon = L.icon({\n  iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\n  // Unique user icon\n  iconSize: [35, 35],\n  iconAnchor: [17, 35]\n});\n\n// 🎯 Function to create color-matched clinic icons\nconst getColoredClinicIcon = color => {\n  return L.divIcon({\n    className: \"custom-clinic-marker\",\n    html: `<div style=\"\n            width: 30px; height: 30px; \n            background-color: ${color}; \n            border-radius: 50%; \n            border: 1px solid black;\n            display: flex; justify-content: center; align-items: center;\">\n        </div>`,\n    iconSize: [20, 20],\n    iconAnchor: [15, 20]\n  });\n};\n\n// ✅ AutoZoom component to adjust map bounds dynamically\nconst AutoZoom = ({\n  locations\n}) => {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (locations.length > 0) {\n      const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\n      map.fitBounds(bounds, {\n        padding: [50, 50]\n      }); // Ensure all points are visible\n    }\n  }, [locations, map]);\n  return null; // No UI component, only logic\n};\n_s(AutoZoom, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = AutoZoom;\nconst Map = () => {\n  _s2();\n  const [graphData, setGraphData] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const [locationChoice, setLocationChoice] = useState(\"\");\n  const [manualAddress, setManualAddress] = useState(\"\");\n  const {\n    setAllLocations\n  } = useLocation();\n\n  // 🚀 Get user's current location\n  const fetchMyLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setUserLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      }, error => {\n        console.error(\"Error getting location:\", error);\n      });\n    }\n  };\n\n  // 🎯 Handle location selection\n  const handleLocationChoice = choice => {\n    setLocationChoice(choice);\n    setUserLocation(null);\n    setManualAddress(\"\");\n    if (choice === \"my-location\") {\n      fetchMyLocation();\n    }\n  };\n\n  // 🎯 Convert address to latitude & longitude using OpenStreetMap's Nominatim API\n  const handleManualAddressSearch = async () => {\n    if (!manualAddress.trim()) {\n      alert(\"Please enter a valid address.\");\n      return;\n    }\n    try {\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n      const data = await response.json();\n      if (data.length > 0) {\n        setUserLocation({\n          latitude: parseFloat(data[0].lat),\n          longitude: parseFloat(data[0].lon)\n        });\n      } else {\n        alert(\"Address not found. Please enter a more precise location.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching geolocation:\", error);\n      alert(\"Failed to fetch location. Try again later.\");\n    }\n  };\n\n  // ✅ UseMemo to prevent unnecessary re-renders\n  const allLocations = useMemo(() => {\n    const locations = [...graphData];\n    if (userLocation) {\n      locations.push({\n        clinic_name: \"Your Location\",\n        provider_type: \"User\",\n        ...userLocation\n      });\n    }\n    return locations;\n  }, [graphData, userLocation]);\n\n  // ✅ Update locations when changed\n  useEffect(() => {\n    setAllLocations(allLocations);\n  }, [allLocations, setAllLocations]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      paddingLeft: \"5px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"W\\xE4hlen Sie Ihren Standort:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: \"10px\",\n        marginBottom: \"10px\",\n        paddingLeft: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => handleLocationChoice(\"my-location\"),\n        children: \"Meinen Standort verwenden\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => handleLocationChoice(\"manual\"),\n        children: \"Standort manuell eingeben\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this), locationChoice === \"manual\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingLeft: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Geben Sie Ihre Adresse ein\",\n        value: manualAddress,\n        onChange: e => setManualAddress(e.target.value),\n        style: {\n          padding: \"8px\",\n          width: \"250px\",\n          border: \"1px solid #ccc\",\n          borderRadius: \"5px\",\n          marginRight: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleManualAddressSearch,\n        style: {\n          padding: \"8px 12px\",\n          borderRadius: \"5px\",\n          backgroundColor: \"#007BFF\",\n          /* Primary blue */\n          color: \"white\",\n          border: \"none\",\n          cursor: \"pointer\",\n          fontSize: \"14px\",\n          fontWeight: \"bold\",\n          transition: \"background-color 0.3s\",\n          boxShadow: \"0px 2px 5px rgba(0, 0, 0, 0.2)\"\n        },\n        onMouseOver: e => e.target.style.backgroundColor = \"#0056b3\" /* Hover effect */,\n        onMouseOut: e => e.target.style.backgroundColor = \"#007BFF\",\n        children: \"Search Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      setGraphData: setGraphData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [50.851, 8.015],\n      zoom: 8,\n      scrollWheelZoom: false,\n      style: {\n        height: 500,\n        width: \"60%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AutoZoom, {\n        locations: allLocations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), allLocations.length > 0 ? /*#__PURE__*/_jsxDEV(AutoZoom, {\n        locations: allLocations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\",\n          fontSize: \"18px\",\n          color: \"red\",\n          marginTop: \"20px\"\n        },\n        children: \"\\u274C No locations found. Try a different search.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }, this), userLocation && /*#__PURE__*/_jsxDEV(Marker, {\n        position: [userLocation.latitude, userLocation.longitude],\n        icon: userIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Your Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 32\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }, this), graphData.map((data, index) => {\n        const color = lineColors[index % lineColors.length]; // Match line & marker color\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: [data.latitude, data.longitude],\n          icon: getColoredClinicIcon(color),\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: data.clinic_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 68\n            }, this), \"City: \", data.city, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 51\n            }, this), \"Beds: \", data.number_of_beds, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 61\n            }, this), \"Address: \", data.address || \"N/A\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }, this);\n      }), userLocation && graphData.map((data, index) => {\n        const color = lineColors[index % lineColors.length]; // Match line color\n        return /*#__PURE__*/_jsxDEV(Polyline, {\n          positions: [[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]],\n          color: color,\n          weight: 2\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n};\n_s2(Map, \"E7gzXfXTChBO3X0gT1LDrvT0IDA=\", false, function () {\n  return [useLocation];\n});\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"AutoZoom\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","MapContainer","TileLayer","useMap","Marker","Popup","Polyline","SearchForm","L","useLocation","Button","jsxDEV","_jsxDEV","lineColors","userIcon","icon","iconUrl","iconSize","iconAnchor","getColoredClinicIcon","color","divIcon","className","html","AutoZoom","locations","_s","map","length","bounds","latLngBounds","loc","latitude","longitude","fitBounds","padding","_c","Map","_s2","graphData","setGraphData","userLocation","setUserLocation","locationChoice","setLocationChoice","manualAddress","setManualAddress","setAllLocations","fetchMyLocation","navigator","geolocation","getCurrentPosition","position","coords","error","console","handleLocationChoice","choice","handleManualAddressSearch","trim","alert","response","fetch","encodeURIComponent","data","json","parseFloat","lat","lon","allLocations","push","clinic_name","provider_type","style","paddingLeft","children","fileName","_jsxFileName","lineNumber","columnNumber","display","gap","marginBottom","variant","onClick","type","placeholder","value","onChange","e","target","width","border","borderRadius","marginRight","backgroundColor","cursor","fontSize","fontWeight","transition","boxShadow","onMouseOver","onMouseOut","center","zoom","scrollWheelZoom","height","attribution","url","textAlign","marginTop","index","city","number_of_beds","address","positions","weight","_c2","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/map.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport SearchForm from \"./SearchForm\";\r\nimport L from \"leaflet\";\r\nimport { useLocation } from \"./LocationContext\";\r\nimport Button from '@mui/material/Button';\r\n\r\n\r\n\r\n\r\n// 🎯 Predefined colors for clinics, MVZ, ASV\r\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// 🟢 Custom icons for different provider types\r\nconst userIcon = L.icon({\r\n    iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\", // Unique user icon\r\n    iconSize: [35, 35],\r\n    iconAnchor: [17, 35]\r\n});\r\n\r\n// 🎯 Function to create color-matched clinic icons\r\nconst getColoredClinicIcon = (color) => {\r\n    return L.divIcon({\r\n        className: \"custom-clinic-marker\",\r\n        html: `<div style=\"\r\n            width: 30px; height: 30px; \r\n            background-color: ${color}; \r\n            border-radius: 50%; \r\n            border: 1px solid black;\r\n            display: flex; justify-content: center; align-items: center;\">\r\n        </div>`,\r\n        iconSize: [20, 20],\r\n        iconAnchor: [15, 20]\r\n    });\r\n};\r\n\r\n// ✅ AutoZoom component to adjust map bounds dynamically\r\nconst AutoZoom = ({ locations }) => {\r\n    const map = useMap();\r\n\r\n    useEffect(() => {\r\n        if (locations.length > 0) {\r\n            const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\r\n            map.fitBounds(bounds, { padding: [50, 50] }); // Ensure all points are visible\r\n        }\r\n    }, [locations, map]);\r\n\r\n    return null; // No UI component, only logic\r\n};\r\n\r\nconst Map = () => {\r\n    const [graphData, setGraphData] = useState([]);\r\n    const [userLocation, setUserLocation] = useState(null);\r\n    const [locationChoice, setLocationChoice] = useState(\"\"); \r\n    const [manualAddress, setManualAddress] = useState(\"\"); \r\n    const { setAllLocations } = useLocation();\r\n\r\n    // 🚀 Get user's current location\r\n    const fetchMyLocation = () => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    setUserLocation({\r\n                        latitude: position.coords.latitude,\r\n                        longitude: position.coords.longitude\r\n                    });\r\n                },\r\n                (error) => {\r\n                    console.error(\"Error getting location:\", error);\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    // 🎯 Handle location selection\r\n    const handleLocationChoice = (choice) => {\r\n        setLocationChoice(choice);\r\n        setUserLocation(null);\r\n        setManualAddress(\"\"); \r\n        if (choice === \"my-location\") {\r\n            fetchMyLocation();\r\n        }\r\n    };\r\n\r\n    // 🎯 Convert address to latitude & longitude using OpenStreetMap's Nominatim API\r\n    const handleManualAddressSearch = async () => {\r\n        if (!manualAddress.trim()) {\r\n            alert(\"Please enter a valid address.\");\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\r\n            const data = await response.json();\r\n            if (data.length > 0) {\r\n                setUserLocation({\r\n                    latitude: parseFloat(data[0].lat),\r\n                    longitude: parseFloat(data[0].lon)\r\n                });\r\n            } else {\r\n                alert(\"Address not found. Please enter a more precise location.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching geolocation:\", error);\r\n            alert(\"Failed to fetch location. Try again later.\");\r\n        }\r\n    };\r\n\r\n    // ✅ UseMemo to prevent unnecessary re-renders\r\n    const allLocations = useMemo(() => {\r\n        const locations = [...graphData];\r\n        if (userLocation) {\r\n            locations.push({ clinic_name: \"Your Location\", provider_type: \"User\", ...userLocation });\r\n        }\r\n        return locations;\r\n    }, [graphData, userLocation]);\r\n\r\n    // ✅ Update locations when changed\r\n    useEffect(() => {\r\n        setAllLocations(allLocations);\r\n    }, [allLocations, setAllLocations]);\r\n\r\n    return (\r\n         \r\n        <div style={{ paddingLeft: \"5px\" }}>\r\n        <h3>Wählen Sie Ihren Standort:</h3>\r\n        <div style={{ display: \"flex\", gap: \"10px\", marginBottom: \"10px\", paddingLeft: \"10px\" }}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"my-location\")}>Meinen Standort verwenden</Button>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"manual\")}>Standort manuell eingeben</Button>\r\n        </div>\r\n\r\n            {locationChoice === \"manual\" && (\r\n                <div style={{ paddingLeft: \"10px\" }}>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Geben Sie Ihre Adresse ein\" \r\n                        value={manualAddress} \r\n                        onChange={(e) => setManualAddress(e.target.value)}\r\n                        style={{ padding: \"8px\", width: \"250px\", border: \"1px solid #ccc\", borderRadius: \"5px\", marginRight: \"10px\" }} \r\n                    />\r\n                    {/* <button onClick={handleManualAddressSearch}>Search Address</button> */}\r\n                            \r\n                    {/* ✅ Styled \"Search Address\" Button */}\r\n                    <button \r\n                        onClick={handleManualAddressSearch} \r\n                        style={{\r\n                            padding: \"8px 12px\",\r\n                            borderRadius: \"5px\",\r\n                            backgroundColor: \"#007BFF\", /* Primary blue */\r\n                            color: \"white\",\r\n                            border: \"none\",\r\n                            cursor: \"pointer\",\r\n                            fontSize: \"14px\",\r\n                            fontWeight: \"bold\",\r\n                            transition: \"background-color 0.3s\",\r\n                            boxShadow: \"0px 2px 5px rgba(0, 0, 0, 0.2)\"\r\n                        }}\r\n                        onMouseOver={(e) => e.target.style.backgroundColor = \"#0056b3\"} /* Hover effect */\r\n                        onMouseOut={(e) => e.target.style.backgroundColor = \"#007BFF\"} \r\n                    >\r\n                        Search Address\r\n                    </button>\r\n                </div>\r\n            )}\r\n\r\n            <SearchForm setGraphData={setGraphData} />\r\n\r\n            <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: 500, width: \"60%\" }}>\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n\r\n                {/* AutoZoom Component to adjust map bounds dynamically */}\r\n                \r\n                <AutoZoom locations={allLocations} />\r\n                {allLocations.length > 0 ? (\r\n                    <AutoZoom locations={allLocations} />\r\n                ) : (\r\n                    <div style={{ textAlign: \"center\", fontSize: \"18px\", color: \"red\", marginTop: \"20px\" }}>\r\n                        ❌ No locations found. Try a different search.\r\n                    </div>\r\n                )}\r\n                {/* 🎯 Draw user location marker */}\r\n                {userLocation &&  (\r\n                    <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\r\n                        <Popup><strong>Your Location</strong></Popup>\r\n                    </Marker>\r\n                )}\r\n\r\n                {/* 🎯 Draw clinic markers with color-matched icons */}\r\n                {graphData.map((data, index) => {\r\n                    const color = lineColors[index % lineColors.length]; // Match line & marker color\r\n                    return (\r\n                        <Marker key={index} position={[data.latitude, data.longitude]} icon={getColoredClinicIcon(color)}>\r\n                            <Popup>\r\n                                <strong>{data.clinic_name}</strong><br />\r\n                                City: {data.city} <br />\r\n                                Beds: {data.number_of_beds} <br />\r\n                                Address: {data.address || \"N/A\"}\r\n                            </Popup>\r\n                        </Marker>\r\n                    );\r\n                })}\r\n\r\n                {/* 🎯 Draw lines from user location to each clinic */}\r\n                {userLocation && graphData.map((data, index) => {\r\n                    const color = lineColors[index % lineColors.length]; // Match line color\r\n                    return (\r\n                        <Polyline \r\n                            key={index} \r\n                            positions={[\r\n                                [userLocation.latitude, userLocation.longitude], \r\n                                [data.latitude, data.longitude]\r\n                            ]} \r\n                            color={color} \r\n                            weight={2} \r\n                        />\r\n                    );\r\n                })}\r\n            </MapContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}