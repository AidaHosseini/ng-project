{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\Analystics.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"./LocationContext\";\n// import axios from \"axios\";\n\n// // Function to get attributes from API\n// const getAttribute = async (IDs = []) => { \n//     try {\n//         console.log(`🔵 Sending request to: http://127.0.0.1:5000/search with IDs:`, IDs);\n\n//         const response = await axios.get(\"http://127.0.0.1:5000/search\", {\n//             params: { ID: IDs },\n//         });\n\n//         console.log(\"✅ API Response Received:\", response.data);\n//         return response.data; // Return data instead of setting state here\n//     } catch (error) {\n//         console.error(\"❌ API Error:\", error);\n//         return {}; // Return empty object on failure\n//     }\n// };\n\n// // Function to get road distance from OSRM API\n// const getRoadDistance = async (lat1, lon1, lat2, lon2) => {\n//     const url = `https://router.project-osrm.org/route/v1/driving/${lon1},${lat1};${lon2},${lat2}?overview=false`;\n\n//     try {\n//         const response = await fetch(url);\n//         const data = await response.json();\n//         if (data.routes && data.routes.length > 0) {\n//             return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\n//         } else {\n//             return \"N/A\";\n//         }\n//     } catch (error) {\n//         console.error(\"Error fetching road distance:\", error);\n//         return \"N/A\";\n//     }\n// };\n\n// const Analystics = () => {\n//     const { allLocations } = useLocation();\n//     const [distances, setDistances] = useState({});\n//     const [attributes, setAttributes] = useState({});\n\n//     // Find the user's location (if available)\n//     const userLocation = allLocations.find(loc => loc.clinic_name === \"Your Location\");\n\n//     // Fetch attributes for all clinics\n//     useEffect(() => {\n//         const fetchAttributes = async () => {\n//             if (allLocations.length > 0) {\n//                 const IDs = allLocations.map(loc => loc.clinic_id);\n//                 const attributeData = await getAttribute(IDs);\n//                 setAttributes(attributeData); // Update state with fetched data\n//             }\n//         };\n\n//         fetchAttributes();\n//     }, [allLocations]);\n\n//     // Fetch road distances between the user's location and all other clinics\n//     useEffect(() => {\n//         const fetchDistances = async () => {\n//             if (!userLocation) return;\n\n//             const newDistances = {};\n//             for (const location of allLocations) {\n//                 if (location.clinic_name === \"Your Location\") continue;\n\n//                 const roadDistance = await getRoadDistance(\n//                     userLocation.latitude, userLocation.longitude,\n//                     location.latitude, location.longitude\n//                 );\n\n//                 newDistances[location.clinic_name] = roadDistance;\n//             }\n\n//             setDistances(newDistances);\n//         };\n\n//         fetchDistances();\n//     }, [userLocation, allLocations]);\n\n//     return (\n//         <>\n//             {/* Informations Box */}\n//             <div style={styles.informationsContainer}>\n//                 <h3 style={styles.title}>Informations</h3>\n//                 <p>This section provides general insights based on selected locations.</p>\n//             </div>\n\n//             {/* Analystics Box */}\n//             <div style={styles.analysticContainer}>\n//                 <h3 style={styles.title}>Analystic Data</h3>\n//                 {allLocations.length > 0 ? (\n//                     <ul style={styles.list}>\n//                         {allLocations.map((location, index) => {\n//                             if (location.clinic_name === \"Your Location\") return null;\n\n//                             return (\n//                                 <li key={index} style={styles.listItem}>\n//                                     {location.clinic_name} \n//                                     <br />\n//                                     Road Distance: <span style={styles.bold}>{distances[location.clinic_name] || \"Calculating...\"} km</span>\n//                                     <br />\n//                                     Attributes: <span style={styles.bold}>{JSON.stringify(attributes[location.clinic_id] || \"Loading...\")}</span>\n//                                 </li>\n//                             );\n//                         })}\n//                     </ul>\n//                 ) : (\n//                     <p style={styles.noData}>No data available.</p>\n//                 )}\n//             </div>\n//         </>\n//     );\n// };\n\n// // CSS-in-JS styles\n// const styles = {\n//     informationsContainer: {\n//         width: \"35%\",\n//         fontWeight: \"600\",\n//         position: \"absolute\",\n//         right: 0,\n//         top: \"100px\", // Position above Analystics\n//         padding: \"20px\",\n//         backgroundColor: \"#e3f2fd\",\n//         boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.1)\",\n//         borderRadius: \"8px\",\n//         marginBottom: \"20px\",\n//     },\n//     analysticContainer: {\n//         width: \"35%\",\n//         fontWeight: \"600\",\n//         position: \"absolute\",\n//         right: 0,\n//         top: \"220px\", // Positioned right below Informations\n//         padding: \"20px\",\n//         backgroundColor: \"#f9f9f9\",\n//         boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.1)\",\n//         borderRadius: \"8px\",\n//     },\n//     title: {\n//         fontSize: \"20px\",\n//         marginBottom: \"10px\"\n//     },\n//     list: {\n//         listStyleType: \"none\",\n//         padding: 0\n//     },\n//     listItem: {\n//         marginBottom: \"10px\",\n//         padding: \"10px\",\n//         borderBottom: \"1px solid #ddd\"\n//     },\n//     bold: {\n//         fontWeight: \"600\"\n//     },\n//     noData: {\n//         fontStyle: \"italic\",\n//         color: \"#999\"\n//     }\n// };\n\n// export default Analystics;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"./LocationContext\";\nimport axios from \"axios\";\n\n// Function to get road distance from OSRM API\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getRoadDistance = async (lat1, lon1, lat2, lon2) => {\n  const url = `https://router.project-osrm.org/route/v1/driving/${lon1},${lat1};${lon2},${lat2}?overview=false`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    if (data.routes && data.routes.length > 0) {\n      return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\n    } else {\n      return \"N/A\";\n    }\n  } catch (error) {\n    console.error(\"❌ Error fetching road distance:\", error);\n    return \"N/A\";\n  }\n};\nconst Analystics = () => {\n  _s();\n  const {\n    allLocations\n  } = useLocation();\n  const [distances, setDistances] = useState({});\n  const [clinicData, setClinicData] = useState([]);\n\n  // Debugging logs\n  console.log(\"📌 allLocations received in Analystics.js:\", allLocations);\n\n  // Fetch clinic attributes from API\n  useEffect(() => {\n    const fetchAttributes = async () => {\n      if (allLocations.length > 0) {\n        try {\n          const response = await axios.get(\"http://127.0.0.1:5000/search\", {\n            params: {\n              city: \"Köln\",\n              icd_code: \"D27\"\n            } // Temporary fix\n          });\n          console.log(\"✅ API Response in Analystics.js:\", response.data);\n          if (response.data.length > 0) {\n            setClinicData(response.data);\n          } else {\n            console.warn(\"⚠️ No clinic data received.\");\n          }\n        } catch (error) {\n          console.error(\"❌ API Error fetching clinic data:\", error);\n        }\n      }\n    };\n    fetchAttributes();\n  }, [allLocations]);\n\n  // Fetch road distances between the user's location and all other clinics\n  useEffect(() => {\n    const fetchDistances = async () => {\n      if (!allLocations.length) return;\n      const newDistances = {};\n      for (const location of allLocations) {\n        if (!location.latitude || !location.longitude) continue;\n        const roadDistance = await getRoadDistance(location.latitude, location.longitude, location.latitude, location.longitude);\n        newDistances[location.clinic_name] = roadDistance;\n      }\n      setDistances(newDistances);\n    };\n    fetchDistances();\n  }, [allLocations]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.informationsContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: styles.title,\n        children: \"Informations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This section provides general insights based on selected locations.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.analysticContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: styles.title,\n        children: \"Analystic Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this), clinicData.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: styles.list,\n        children: clinicData.map((clinic, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: styles.listItem,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Clinic:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 33\n          }, this), \" \", clinic.clinic_name, \" (\", clinic.clinic_identity || \"N/A\", \")\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 114\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"City:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 33\n          }, this), \" \", clinic.city || \"N/A\", \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 79\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Number of Beds:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 33\n          }, this), \" \", clinic.number_of_beds || \"N/A\", \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 99\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"ICD Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 33\n          }, this), \" \", clinic.icd_name || \"N/A\", \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 87\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"ICD Fallzahl:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 33\n          }, this), \" \", clinic.icd_fallzahl || \"N/A\", \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 95\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Road Distance:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 33\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: styles.bold,\n            children: [distances[clinic.clinic_name] || \"Calculating...\", \" km\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 65\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        style: styles.noData,\n        children: \"No data available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n// CSS-in-JS styles\n_s(Analystics, \"by55tF3SiSaQf9Jvsam9xgSSYtY=\", false, function () {\n  return [useLocation];\n});\n_c = Analystics;\nconst styles = {\n  informationsContainer: {\n    width: \"35%\",\n    fontWeight: \"600\",\n    position: \"absolute\",\n    right: 0,\n    top: \"100px\",\n    // Position above Analystics\n    padding: \"20px\",\n    backgroundColor: \"#e3f2fd\",\n    boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.1)\",\n    borderRadius: \"8px\",\n    marginBottom: \"20px\"\n  },\n  analysticContainer: {\n    width: \"35%\",\n    fontWeight: \"600\",\n    position: \"absolute\",\n    right: 0,\n    top: \"220px\",\n    // Positioned right below Informations\n    padding: \"20px\",\n    backgroundColor: \"#f9f9f9\",\n    boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.1)\",\n    borderRadius: \"8px\"\n  },\n  title: {\n    fontSize: \"20px\",\n    marginBottom: \"10px\"\n  },\n  list: {\n    listStyleType: \"none\",\n    padding: 0\n  },\n  listItem: {\n    marginBottom: \"10px\",\n    padding: \"10px\",\n    borderBottom: \"1px solid #ddd\"\n  },\n  bold: {\n    fontWeight: \"600\"\n  },\n  noData: {\n    fontStyle: \"italic\",\n    color: \"#999\"\n  }\n};\nexport default Analystics;\nvar _c;\n$RefreshReg$(_c, \"Analystics\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","getRoadDistance","lat1","lon1","lat2","lon2","url","response","fetch","data","json","routes","length","distance","toFixed","error","console","Analystics","_s","allLocations","distances","setDistances","clinicData","setClinicData","log","fetchAttributes","get","params","city","icd_code","warn","fetchDistances","newDistances","location","latitude","longitude","roadDistance","clinic_name","children","style","styles","informationsContainer","title","fileName","_jsxFileName","lineNumber","columnNumber","analysticContainer","list","map","clinic","index","listItem","clinic_identity","number_of_beds","icd_name","icd_fallzahl","bold","noData","_c","width","fontWeight","position","right","top","padding","backgroundColor","boxShadow","borderRadius","marginBottom","fontSize","listStyleType","borderBottom","fontStyle","color","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/Analystics.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"./LocationContext\";\r\n// import axios from \"axios\";\r\n\r\n// // Function to get attributes from API\r\n// const getAttribute = async (IDs = []) => { \r\n//     try {\r\n//         console.log(`🔵 Sending request to: http://127.0.0.1:5000/search with IDs:`, IDs);\r\n\r\n//         const response = await axios.get(\"http://127.0.0.1:5000/search\", {\r\n//             params: { ID: IDs },\r\n//         });\r\n\r\n//         console.log(\"✅ API Response Received:\", response.data);\r\n//         return response.data; // Return data instead of setting state here\r\n//     } catch (error) {\r\n//         console.error(\"❌ API Error:\", error);\r\n//         return {}; // Return empty object on failure\r\n//     }\r\n// };\r\n\r\n// // Function to get road distance from OSRM API\r\n// const getRoadDistance = async (lat1, lon1, lat2, lon2) => {\r\n//     const url = `https://router.project-osrm.org/route/v1/driving/${lon1},${lat1};${lon2},${lat2}?overview=false`;\r\n\r\n//     try {\r\n//         const response = await fetch(url);\r\n//         const data = await response.json();\r\n//         if (data.routes && data.routes.length > 0) {\r\n//             return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\r\n//         } else {\r\n//             return \"N/A\";\r\n//         }\r\n//     } catch (error) {\r\n//         console.error(\"Error fetching road distance:\", error);\r\n//         return \"N/A\";\r\n//     }\r\n// };\r\n\r\n// const Analystics = () => {\r\n//     const { allLocations } = useLocation();\r\n//     const [distances, setDistances] = useState({});\r\n//     const [attributes, setAttributes] = useState({});\r\n\r\n//     // Find the user's location (if available)\r\n//     const userLocation = allLocations.find(loc => loc.clinic_name === \"Your Location\");\r\n\r\n//     // Fetch attributes for all clinics\r\n//     useEffect(() => {\r\n//         const fetchAttributes = async () => {\r\n//             if (allLocations.length > 0) {\r\n//                 const IDs = allLocations.map(loc => loc.clinic_id);\r\n//                 const attributeData = await getAttribute(IDs);\r\n//                 setAttributes(attributeData); // Update state with fetched data\r\n//             }\r\n//         };\r\n\r\n//         fetchAttributes();\r\n//     }, [allLocations]);\r\n\r\n//     // Fetch road distances between the user's location and all other clinics\r\n//     useEffect(() => {\r\n//         const fetchDistances = async () => {\r\n//             if (!userLocation) return;\r\n\r\n//             const newDistances = {};\r\n//             for (const location of allLocations) {\r\n//                 if (location.clinic_name === \"Your Location\") continue;\r\n\r\n//                 const roadDistance = await getRoadDistance(\r\n//                     userLocation.latitude, userLocation.longitude,\r\n//                     location.latitude, location.longitude\r\n//                 );\r\n\r\n//                 newDistances[location.clinic_name] = roadDistance;\r\n//             }\r\n\r\n//             setDistances(newDistances);\r\n//         };\r\n\r\n//         fetchDistances();\r\n//     }, [userLocation, allLocations]);\r\n\r\n//     return (\r\n//         <>\r\n//             {/* Informations Box */}\r\n//             <div style={styles.informationsContainer}>\r\n//                 <h3 style={styles.title}>Informations</h3>\r\n//                 <p>This section provides general insights based on selected locations.</p>\r\n//             </div>\r\n\r\n//             {/* Analystics Box */}\r\n//             <div style={styles.analysticContainer}>\r\n//                 <h3 style={styles.title}>Analystic Data</h3>\r\n//                 {allLocations.length > 0 ? (\r\n//                     <ul style={styles.list}>\r\n//                         {allLocations.map((location, index) => {\r\n//                             if (location.clinic_name === \"Your Location\") return null;\r\n\r\n//                             return (\r\n//                                 <li key={index} style={styles.listItem}>\r\n//                                     {location.clinic_name} \r\n//                                     <br />\r\n//                                     Road Distance: <span style={styles.bold}>{distances[location.clinic_name] || \"Calculating...\"} km</span>\r\n//                                     <br />\r\n//                                     Attributes: <span style={styles.bold}>{JSON.stringify(attributes[location.clinic_id] || \"Loading...\")}</span>\r\n//                                 </li>\r\n//                             );\r\n//                         })}\r\n//                     </ul>\r\n//                 ) : (\r\n//                     <p style={styles.noData}>No data available.</p>\r\n//                 )}\r\n//             </div>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// // CSS-in-JS styles\r\n// const styles = {\r\n//     informationsContainer: {\r\n//         width: \"35%\",\r\n//         fontWeight: \"600\",\r\n//         position: \"absolute\",\r\n//         right: 0,\r\n//         top: \"100px\", // Position above Analystics\r\n//         padding: \"20px\",\r\n//         backgroundColor: \"#e3f2fd\",\r\n//         boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.1)\",\r\n//         borderRadius: \"8px\",\r\n//         marginBottom: \"20px\",\r\n//     },\r\n//     analysticContainer: {\r\n//         width: \"35%\",\r\n//         fontWeight: \"600\",\r\n//         position: \"absolute\",\r\n//         right: 0,\r\n//         top: \"220px\", // Positioned right below Informations\r\n//         padding: \"20px\",\r\n//         backgroundColor: \"#f9f9f9\",\r\n//         boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.1)\",\r\n//         borderRadius: \"8px\",\r\n//     },\r\n//     title: {\r\n//         fontSize: \"20px\",\r\n//         marginBottom: \"10px\"\r\n//     },\r\n//     list: {\r\n//         listStyleType: \"none\",\r\n//         padding: 0\r\n//     },\r\n//     listItem: {\r\n//         marginBottom: \"10px\",\r\n//         padding: \"10px\",\r\n//         borderBottom: \"1px solid #ddd\"\r\n//     },\r\n//     bold: {\r\n//         fontWeight: \"600\"\r\n//     },\r\n//     noData: {\r\n//         fontStyle: \"italic\",\r\n//         color: \"#999\"\r\n//     }\r\n// };\r\n\r\n// export default Analystics;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"./LocationContext\";\r\nimport axios from \"axios\";\r\n\r\n// Function to get road distance from OSRM API\r\nconst getRoadDistance = async (lat1, lon1, lat2, lon2) => {\r\n    const url = `https://router.project-osrm.org/route/v1/driving/${lon1},${lat1};${lon2},${lat2}?overview=false`;\r\n\r\n    try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        if (data.routes && data.routes.length > 0) {\r\n            return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\r\n        } else {\r\n            return \"N/A\";\r\n        }\r\n    } catch (error) {\r\n        console.error(\"❌ Error fetching road distance:\", error);\r\n        return \"N/A\";\r\n    }\r\n};\r\n\r\nconst Analystics = () => {\r\n    const { allLocations } = useLocation();\r\n    const [distances, setDistances] = useState({});\r\n    const [clinicData, setClinicData] = useState([]);\r\n\r\n    // Debugging logs\r\n    console.log(\"📌 allLocations received in Analystics.js:\", allLocations);\r\n\r\n    // Fetch clinic attributes from API\r\n    useEffect(() => {\r\n        const fetchAttributes = async () => {\r\n            if (allLocations.length > 0) {\r\n                try {\r\n                    const response = await axios.get(\"http://127.0.0.1:5000/search\", {\r\n                        params: { city: \"Köln\", icd_code: \"D27\" } // Temporary fix\r\n                    });\r\n\r\n                    console.log(\"✅ API Response in Analystics.js:\", response.data);\r\n\r\n                    if (response.data.length > 0) {\r\n                        setClinicData(response.data);\r\n                    } else {\r\n                        console.warn(\"⚠️ No clinic data received.\");\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"❌ API Error fetching clinic data:\", error);\r\n                }\r\n            }\r\n        };\r\n\r\n        fetchAttributes();\r\n    }, [allLocations]);\r\n\r\n    // Fetch road distances between the user's location and all other clinics\r\n    useEffect(() => {\r\n        const fetchDistances = async () => {\r\n            if (!allLocations.length) return;\r\n\r\n            const newDistances = {};\r\n            for (const location of allLocations) {\r\n                if (!location.latitude || !location.longitude) continue;\r\n\r\n                const roadDistance = await getRoadDistance(\r\n                    location.latitude, location.longitude,\r\n                    location.latitude, location.longitude\r\n                );\r\n\r\n                newDistances[location.clinic_name] = roadDistance;\r\n            }\r\n\r\n            setDistances(newDistances);\r\n        };\r\n\r\n        fetchDistances();\r\n    }, [allLocations]);\r\n\r\n    return (\r\n        <>\r\n            {/* Informations Box */}\r\n            <div style={styles.informationsContainer}>\r\n                <h3 style={styles.title}>Informations</h3>\r\n                <p>This section provides general insights based on selected locations.</p>\r\n            </div>\r\n\r\n            {/* Analystics Box */}\r\n            <div style={styles.analysticContainer}>\r\n                <h3 style={styles.title}>Analystic Data</h3>\r\n                {clinicData.length > 0 ? (\r\n                    <ul style={styles.list}>\r\n                        {clinicData.map((clinic, index) => (\r\n                            <li key={index} style={styles.listItem}>\r\n                                <strong>Clinic:</strong> {clinic.clinic_name} ({clinic.clinic_identity || \"N/A\"})<br />\r\n                                <strong>City:</strong> {clinic.city || \"N/A\"} <br />\r\n                                <strong>Number of Beds:</strong> {clinic.number_of_beds || \"N/A\"} <br />\r\n                                <strong>ICD Name:</strong> {clinic.icd_name || \"N/A\"} <br />\r\n                                <strong>ICD Fallzahl:</strong> {clinic.icd_fallzahl || \"N/A\"} <br />\r\n                                <strong>Road Distance:</strong> <span style={styles.bold}>{distances[clinic.clinic_name] || \"Calculating...\"} km</span>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) : (\r\n                    <p style={styles.noData}>No data available.</p>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\n// CSS-in-JS styles\r\nconst styles = {\r\n    informationsContainer: {\r\n        width: \"35%\",\r\n        fontWeight: \"600\",\r\n        position: \"absolute\",\r\n        right: 0,\r\n        top: \"100px\", // Position above Analystics\r\n        padding: \"20px\",\r\n        backgroundColor: \"#e3f2fd\",\r\n        boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.1)\",\r\n        borderRadius: \"8px\",\r\n        marginBottom: \"20px\",\r\n    },\r\n    analysticContainer: {\r\n        width: \"35%\",\r\n        fontWeight: \"600\",\r\n        position: \"absolute\",\r\n        right: 0,\r\n        top: \"220px\", // Positioned right below Informations\r\n        padding: \"20px\",\r\n        backgroundColor: \"#f9f9f9\",\r\n        boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.1)\",\r\n        borderRadius: \"8px\",\r\n    },\r\n    title: {\r\n        fontSize: \"20px\",\r\n        marginBottom: \"10px\"\r\n    },\r\n    list: {\r\n        listStyleType: \"none\",\r\n        padding: 0\r\n    },\r\n    listItem: {\r\n        marginBottom: \"10px\",\r\n        padding: \"10px\",\r\n        borderBottom: \"1px solid #ddd\"\r\n    },\r\n    bold: {\r\n        fontWeight: \"600\"\r\n    },\r\n    noData: {\r\n        fontStyle: \"italic\",\r\n        color: \"#999\"\r\n    }\r\n};\r\n\r\nexport default Analystics;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,eAAe,GAAG,MAAAA,CAAOC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACtD,MAAMC,GAAG,GAAG,oDAAoDH,IAAI,IAAID,IAAI,IAAIG,IAAI,IAAID,IAAI,iBAAiB;EAE7G,IAAI;IACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IACjC,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,IAAID,IAAI,CAACE,MAAM,IAAIF,IAAI,CAACE,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;MACvC,OAAO,CAACH,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,CAACE,QAAQ,GAAG,IAAI,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC,MAAM;MACH,OAAO,KAAK;IAChB;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,OAAO,KAAK;EAChB;AACJ,CAAC;AAED,MAAME,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAa,CAAC,GAAGxB,WAAW,CAAC,CAAC;EACtC,MAAM,CAACyB,SAAS,EAAEC,YAAY,CAAC,GAAG5B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAM,CAAC6B,UAAU,EAAEC,aAAa,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACAuB,OAAO,CAACQ,GAAG,CAAC,4CAA4C,EAAEL,YAAY,CAAC;;EAEvE;EACAzB,SAAS,CAAC,MAAM;IACZ,MAAM+B,eAAe,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAIN,YAAY,CAACP,MAAM,GAAG,CAAC,EAAE;QACzB,IAAI;UACA,MAAML,QAAQ,GAAG,MAAMX,KAAK,CAAC8B,GAAG,CAAC,8BAA8B,EAAE;YAC7DC,MAAM,EAAE;cAAEC,IAAI,EAAE,MAAM;cAAEC,QAAQ,EAAE;YAAM,CAAC,CAAC;UAC9C,CAAC,CAAC;UAEFb,OAAO,CAACQ,GAAG,CAAC,kCAAkC,EAAEjB,QAAQ,CAACE,IAAI,CAAC;UAE9D,IAAIF,QAAQ,CAACE,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;YAC1BW,aAAa,CAAChB,QAAQ,CAACE,IAAI,CAAC;UAChC,CAAC,MAAM;YACHO,OAAO,CAACc,IAAI,CAAC,6BAA6B,CAAC;UAC/C;QACJ,CAAC,CAAC,OAAOf,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;QAC7D;MACJ;IACJ,CAAC;IAEDU,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,CAACN,YAAY,CAAC,CAAC;;EAElB;EACAzB,SAAS,CAAC,MAAM;IACZ,MAAMqC,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI,CAACZ,YAAY,CAACP,MAAM,EAAE;MAE1B,MAAMoB,YAAY,GAAG,CAAC,CAAC;MACvB,KAAK,MAAMC,QAAQ,IAAId,YAAY,EAAE;QACjC,IAAI,CAACc,QAAQ,CAACC,QAAQ,IAAI,CAACD,QAAQ,CAACE,SAAS,EAAE;QAE/C,MAAMC,YAAY,GAAG,MAAMnC,eAAe,CACtCgC,QAAQ,CAACC,QAAQ,EAAED,QAAQ,CAACE,SAAS,EACrCF,QAAQ,CAACC,QAAQ,EAAED,QAAQ,CAACE,SAChC,CAAC;QAEDH,YAAY,CAACC,QAAQ,CAACI,WAAW,CAAC,GAAGD,YAAY;MACrD;MAEAf,YAAY,CAACW,YAAY,CAAC;IAC9B,CAAC;IAEDD,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,CAACZ,YAAY,CAAC,CAAC;EAElB,oBACIrB,OAAA,CAAAE,SAAA;IAAAsC,QAAA,gBAEIxC,OAAA;MAAKyC,KAAK,EAAEC,MAAM,CAACC,qBAAsB;MAAAH,QAAA,gBACrCxC,OAAA;QAAIyC,KAAK,EAAEC,MAAM,CAACE,KAAM;QAAAJ,QAAA,EAAC;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1ChD,OAAA;QAAAwC,QAAA,EAAG;MAAmE;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzE,CAAC,eAGNhD,OAAA;MAAKyC,KAAK,EAAEC,MAAM,CAACO,kBAAmB;MAAAT,QAAA,gBAClCxC,OAAA;QAAIyC,KAAK,EAAEC,MAAM,CAACE,KAAM;QAAAJ,QAAA,EAAC;MAAc;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC3CxB,UAAU,CAACV,MAAM,GAAG,CAAC,gBAClBd,OAAA;QAAIyC,KAAK,EAAEC,MAAM,CAACQ,IAAK;QAAAV,QAAA,EAClBhB,UAAU,CAAC2B,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBAC1BrD,OAAA;UAAgByC,KAAK,EAAEC,MAAM,CAACY,QAAS;UAAAd,QAAA,gBACnCxC,OAAA;YAAAwC,QAAA,EAAQ;UAAO;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACI,MAAM,CAACb,WAAW,EAAC,IAAE,EAACa,MAAM,CAACG,eAAe,IAAI,KAAK,EAAC,GAAC,eAAAvD,OAAA;YAAA6C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACvFhD,OAAA;YAAAwC,QAAA,EAAQ;UAAK;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACI,MAAM,CAACtB,IAAI,IAAI,KAAK,EAAC,GAAC,eAAA9B,OAAA;YAAA6C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACpDhD,OAAA;YAAAwC,QAAA,EAAQ;UAAe;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACI,MAAM,CAACI,cAAc,IAAI,KAAK,EAAC,GAAC,eAAAxD,OAAA;YAAA6C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACxEhD,OAAA;YAAAwC,QAAA,EAAQ;UAAS;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACI,MAAM,CAACK,QAAQ,IAAI,KAAK,EAAC,GAAC,eAAAzD,OAAA;YAAA6C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC5DhD,OAAA;YAAAwC,QAAA,EAAQ;UAAa;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACI,MAAM,CAACM,YAAY,IAAI,KAAK,EAAC,GAAC,eAAA1D,OAAA;YAAA6C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACpEhD,OAAA;YAAAwC,QAAA,EAAQ;UAAc;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,eAAAhD,OAAA;YAAMyC,KAAK,EAAEC,MAAM,CAACiB,IAAK;YAAAnB,QAAA,GAAElB,SAAS,CAAC8B,MAAM,CAACb,WAAW,CAAC,IAAI,gBAAgB,EAAC,KAAG;UAAA;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA,GANlHK,KAAK;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOV,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,gBAELhD,OAAA;QAAGyC,KAAK,EAAEC,MAAM,CAACkB,MAAO;QAAApB,QAAA,EAAC;MAAkB;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CACjD;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA,eACR,CAAC;AAEX,CAAC;;AAED;AAAA5B,EAAA,CAxFMD,UAAU;EAAA,QACatB,WAAW;AAAA;AAAAgE,EAAA,GADlC1C,UAAU;AAyFhB,MAAMuB,MAAM,GAAG;EACXC,qBAAqB,EAAE;IACnBmB,KAAK,EAAE,KAAK;IACZC,UAAU,EAAE,KAAK;IACjBC,QAAQ,EAAE,UAAU;IACpBC,KAAK,EAAE,CAAC;IACRC,GAAG,EAAE,OAAO;IAAE;IACdC,OAAO,EAAE,MAAM;IACfC,eAAe,EAAE,SAAS;IAC1BC,SAAS,EAAE,iCAAiC;IAC5CC,YAAY,EAAE,KAAK;IACnBC,YAAY,EAAE;EAClB,CAAC;EACDtB,kBAAkB,EAAE;IAChBa,KAAK,EAAE,KAAK;IACZC,UAAU,EAAE,KAAK;IACjBC,QAAQ,EAAE,UAAU;IACpBC,KAAK,EAAE,CAAC;IACRC,GAAG,EAAE,OAAO;IAAE;IACdC,OAAO,EAAE,MAAM;IACfC,eAAe,EAAE,SAAS;IAC1BC,SAAS,EAAE,iCAAiC;IAC5CC,YAAY,EAAE;EAClB,CAAC;EACD1B,KAAK,EAAE;IACH4B,QAAQ,EAAE,MAAM;IAChBD,YAAY,EAAE;EAClB,CAAC;EACDrB,IAAI,EAAE;IACFuB,aAAa,EAAE,MAAM;IACrBN,OAAO,EAAE;EACb,CAAC;EACDb,QAAQ,EAAE;IACNiB,YAAY,EAAE,MAAM;IACpBJ,OAAO,EAAE,MAAM;IACfO,YAAY,EAAE;EAClB,CAAC;EACDf,IAAI,EAAE;IACFI,UAAU,EAAE;EAChB,CAAC;EACDH,MAAM,EAAE;IACJe,SAAS,EAAE,QAAQ;IACnBC,KAAK,EAAE;EACX;AACJ,CAAC;AAED,eAAezD,UAAU;AAAC,IAAA0C,EAAA;AAAAgB,YAAA,CAAAhB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}