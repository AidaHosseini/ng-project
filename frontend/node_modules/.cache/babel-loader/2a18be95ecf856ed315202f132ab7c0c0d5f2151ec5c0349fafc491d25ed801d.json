{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"./LocationContext\";\n// //import axios from \"axios\";\n\n// // Function to get road distance from OSRM API\n// const getRoadDistance = async (startLat, startLon, endLat, endLon) => {\n//     const url = `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`;\n\n//     try {\n//         const response = await fetch(url);\n//         const data = await response.json();\n//         if (data.routes && data.routes.length > 0) {\n//             return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\n//         } else {\n//             return \"N/A\";\n//         }\n//     } catch (error) {\n//         console.error(\"❌ Error fetching road distance:\", error);\n//         return \"N/A\";\n//     }\n// };\n\n// const Analystics = () => {\n//     const { allLocations } = useLocation();\n//     const [distances, setDistances] = useState({});\n//     // const [clinicData, setClinicData] = useState([]);\n\n//     // Find the user's location (if available)\n//     const userLocation = allLocations.find(loc => loc.clinic_name === \"Your Location\");\n\n//     // // Fetch road distances between the user's location and all clinics\n//     // useEffect(() => {\n//     //     const fetchDistances = async () => {\n//     //         if (!userLocation || !userLocation.latitude || !userLocation.longitude) {\n//     //             console.warn(\"⚠️ No valid user location found!\");\n//     //             return;\n//     //         }\n\n//     //         const newDistances = {};\n//     //         for (const clinic of allLocations) {\n//     //             if (clinic.clinic_name === \"Your Location\") continue; // Skip user location\n\n//     //             const roadDistance = await getRoadDistance(\n//     //                 userLocation.latitude, userLocation.longitude, // User's location\n//     //                 clinic.latitude, clinic.longitude // Clinic's location\n//     //             );\n\n//     //             newDistances[clinic.clinic_name] = roadDistance;\n//     //         }\n\n//     //         setDistances(newDistances);\n//     //     };\n\n//     //     fetchDistances();\n//     // }, [userLocation, allLocations]);\n\n//     useEffect(() => {\n//       const fetchDistances = async () => {\n//           if (!userLocation || !userLocation.latitude || !userLocation.longitude) {\n//               return;\n//           }\n\n//           const newDistances = {};\n//           for (const clinic of allLocations) {\n//               if (clinic.clinic_name === \"Your Location\") continue;\n\n//               const roadDistance = await getRoadDistance(\n//                   userLocation.latitude, userLocation.longitude,\n//                   clinic.latitude, clinic.longitude\n//               );\n\n//               newDistances[clinic.clinic_name] = roadDistance;\n//           }\n\n//           setDistances(newDistances);\n//       };\n\n//       fetchDistances();\n//   }, [userLocation, allLocations]);\n\n//     return (\n//         <>\n//             {/* Informations Box */}\n//             <div style={styles.informationsContainer}>\n//                 <h3 style={styles.title}>Informations</h3>\n//                 <p>This section provides general insights based on selected locations.</p>\n//             </div>\n\n//             {/* Analystics Box */}\n//             <div style={styles.analysticContainer}>\n//                 <h3 style={styles.title}>Analystic Data</h3>\n//                 {allLocations.length > 0 ? (\n//                     <ul style={styles.list}>\n//                         {allLocations.map((clinic, index) => {\n//                             if (clinic.clinic_name === \"Your Location\") return null; // Skip user location\n\n//                             return (\n//                                 <li key={index} style={styles.listItem}>\n//                                     <strong>Clinic:</strong> {clinic.clinic_name} ({clinic.clinic_identity || \"N/A\"})<br />\n//                                     <strong>City:</strong> {clinic.city || \"N/A\"} <br />\n//                                     <strong>Number of Beds:</strong> {clinic.number_of_beds || \"N/A\"} <br />\n//                                     <strong>ICD Name:</strong> {clinic.icd_name || \"N/A\"} <br />\n//                                     <strong>ICD Fallzahl:</strong> {clinic.icd_fallzahl || \"N/A\"} <br />\n//                                     <strong>Road Distance:</strong> <span style={styles.bold}>{distances[clinic.clinic_name] || \"Calculating...\"} km</span>\n//                                 </li>\n//                             );\n//                         })}\n//                     </ul>\n//                 ) : (\n//                     <p style={styles.noData}>No data available.</p>\n//                 )}\n//             </div>\n//         </>\n//     );\n// };\n\n// // CSS-in-JS styles\n// const styles = {\n//     informationsContainer: {\n//         width: \"35%\",\n//         fontWeight: \"600\",\n//         position: \"absolute\",\n//         right: 0,\n//         top: \"100px\", // Position above Analystics\n//         padding: \"20px\",\n//         backgroundColor: \"#e3f2fd\",\n//         boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.1)\",\n//         borderRadius: \"8px\",\n//         marginBottom: \"20px\",\n//     },\n//     analysticContainer: {\n//         width: \"35%\",\n//         fontWeight: \"600\",\n//         position: \"absolute\",\n//         right: 0,\n//         top: \"220px\", // Positioned right below Informations\n//         padding: \"20px\",\n//         backgroundColor: \"#f9f9f9\",\n//         boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.1)\",\n//         borderRadius: \"8px\",\n//     },\n//     title: {\n//         fontSize: \"20px\",\n//         marginBottom: \"10px\"\n//     },\n//     list: {\n//         listStyleType: \"none\",\n//         padding: 0\n//     },\n//     listItem: {\n//         marginBottom: \"10px\",\n//         padding: \"10px\",\n//         borderBottom: \"1px solid #ddd\"\n//     },\n//     bold: {\n//         fontWeight: \"600\"\n//     },\n//     noData: {\n//         fontStyle: \"italic\",\n//         color: \"#999\"\n//     }\n// };\n\n// export default Analystics;","map":{"version":3,"names":[],"sources":["C:/Users/aidah/ng-project/frontend/src/components/Analystics.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"./LocationContext\";\r\n// //import axios from \"axios\";\r\n\r\n// // Function to get road distance from OSRM API\r\n// const getRoadDistance = async (startLat, startLon, endLat, endLon) => {\r\n//     const url = `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`;\r\n\r\n//     try {\r\n//         const response = await fetch(url);\r\n//         const data = await response.json();\r\n//         if (data.routes && data.routes.length > 0) {\r\n//             return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\r\n//         } else {\r\n//             return \"N/A\";\r\n//         }\r\n//     } catch (error) {\r\n//         console.error(\"❌ Error fetching road distance:\", error);\r\n//         return \"N/A\";\r\n//     }\r\n// };\r\n\r\n// const Analystics = () => {\r\n//     const { allLocations } = useLocation();\r\n//     const [distances, setDistances] = useState({});\r\n//     // const [clinicData, setClinicData] = useState([]);\r\n\r\n//     // Find the user's location (if available)\r\n//     const userLocation = allLocations.find(loc => loc.clinic_name === \"Your Location\");\r\n\r\n//     // // Fetch road distances between the user's location and all clinics\r\n//     // useEffect(() => {\r\n//     //     const fetchDistances = async () => {\r\n//     //         if (!userLocation || !userLocation.latitude || !userLocation.longitude) {\r\n//     //             console.warn(\"⚠️ No valid user location found!\");\r\n//     //             return;\r\n//     //         }\r\n\r\n//     //         const newDistances = {};\r\n//     //         for (const clinic of allLocations) {\r\n//     //             if (clinic.clinic_name === \"Your Location\") continue; // Skip user location\r\n\r\n//     //             const roadDistance = await getRoadDistance(\r\n//     //                 userLocation.latitude, userLocation.longitude, // User's location\r\n//     //                 clinic.latitude, clinic.longitude // Clinic's location\r\n//     //             );\r\n\r\n//     //             newDistances[clinic.clinic_name] = roadDistance;\r\n//     //         }\r\n\r\n//     //         setDistances(newDistances);\r\n//     //     };\r\n\r\n//     //     fetchDistances();\r\n//     // }, [userLocation, allLocations]);\r\n\r\n//     useEffect(() => {\r\n//       const fetchDistances = async () => {\r\n//           if (!userLocation || !userLocation.latitude || !userLocation.longitude) {\r\n//               return;\r\n//           }\r\n  \r\n//           const newDistances = {};\r\n//           for (const clinic of allLocations) {\r\n//               if (clinic.clinic_name === \"Your Location\") continue;\r\n  \r\n//               const roadDistance = await getRoadDistance(\r\n//                   userLocation.latitude, userLocation.longitude,\r\n//                   clinic.latitude, clinic.longitude\r\n//               );\r\n  \r\n//               newDistances[clinic.clinic_name] = roadDistance;\r\n//           }\r\n  \r\n//           setDistances(newDistances);\r\n//       };\r\n  \r\n//       fetchDistances();\r\n//   }, [userLocation, allLocations]);\r\n  \r\n\r\n//     return (\r\n//         <>\r\n//             {/* Informations Box */}\r\n//             <div style={styles.informationsContainer}>\r\n//                 <h3 style={styles.title}>Informations</h3>\r\n//                 <p>This section provides general insights based on selected locations.</p>\r\n//             </div>\r\n\r\n//             {/* Analystics Box */}\r\n//             <div style={styles.analysticContainer}>\r\n//                 <h3 style={styles.title}>Analystic Data</h3>\r\n//                 {allLocations.length > 0 ? (\r\n//                     <ul style={styles.list}>\r\n//                         {allLocations.map((clinic, index) => {\r\n//                             if (clinic.clinic_name === \"Your Location\") return null; // Skip user location\r\n\r\n//                             return (\r\n//                                 <li key={index} style={styles.listItem}>\r\n//                                     <strong>Clinic:</strong> {clinic.clinic_name} ({clinic.clinic_identity || \"N/A\"})<br />\r\n//                                     <strong>City:</strong> {clinic.city || \"N/A\"} <br />\r\n//                                     <strong>Number of Beds:</strong> {clinic.number_of_beds || \"N/A\"} <br />\r\n//                                     <strong>ICD Name:</strong> {clinic.icd_name || \"N/A\"} <br />\r\n//                                     <strong>ICD Fallzahl:</strong> {clinic.icd_fallzahl || \"N/A\"} <br />\r\n//                                     <strong>Road Distance:</strong> <span style={styles.bold}>{distances[clinic.clinic_name] || \"Calculating...\"} km</span>\r\n//                                 </li>\r\n//                             );\r\n//                         })}\r\n//                     </ul>\r\n//                 ) : (\r\n//                     <p style={styles.noData}>No data available.</p>\r\n//                 )}\r\n//             </div>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// // CSS-in-JS styles\r\n// const styles = {\r\n//     informationsContainer: {\r\n//         width: \"35%\",\r\n//         fontWeight: \"600\",\r\n//         position: \"absolute\",\r\n//         right: 0,\r\n//         top: \"100px\", // Position above Analystics\r\n//         padding: \"20px\",\r\n//         backgroundColor: \"#e3f2fd\",\r\n//         boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.1)\",\r\n//         borderRadius: \"8px\",\r\n//         marginBottom: \"20px\",\r\n//     },\r\n//     analysticContainer: {\r\n//         width: \"35%\",\r\n//         fontWeight: \"600\",\r\n//         position: \"absolute\",\r\n//         right: 0,\r\n//         top: \"220px\", // Positioned right below Informations\r\n//         padding: \"20px\",\r\n//         backgroundColor: \"#f9f9f9\",\r\n//         boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.1)\",\r\n//         borderRadius: \"8px\",\r\n//     },\r\n//     title: {\r\n//         fontSize: \"20px\",\r\n//         marginBottom: \"10px\"\r\n//     },\r\n//     list: {\r\n//         listStyleType: \"none\",\r\n//         padding: 0\r\n//     },\r\n//     listItem: {\r\n//         marginBottom: \"10px\",\r\n//         padding: \"10px\",\r\n//         borderBottom: \"1px solid #ddd\"\r\n//     },\r\n//     bold: {\r\n//         fontWeight: \"600\"\r\n//     },\r\n//     noData: {\r\n//         fontStyle: \"italic\",\r\n//         color: \"#999\"\r\n//     }\r\n// };\r\n\r\n// export default Analystics;\r\n\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}