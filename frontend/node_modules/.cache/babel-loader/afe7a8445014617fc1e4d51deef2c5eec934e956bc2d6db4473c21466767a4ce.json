{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\map.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useState, useEffect, useMemo } from \"react\";\n// import { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet'\n// import 'leaflet/dist/leaflet.css'\n// import SearchForm from \"./SearchForm\";\n// import L from \"leaflet\";\n// import { useLocation } from \"./LocationContext\";\n\n// // Custom icon for user location\n// const userIcon = new L.Icon({\n//     iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\n//     iconSize: [30, 30],\n//     iconAnchor: [15, 30]\n// });\n\n// // Predefined colors for lines (cycling through these)\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// // Auto-zoom component\n// const AutoZoom = ({ locations }) => {\n//     const map = useMap(); // Access the map instance\n\n//     useEffect(() => {\n//         if (locations.length > 0) {\n//             const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\n//             map.fitBounds(bounds, { padding: [50, 50] }); // Adjust padding for better view\n//         }\n//     }, [locations, map]);\n\n//     return null; // This component only handles map logic\n// };\n// const Map = () => {\n\n//     const [latitude, setlatitude] = useState(0);\n//     const [longitude, setlongitude] = useState(0);\n//     const [graphData, setGraphData] = useState([]);\n//     const [userLocation, setUserLocation] = useState(null);\n//     const [locationChoice, setLocationChoice] = useState(\"\"); // \"my-location\" or \"manual\"\n//     const [manualAddress, setManualAddress] = useState(\"\"); // User's address input\n//     const { setAllLocations } = useLocation();\n\n//     console.log(graphData[0]);\n//     // setlatitude(graphData[0].latitude);\n//     // setlongitude(graphData[0].longitude);\n//     useEffect(() => {\n//         if (graphData.length > 0) {\n//             graphData.forEach((data, index) => {\n//                 console.log(`Position ${index + 1}: Latitude ${data.latitude}, Longitude ${data.longitude}`);\n//                 setlatitude(data.latitude);\n//                 setlongitude(data.longitude);\n//             });\n\n//         }\n//     }, [graphData]);  // Runs when graphData updates\n\n//     const position = [latitude, longitude];\n//     console.log(position);\n\n//    // Get user's current location\n//    const fetchMyLocation = () => {\n//     if (navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(\n//             (position) => {\n//                 setUserLocation({\n//                     latitude: position.coords.latitude,\n//                     longitude: position.coords.longitude\n//                 });\n//             },\n//             (error) => {\n//                 console.error(\"Error getting location:\", error);\n//             }\n//         );\n//     }\n// };\n\n// // Handle location selection\n// const handleLocationChoice = (choice) => {\n//     setLocationChoice(choice);\n//     setUserLocation(null);\n//     setManualAddress(\"\"); // Reset manual input\n//     if (choice === \"my-location\") {\n//         fetchMyLocation();\n//     }\n// };\n\n// // Convert address to latitude & longitude using OpenStreetMap's Nominatim API\n// const handleManualAddressSearch = async () => {\n//     if (!manualAddress.trim()) {\n//         alert(\"Please enter a valid address.\");\n//         return;\n//     }\n\n//     try {\n//         const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n//         const data = await response.json();\n\n//         if (data.length > 0) {\n//             setUserLocation({\n//                 latitude: parseFloat(data[0].lat),\n//                 longitude: parseFloat(data[0].lon)\n//             });\n//         } else {\n//             alert(\"Address not found. Please enter a more precise location.\");\n//         }\n//     } catch (error) {\n//         console.error(\"Error fetching geolocation:\", error);\n//         alert(\"Failed to fetch location. Try again later.\");\n//     }\n// };\n\n//   // ✅ UseMemo prevents re-creating allLocations on every render\n//   const allLocations = useMemo(() => {\n//     const locations = [...graphData];\n//     if (userLocation) {\n//         locations.push({ clinic_name: \"Your Location\", ...userLocation });\n//     }\n//     return locations;\n// }, [graphData, userLocation]); // Recalculates only when these change\n\n// // ✅ useEffect only updates when allLocations changes\n// useEffect(() => {\n//     setAllLocations(allLocations);\n// }, [allLocations, setAllLocations]);\n\n//   return (\n//     <div>\n//       <h1>New Ways of Care Provision and Analysis of Patient Flows</h1>\n//        {/* Location Selection */}\n//        <div>\n//                 <h3> Input Your Location:</h3>\n//                 <button onClick={() => handleLocationChoice(\"my-location\")}>Use My Location</button>\n//                 <button onClick={() => handleLocationChoice(\"manual\")}>Enter Location Manually</button>\n//             </div>\n\n//             {/* Manual Address Input */}\n//             {locationChoice === \"manual\" && (\n//                 <div>\n//                     <input \n//                         type=\"text\" \n//                         placeholder=\"Enter your address\" \n//                         value={manualAddress} \n//                         onChange={(e) => setManualAddress(e.target.value)}\n//                     />\n//                     <button onClick={handleManualAddressSearch}>Search Address</button>\n//                 </div>\n//             )}\n\n//       <SearchForm setGraphData={setGraphData} />\n\n//       <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{height: 500, width: \"60%\"}}>\n//     <TileLayer\n//       attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n//       url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//     />\n//     {/* Auto-Zoom Feature */}\n//     <AutoZoom locations={allLocations} />\n//     {/* <Marker position={position} >\n//       <Popup>\n//         A pretty CSS3 popup. <br /> Easily customizable.\n//       </Popup>\n//     </Marker> */}\n//     {graphData.map((data, index) => (\n//                 <Marker key={index} position={[data.latitude, data.longitude]}>\n//                     <Popup>\n//                         <strong>{data.clinic_name}</strong><br />\n//                         City: {data.city} <br />\n//                         Lat: {data.latitude}, Lng: {data.longitude}\n//                     </Popup>\n//                 </Marker>\n\n//             ))}\n\n//             {/* Show User's Current Location */}\n//             {userLocation && (\n//                     <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\n//                         <Popup>\n//                             <strong>Your Location</strong><br />\n//                             Lat: {userLocation.latitude}, Lng: {userLocation.longitude}\n//                         </Popup>\n//                     </Marker>\n//                 )}\n\n//                   {/* Draw lines from user to each clinic with different colors */}\n//                 {userLocation && graphData.map((data, index) => (\n//                     <Polyline \n//                         key={index} \n//                         positions={[[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]]} \n//                         color={lineColors[index % lineColors.length]} // Cycle through colors\n//                         weight={3} // Line thickness\n//                     />\n//                 ))}\n\n//   </MapContainer>,\n//     </div>\n//   );\n// };\n\n// export default Map;\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport SearchForm from \"./SearchForm\";\nimport L from \"leaflet\";\nimport { useLocation } from \"./LocationContext\";\n\n// 🎨 Dynamic Marker Icons based on Provider Type and Bed Count\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getCustomIcon = (providerType, bedCount) => {\n  let iconSize = bedCount ? Math.min(50, Math.max(20, bedCount / 15)) : 25; // Adjust icon size\n  let iconUrl = \"\";\n  switch (providerType) {\n    case \"Clinic\":\n      iconUrl = \"https://cdn-icons-png.flaticon.com/512/2874/2874783.png\"; // Hospital Icon\n      break;\n    case \"MVZ\":\n      iconUrl = \"https://cdn-icons-png.flaticon.com/512/3062/3062634.png\"; // Medical Practice Icon\n      iconSize = 25; // Fixed small size\n      break;\n    case \"ASV\":\n      iconUrl = \"https://cdn-icons-png.flaticon.com/512/1048/1048953.png\"; // ASV Icon\n      iconSize = 25; // Fixed small size\n      break;\n    case \"User\":\n      iconUrl = \"https://cdn-icons-png.flaticon.com/512/684/684908.png\"; // User Location Icon\n      iconSize = 30;\n      break;\n    default:\n      iconUrl = \"https://cdn-icons-png.flaticon.com/512/684/684908.png\"; // Default location pin\n      iconSize = 25;\n      break;\n  }\n  return new L.Icon({\n    iconUrl,\n    iconSize: [iconSize, iconSize],\n    iconAnchor: [iconSize / 2, iconSize]\n  });\n};\n\n// 🎨 Predefined colors for lines\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// 🎯 Auto-zoom Component\nconst AutoZoom = ({\n  locations\n}) => {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (locations.length > 0) {\n      const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\n      map.fitBounds(bounds, {\n        padding: [50, 50]\n      });\n    }\n  }, [locations, map]);\n  return null;\n};\n_s(AutoZoom, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = AutoZoom;\nconst Map = () => {\n  _s2();\n  const [graphData, setGraphData] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const [locationChoice, setLocationChoice] = useState(\"\"); // \"my-location\" or \"manual\"\n  const [manualAddress, setManualAddress] = useState(\"\"); // User's address input\n  const {\n    setAllLocations\n  } = useLocation();\n\n  // 📍 Fetch user's current location\n  const fetchMyLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setUserLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      }, error => {\n        console.error(\"Error getting location:\", error);\n      });\n    }\n  };\n\n  // 📍 Handle location selection\n  const handleLocationChoice = choice => {\n    setLocationChoice(choice);\n    setUserLocation(null);\n    setManualAddress(\"\");\n    if (choice === \"my-location\") {\n      fetchMyLocation();\n    }\n  };\n\n  // 📍 Convert address to lat/lon using OpenStreetMap's API\n  const handleManualAddressSearch = async () => {\n    if (!manualAddress.trim()) {\n      alert(\"Please enter a valid address.\");\n      return;\n    }\n    try {\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n      const data = await response.json();\n      if (data.length > 0) {\n        setUserLocation({\n          latitude: parseFloat(data[0].lat),\n          longitude: parseFloat(data[0].lon)\n        });\n      } else {\n        alert(\"Address not found. Please enter a more precise location.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching geolocation:\", error);\n      alert(\"Failed to fetch location. Try again later.\");\n    }\n  };\n\n  // 📌 Memoize locations\n  const allLocations = useMemo(() => {\n    const locations = [...graphData];\n    if (userLocation) {\n      locations.push({\n        clinic_name: \"Your Location\",\n        provider_type: \"User\",\n        ...userLocation\n      });\n    }\n    return locations;\n  }, [graphData, userLocation]);\n\n  // ✅ Update locations in the context\n  useEffect(() => {\n    setAllLocations(allLocations);\n  }, [allLocations, setAllLocations]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Neue Wege der Versorgung und Analyse der Patientenstr\\xF6me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Your Location:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleLocationChoice(\"my-location\"),\n        children: \"Use My Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleLocationChoice(\"manual\"),\n        children: \"Enter Location Manually\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 13\n    }, this), locationChoice === \"manual\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your address\",\n        value: manualAddress,\n        onChange: e => setManualAddress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleManualAddressSearch,\n        children: \"Search Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      setGraphData: setGraphData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [50.851, 8.015],\n      zoom: 8,\n      scrollWheelZoom: false,\n      style: {\n        height: 500,\n        width: \"60%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AutoZoom, {\n        locations: allLocations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 17\n      }, this), graphData.map((data, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: [data.latitude, data.longitude],\n        icon: getCustomIcon(data.provider_type, data.number_of_beds),\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: data.clinic_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 64\n          }, this), \"City: \", data.city, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 47\n          }, this), data.number_of_beds ? `Beds: ${data.number_of_beds}` : \"MVZ / ASV\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 97\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 21\n      }, this)), userLocation && /*#__PURE__*/_jsxDEV(Marker, {\n        position: [userLocation.latitude, userLocation.longitude],\n        icon: getCustomIcon(\"User\", null),\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Your Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 59\n          }, this), \"Lat: \", userLocation.latitude, \", Lng: \", userLocation.longitude]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 21\n      }, this), userLocation && graphData.map((data, index) => /*#__PURE__*/_jsxDEV(Polyline, {\n        positions: [[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]],\n        color: lineColors[index % lineColors.length],\n        weight: 3\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 9\n  }, this);\n};\n_s2(Map, \"E7gzXfXTChBO3X0gT1LDrvT0IDA=\", false, function () {\n  return [useLocation];\n});\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"AutoZoom\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","MapContainer","TileLayer","useMap","Marker","Popup","Polyline","SearchForm","L","useLocation","jsxDEV","_jsxDEV","getCustomIcon","providerType","bedCount","iconSize","Math","min","max","iconUrl","Icon","iconAnchor","lineColors","AutoZoom","locations","_s","map","length","bounds","latLngBounds","loc","latitude","longitude","fitBounds","padding","_c","Map","_s2","graphData","setGraphData","userLocation","setUserLocation","locationChoice","setLocationChoice","manualAddress","setManualAddress","setAllLocations","fetchMyLocation","navigator","geolocation","getCurrentPosition","position","coords","error","console","handleLocationChoice","choice","handleManualAddressSearch","trim","alert","response","fetch","encodeURIComponent","data","json","parseFloat","lat","lon","allLocations","push","clinic_name","provider_type","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","e","target","center","zoom","scrollWheelZoom","style","height","width","attribution","url","index","icon","number_of_beds","city","positions","color","weight","_c2","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/map.js"],"sourcesContent":["// import React, { useState, useEffect, useMemo } from \"react\";\r\n// import { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet'\r\n// import 'leaflet/dist/leaflet.css'\r\n// import SearchForm from \"./SearchForm\";\r\n// import L from \"leaflet\";\r\n// import { useLocation } from \"./LocationContext\";\r\n\r\n\r\n// // Custom icon for user location\r\n// const userIcon = new L.Icon({\r\n//     iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\r\n//     iconSize: [30, 30],\r\n//     iconAnchor: [15, 30]\r\n// });\r\n\r\n\r\n\r\n// // Predefined colors for lines (cycling through these)\r\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// // Auto-zoom component\r\n// const AutoZoom = ({ locations }) => {\r\n//     const map = useMap(); // Access the map instance\r\n\r\n//     useEffect(() => {\r\n//         if (locations.length > 0) {\r\n//             const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\r\n//             map.fitBounds(bounds, { padding: [50, 50] }); // Adjust padding for better view\r\n//         }\r\n//     }, [locations, map]);\r\n\r\n//     return null; // This component only handles map logic\r\n// };\r\n// const Map = () => {\r\n\r\n//     const [latitude, setlatitude] = useState(0);\r\n//     const [longitude, setlongitude] = useState(0);\r\n//     const [graphData, setGraphData] = useState([]);\r\n//     const [userLocation, setUserLocation] = useState(null);\r\n//     const [locationChoice, setLocationChoice] = useState(\"\"); // \"my-location\" or \"manual\"\r\n//     const [manualAddress, setManualAddress] = useState(\"\"); // User's address input\r\n//     const { setAllLocations } = useLocation();\r\n\r\n\r\n//     console.log(graphData[0]);\r\n//     // setlatitude(graphData[0].latitude);\r\n//     // setlongitude(graphData[0].longitude);\r\n//     useEffect(() => {\r\n//         if (graphData.length > 0) {\r\n//             graphData.forEach((data, index) => {\r\n//                 console.log(`Position ${index + 1}: Latitude ${data.latitude}, Longitude ${data.longitude}`);\r\n//                 setlatitude(data.latitude);\r\n//                 setlongitude(data.longitude);\r\n//             });\r\n            \r\n//         }\r\n//     }, [graphData]);  // Runs when graphData updates\r\n    \r\n//     const position = [latitude, longitude];\r\n//     console.log(position);\r\n\r\n//    // Get user's current location\r\n//    const fetchMyLocation = () => {\r\n//     if (navigator.geolocation) {\r\n//         navigator.geolocation.getCurrentPosition(\r\n//             (position) => {\r\n//                 setUserLocation({\r\n//                     latitude: position.coords.latitude,\r\n//                     longitude: position.coords.longitude\r\n//                 });\r\n//             },\r\n//             (error) => {\r\n//                 console.error(\"Error getting location:\", error);\r\n//             }\r\n//         );\r\n//     }\r\n// };\r\n\r\n\r\n// // Handle location selection\r\n// const handleLocationChoice = (choice) => {\r\n//     setLocationChoice(choice);\r\n//     setUserLocation(null);\r\n//     setManualAddress(\"\"); // Reset manual input\r\n//     if (choice === \"my-location\") {\r\n//         fetchMyLocation();\r\n//     }\r\n// };\r\n\r\n// // Convert address to latitude & longitude using OpenStreetMap's Nominatim API\r\n// const handleManualAddressSearch = async () => {\r\n//     if (!manualAddress.trim()) {\r\n//         alert(\"Please enter a valid address.\");\r\n//         return;\r\n//     }\r\n\r\n//     try {\r\n//         const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\r\n//         const data = await response.json();\r\n        \r\n//         if (data.length > 0) {\r\n//             setUserLocation({\r\n//                 latitude: parseFloat(data[0].lat),\r\n//                 longitude: parseFloat(data[0].lon)\r\n//             });\r\n//         } else {\r\n//             alert(\"Address not found. Please enter a more precise location.\");\r\n//         }\r\n//     } catch (error) {\r\n//         console.error(\"Error fetching geolocation:\", error);\r\n//         alert(\"Failed to fetch location. Try again later.\");\r\n//     }\r\n// };\r\n\r\n\r\n//   // ✅ UseMemo prevents re-creating allLocations on every render\r\n//   const allLocations = useMemo(() => {\r\n//     const locations = [...graphData];\r\n//     if (userLocation) {\r\n//         locations.push({ clinic_name: \"Your Location\", ...userLocation });\r\n//     }\r\n//     return locations;\r\n// }, [graphData, userLocation]); // Recalculates only when these change\r\n\r\n// // ✅ useEffect only updates when allLocations changes\r\n// useEffect(() => {\r\n//     setAllLocations(allLocations);\r\n// }, [allLocations, setAllLocations]);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>New Ways of Care Provision and Analysis of Patient Flows</h1>\r\n//        {/* Location Selection */}\r\n//        <div>\r\n//                 <h3> Input Your Location:</h3>\r\n//                 <button onClick={() => handleLocationChoice(\"my-location\")}>Use My Location</button>\r\n//                 <button onClick={() => handleLocationChoice(\"manual\")}>Enter Location Manually</button>\r\n//             </div>\r\n\r\n//             {/* Manual Address Input */}\r\n//             {locationChoice === \"manual\" && (\r\n//                 <div>\r\n//                     <input \r\n//                         type=\"text\" \r\n//                         placeholder=\"Enter your address\" \r\n//                         value={manualAddress} \r\n//                         onChange={(e) => setManualAddress(e.target.value)}\r\n//                     />\r\n//                     <button onClick={handleManualAddressSearch}>Search Address</button>\r\n//                 </div>\r\n//             )}\r\n\r\n\r\n//       <SearchForm setGraphData={setGraphData} />\r\n\r\n//       <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{height: 500, width: \"60%\"}}>\r\n//     <TileLayer\r\n//       attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n//       url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n//     />\r\n//     {/* Auto-Zoom Feature */}\r\n//     <AutoZoom locations={allLocations} />\r\n//     {/* <Marker position={position} >\r\n//       <Popup>\r\n//         A pretty CSS3 popup. <br /> Easily customizable.\r\n//       </Popup>\r\n//     </Marker> */}\r\n//     {graphData.map((data, index) => (\r\n//                 <Marker key={index} position={[data.latitude, data.longitude]}>\r\n//                     <Popup>\r\n//                         <strong>{data.clinic_name}</strong><br />\r\n//                         City: {data.city} <br />\r\n//                         Lat: {data.latitude}, Lng: {data.longitude}\r\n//                     </Popup>\r\n//                 </Marker>\r\n\r\n//             ))}\r\n\r\n//             {/* Show User's Current Location */}\r\n//             {userLocation && (\r\n//                     <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\r\n//                         <Popup>\r\n//                             <strong>Your Location</strong><br />\r\n//                             Lat: {userLocation.latitude}, Lng: {userLocation.longitude}\r\n//                         </Popup>\r\n//                     </Marker>\r\n//                 )}\r\n\r\n//                   {/* Draw lines from user to each clinic with different colors */}\r\n//                 {userLocation && graphData.map((data, index) => (\r\n//                     <Polyline \r\n//                         key={index} \r\n//                         positions={[[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]]} \r\n//                         color={lineColors[index % lineColors.length]} // Cycle through colors\r\n//                         weight={3} // Line thickness\r\n//                     />\r\n//                 ))}\r\n\r\n                \r\n//   </MapContainer>,\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Map;\r\n\r\nimport React, { useState, useEffect, useMemo } from \"react\";\r\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport SearchForm from \"./SearchForm\";\r\nimport L from \"leaflet\";\r\nimport { useLocation } from \"./LocationContext\";\r\n\r\n// 🎨 Dynamic Marker Icons based on Provider Type and Bed Count\r\nconst getCustomIcon = (providerType, bedCount) => {\r\n    let iconSize = bedCount ? Math.min(50, Math.max(20, bedCount / 15)) : 25; // Adjust icon size\r\n    let iconUrl = \"\";\r\n\r\n    switch (providerType) {\r\n        case \"Clinic\":\r\n            iconUrl = \"https://cdn-icons-png.flaticon.com/512/2874/2874783.png\"; // Hospital Icon\r\n            break;\r\n        case \"MVZ\":\r\n            iconUrl = \"https://cdn-icons-png.flaticon.com/512/3062/3062634.png\"; // Medical Practice Icon\r\n            iconSize = 25; // Fixed small size\r\n            break;\r\n        case \"ASV\":\r\n            iconUrl = \"https://cdn-icons-png.flaticon.com/512/1048/1048953.png\"; // ASV Icon\r\n            iconSize = 25; // Fixed small size\r\n            break;\r\n        case \"User\":\r\n            iconUrl = \"https://cdn-icons-png.flaticon.com/512/684/684908.png\"; // User Location Icon\r\n            iconSize = 30;\r\n            break;\r\n        default:\r\n            iconUrl = \"https://cdn-icons-png.flaticon.com/512/684/684908.png\"; // Default location pin\r\n            iconSize = 25;\r\n            break;\r\n    }\r\n\r\n    return new L.Icon({\r\n        iconUrl,\r\n        iconSize: [iconSize, iconSize],\r\n        iconAnchor: [iconSize / 2, iconSize],\r\n    });\r\n};\r\n\r\n// 🎨 Predefined colors for lines\r\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// 🎯 Auto-zoom Component\r\nconst AutoZoom = ({ locations }) => {\r\n    const map = useMap();\r\n    useEffect(() => {\r\n        if (locations.length > 0) {\r\n            const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\r\n            map.fitBounds(bounds, { padding: [50, 50] });\r\n        }\r\n    }, [locations, map]);\r\n    return null;\r\n};\r\n\r\nconst Map = () => {\r\n    const [graphData, setGraphData] = useState([]);\r\n    const [userLocation, setUserLocation] = useState(null);\r\n    const [locationChoice, setLocationChoice] = useState(\"\"); // \"my-location\" or \"manual\"\r\n    const [manualAddress, setManualAddress] = useState(\"\"); // User's address input\r\n    const { setAllLocations } = useLocation();\r\n\r\n    // 📍 Fetch user's current location\r\n    const fetchMyLocation = () => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    setUserLocation({\r\n                        latitude: position.coords.latitude,\r\n                        longitude: position.coords.longitude\r\n                    });\r\n                },\r\n                (error) => {\r\n                    console.error(\"Error getting location:\", error);\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    // 📍 Handle location selection\r\n    const handleLocationChoice = (choice) => {\r\n        setLocationChoice(choice);\r\n        setUserLocation(null);\r\n        setManualAddress(\"\");\r\n        if (choice === \"my-location\") {\r\n            fetchMyLocation();\r\n        }\r\n    };\r\n\r\n    // 📍 Convert address to lat/lon using OpenStreetMap's API\r\n    const handleManualAddressSearch = async () => {\r\n        if (!manualAddress.trim()) {\r\n            alert(\"Please enter a valid address.\");\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\r\n            const data = await response.json();\r\n            if (data.length > 0) {\r\n                setUserLocation({\r\n                    latitude: parseFloat(data[0].lat),\r\n                    longitude: parseFloat(data[0].lon)\r\n                });\r\n            } else {\r\n                alert(\"Address not found. Please enter a more precise location.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching geolocation:\", error);\r\n            alert(\"Failed to fetch location. Try again later.\");\r\n        }\r\n    };\r\n\r\n    // 📌 Memoize locations\r\n    const allLocations = useMemo(() => {\r\n        const locations = [...graphData];\r\n        if (userLocation) {\r\n            locations.push({ clinic_name: \"Your Location\", provider_type: \"User\", ...userLocation });\r\n        }\r\n        return locations;\r\n    }, [graphData, userLocation]);\r\n\r\n    // ✅ Update locations in the context\r\n    useEffect(() => {\r\n        setAllLocations(allLocations);\r\n    }, [allLocations, setAllLocations]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Neue Wege der Versorgung und Analyse der Patientenströme</h1>\r\n\r\n            {/* 🌍 Location Selection */}\r\n            <div>\r\n                <h3>Select Your Location:</h3>\r\n                <button onClick={() => handleLocationChoice(\"my-location\")}>Use My Location</button>\r\n                <button onClick={() => handleLocationChoice(\"manual\")}>Enter Location Manually</button>\r\n            </div>\r\n\r\n            {/* 📌 Manual Address Input */}\r\n            {locationChoice === \"manual\" && (\r\n                <div>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Enter your address\" \r\n                        value={manualAddress} \r\n                        onChange={(e) => setManualAddress(e.target.value)}\r\n                    />\r\n                    <button onClick={handleManualAddressSearch}>Search Address</button>\r\n                </div>\r\n            )}\r\n\r\n            {/* 🔎 Search Form */}\r\n            <SearchForm setGraphData={setGraphData} />\r\n\r\n            {/* 🗺️ Map Display */}\r\n            <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: 500, width: \"60%\" }}>\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                {/* Auto-Zoom Feature */}\r\n                <AutoZoom locations={allLocations} />\r\n\r\n                {/* 📍 Add Clinic & Provider Markers */}\r\n                {graphData.map((data, index) => (\r\n                    <Marker \r\n                        key={index} \r\n                        position={[data.latitude, data.longitude]} \r\n                        icon={getCustomIcon(data.provider_type, data.number_of_beds)}\r\n                    >\r\n                        <Popup>\r\n                            <strong>{data.clinic_name}</strong><br />\r\n                            City: {data.city} <br />\r\n                            {data.number_of_beds ? `Beds: ${data.number_of_beds}` : \"MVZ / ASV\"}<br />\r\n                        </Popup>\r\n                    </Marker>\r\n                ))}\r\n\r\n                {/* 📍 User's Location Marker */}\r\n                {userLocation && (\r\n                    <Marker position={[userLocation.latitude, userLocation.longitude]} icon={getCustomIcon(\"User\", null)}>\r\n                        <Popup>\r\n                            <strong>Your Location</strong><br />\r\n                            Lat: {userLocation.latitude}, Lng: {userLocation.longitude}\r\n                        </Popup>\r\n                    </Marker>\r\n                )}\r\n\r\n                {/* 🛣️ Draw Lines */}\r\n                {userLocation && graphData.map((data, index) => (\r\n                    <Polyline \r\n                        key={index} \r\n                        positions={[[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]]} \r\n                        color={lineColors[index % lineColors.length]} \r\n                        weight={3}\r\n                    />\r\n                ))}\r\n            </MapContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC3D,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AACxF,OAAO,0BAA0B;AACjC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,CAAC,MAAM,SAAS;AACvB,SAASC,WAAW,QAAQ,mBAAmB;;AAE/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,GAAGA,CAACC,YAAY,EAAEC,QAAQ,KAAK;EAC9C,IAAIC,QAAQ,GAAGD,QAAQ,GAAGE,IAAI,CAACC,GAAG,CAAC,EAAE,EAAED,IAAI,CAACE,GAAG,CAAC,EAAE,EAAEJ,QAAQ,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;EAC1E,IAAIK,OAAO,GAAG,EAAE;EAEhB,QAAQN,YAAY;IAChB,KAAK,QAAQ;MACTM,OAAO,GAAG,yDAAyD,CAAC,CAAC;MACrE;IACJ,KAAK,KAAK;MACNA,OAAO,GAAG,yDAAyD,CAAC,CAAC;MACrEJ,QAAQ,GAAG,EAAE,CAAC,CAAC;MACf;IACJ,KAAK,KAAK;MACNI,OAAO,GAAG,yDAAyD,CAAC,CAAC;MACrEJ,QAAQ,GAAG,EAAE,CAAC,CAAC;MACf;IACJ,KAAK,MAAM;MACPI,OAAO,GAAG,uDAAuD,CAAC,CAAC;MACnEJ,QAAQ,GAAG,EAAE;MACb;IACJ;MACII,OAAO,GAAG,uDAAuD,CAAC,CAAC;MACnEJ,QAAQ,GAAG,EAAE;MACb;EACR;EAEA,OAAO,IAAIP,CAAC,CAACY,IAAI,CAAC;IACdD,OAAO;IACPJ,QAAQ,EAAE,CAACA,QAAQ,EAAEA,QAAQ,CAAC;IAC9BM,UAAU,EAAE,CAACN,QAAQ,GAAG,CAAC,EAAEA,QAAQ;EACvC,CAAC,CAAC;AACN,CAAC;;AAED;AACA,MAAMO,UAAU,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC;;AAEjF;AACA,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAMC,GAAG,GAAGvB,MAAM,CAAC,CAAC;EACpBJ,SAAS,CAAC,MAAM;IACZ,IAAIyB,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;MACtB,MAAMC,MAAM,GAAGpB,CAAC,CAACqB,YAAY,CAACL,SAAS,CAACE,GAAG,CAACI,GAAG,IAAI,CAACA,GAAG,CAACC,QAAQ,EAAED,GAAG,CAACE,SAAS,CAAC,CAAC,CAAC;MAClFN,GAAG,CAACO,SAAS,CAACL,MAAM,EAAE;QAAEM,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE;MAAE,CAAC,CAAC;IAChD;EACJ,CAAC,EAAE,CAACV,SAAS,EAAEE,GAAG,CAAC,CAAC;EACpB,OAAO,IAAI;AACf,CAAC;AAACD,EAAA,CATIF,QAAQ;EAAA,QACEpB,MAAM;AAAA;AAAAgC,EAAA,GADhBZ,QAAQ;AAWd,MAAMa,GAAG,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACd,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGzC,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC0C,YAAY,EAAEC,eAAe,CAAC,GAAG3C,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAAC4C,cAAc,EAAEC,iBAAiB,CAAC,GAAG7C,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1D,MAAM,CAAC8C,aAAa,EAAEC,gBAAgB,CAAC,GAAG/C,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxD,MAAM;IAAEgD;EAAgB,CAAC,GAAGrC,WAAW,CAAC,CAAC;;EAEzC;EACA,MAAMsC,eAAe,GAAGA,CAAA,KAAM;IAC1B,IAAIC,SAAS,CAACC,WAAW,EAAE;MACvBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACnCC,QAAQ,IAAK;QACVV,eAAe,CAAC;UACZV,QAAQ,EAAEoB,QAAQ,CAACC,MAAM,CAACrB,QAAQ;UAClCC,SAAS,EAAEmB,QAAQ,CAACC,MAAM,CAACpB;QAC/B,CAAC,CAAC;MACN,CAAC,EACAqB,KAAK,IAAK;QACPC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACnD,CACJ,CAAC;IACL;EACJ,CAAC;;EAED;EACA,MAAME,oBAAoB,GAAIC,MAAM,IAAK;IACrCb,iBAAiB,CAACa,MAAM,CAAC;IACzBf,eAAe,CAAC,IAAI,CAAC;IACrBI,gBAAgB,CAAC,EAAE,CAAC;IACpB,IAAIW,MAAM,KAAK,aAAa,EAAE;MAC1BT,eAAe,CAAC,CAAC;IACrB;EACJ,CAAC;;EAED;EACA,MAAMU,yBAAyB,GAAG,MAAAA,CAAA,KAAY;IAC1C,IAAI,CAACb,aAAa,CAACc,IAAI,CAAC,CAAC,EAAE;MACvBC,KAAK,CAAC,+BAA+B,CAAC;MACtC;IACJ;IACA,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4DAA4DC,kBAAkB,CAAClB,aAAa,CAAC,EAAE,CAAC;MAC7H,MAAMmB,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACpC,MAAM,GAAG,CAAC,EAAE;QACjBc,eAAe,CAAC;UACZV,QAAQ,EAAEkC,UAAU,CAACF,IAAI,CAAC,CAAC,CAAC,CAACG,GAAG,CAAC;UACjClC,SAAS,EAAEiC,UAAU,CAACF,IAAI,CAAC,CAAC,CAAC,CAACI,GAAG;QACrC,CAAC,CAAC;MACN,CAAC,MAAM;QACHR,KAAK,CAAC,0DAA0D,CAAC;MACrE;IACJ,CAAC,CAAC,OAAON,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDM,KAAK,CAAC,4CAA4C,CAAC;IACvD;EACJ,CAAC;;EAED;EACA,MAAMS,YAAY,GAAGpE,OAAO,CAAC,MAAM;IAC/B,MAAMwB,SAAS,GAAG,CAAC,GAAGc,SAAS,CAAC;IAChC,IAAIE,YAAY,EAAE;MACdhB,SAAS,CAAC6C,IAAI,CAAC;QAAEC,WAAW,EAAE,eAAe;QAAEC,aAAa,EAAE,MAAM;QAAE,GAAG/B;MAAa,CAAC,CAAC;IAC5F;IACA,OAAOhB,SAAS;EACpB,CAAC,EAAE,CAACc,SAAS,EAAEE,YAAY,CAAC,CAAC;;EAE7B;EACAzC,SAAS,CAAC,MAAM;IACZ+C,eAAe,CAACsB,YAAY,CAAC;EACjC,CAAC,EAAE,CAACA,YAAY,EAAEtB,eAAe,CAAC,CAAC;EAEnC,oBACInC,OAAA;IAAA6D,QAAA,gBACI7D,OAAA;MAAA6D,QAAA,EAAI;IAAwD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGjEjE,OAAA;MAAA6D,QAAA,gBACI7D,OAAA;QAAA6D,QAAA,EAAI;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9BjE,OAAA;QAAQkE,OAAO,EAAEA,CAAA,KAAMtB,oBAAoB,CAAC,aAAa,CAAE;QAAAiB,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACpFjE,OAAA;QAAQkE,OAAO,EAAEA,CAAA,KAAMtB,oBAAoB,CAAC,QAAQ,CAAE;QAAAiB,QAAA,EAAC;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtF,CAAC,EAGLlC,cAAc,KAAK,QAAQ,iBACxB/B,OAAA;MAAA6D,QAAA,gBACI7D,OAAA;QACImE,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,oBAAoB;QAChCC,KAAK,EAAEpC,aAAc;QACrBqC,QAAQ,EAAGC,CAAC,IAAKrC,gBAAgB,CAACqC,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrD,CAAC,eACFjE,OAAA;QAAQkE,OAAO,EAAEpB,yBAA0B;QAAAe,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClE,CACR,eAGDjE,OAAA,CAACJ,UAAU;MAACgC,YAAY,EAAEA;IAAa;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAG1CjE,OAAA,CAACV,YAAY;MAACmF,MAAM,EAAE,CAAC,MAAM,EAAE,KAAK,CAAE;MAACC,IAAI,EAAE,CAAE;MAACC,eAAe,EAAE,KAAM;MAACC,KAAK,EAAE;QAAEC,MAAM,EAAE,GAAG;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAjB,QAAA,gBACzG7D,OAAA,CAACT,SAAS;QACNwF,WAAW,EAAC,yFAAyF;QACrGC,GAAG,EAAC;MAAoD;QAAAlB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3D,CAAC,eAEFjE,OAAA,CAACY,QAAQ;QAACC,SAAS,EAAE4C;MAAa;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAGpCtC,SAAS,CAACZ,GAAG,CAAC,CAACqC,IAAI,EAAE6B,KAAK,kBACvBjF,OAAA,CAACP,MAAM;QAEH+C,QAAQ,EAAE,CAACY,IAAI,CAAChC,QAAQ,EAAEgC,IAAI,CAAC/B,SAAS,CAAE;QAC1C6D,IAAI,EAAEjF,aAAa,CAACmD,IAAI,CAACQ,aAAa,EAAER,IAAI,CAAC+B,cAAc,CAAE;QAAAtB,QAAA,eAE7D7D,OAAA,CAACN,KAAK;UAAAmE,QAAA,gBACF7D,OAAA;YAAA6D,QAAA,EAAST,IAAI,CAACO;UAAW;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,eAAAjE,OAAA;YAAA8D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,UACnC,EAACb,IAAI,CAACgC,IAAI,EAAC,GAAC,eAAApF,OAAA;YAAA8D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,EACvBb,IAAI,CAAC+B,cAAc,GAAG,SAAS/B,IAAI,CAAC+B,cAAc,EAAE,GAAG,WAAW,eAACnF,OAAA;YAAA8D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvE;MAAC,GARHgB,KAAK;QAAAnB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASN,CACX,CAAC,EAGDpC,YAAY,iBACT7B,OAAA,CAACP,MAAM;QAAC+C,QAAQ,EAAE,CAACX,YAAY,CAACT,QAAQ,EAAES,YAAY,CAACR,SAAS,CAAE;QAAC6D,IAAI,EAAEjF,aAAa,CAAC,MAAM,EAAE,IAAI,CAAE;QAAA4D,QAAA,eACjG7D,OAAA,CAACN,KAAK;UAAAmE,QAAA,gBACF7D,OAAA;YAAA6D,QAAA,EAAQ;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAAAjE,OAAA;YAAA8D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,SAC/B,EAACpC,YAAY,CAACT,QAAQ,EAAC,SAAO,EAACS,YAAY,CAACR,SAAS;QAAA;UAAAyC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CACX,EAGApC,YAAY,IAAIF,SAAS,CAACZ,GAAG,CAAC,CAACqC,IAAI,EAAE6B,KAAK,kBACvCjF,OAAA,CAACL,QAAQ;QAEL0F,SAAS,EAAE,CAAC,CAACxD,YAAY,CAACT,QAAQ,EAAES,YAAY,CAACR,SAAS,CAAC,EAAE,CAAC+B,IAAI,CAAChC,QAAQ,EAAEgC,IAAI,CAAC/B,SAAS,CAAC,CAAE;QAC9FiE,KAAK,EAAE3E,UAAU,CAACsE,KAAK,GAAGtE,UAAU,CAACK,MAAM,CAAE;QAC7CuE,MAAM,EAAE;MAAE,GAHLN,KAAK;QAAAnB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIb,CACJ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEd,CAAC;AAACvC,GAAA,CAhJID,GAAG;EAAA,QAKuB3B,WAAW;AAAA;AAAA0F,GAAA,GALrC/D,GAAG;AAkJT,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAgE,GAAA;AAAAC,YAAA,CAAAjE,EAAA;AAAAiE,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}