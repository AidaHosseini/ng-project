{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\Analystics.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"./LocationContext\";\n// import axios from \"axios\";\n\n// // Function to get attributes from API\n// const getAttribute = async (IDs = []) => { \n//     try {\n//         console.log(`🔵 Sending request to: http://127.0.0.1:5000/search with IDs:`, IDs);\n\n//         const response = await axios.get(\"http://127.0.0.1:5000/search\", {\n//             params: { ID: IDs },\n//         });\n\n//         console.log(\"✅ API Response Received:\", response.data);\n//         return response.data; // Return data instead of setting state here\n//     } catch (error) {\n//         console.error(\"❌ API Error:\", error);\n//         return {}; // Return empty object on failure\n//     }\n// };\n\n// // Function to get road distance from OSRM API\n// const getRoadDistance = async (lat1, lon1, lat2, lon2) => {\n//     const url = `https://router.project-osrm.org/route/v1/driving/${lon1},${lat1};${lon2},${lat2}?overview=false`;\n\n//     try {\n//         const response = await fetch(url);\n//         const data = await response.json();\n//         if (data.routes && data.routes.length > 0) {\n//             return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\n//         } else {\n//             return \"N/A\";\n//         }\n//     } catch (error) {\n//         console.error(\"Error fetching road distance:\", error);\n//         return \"N/A\";\n//     }\n// };\n\n// const Analystics = () => {\n//     const { allLocations } = useLocation();\n//     const [distances, setDistances] = useState({});\n//     const [attributes, setAttributes] = useState({});\n\n//     // Find the user's location (if available)\n//     const userLocation = allLocations.find(loc => loc.clinic_name === \"Your Location\");\n\n//     // Fetch attributes for all clinics\n//     useEffect(() => {\n//         const fetchAttributes = async () => {\n//             if (allLocations.length > 0) {\n//                 const IDs = allLocations.map(loc => loc.clinic_id);\n//                 const attributeData = await getAttribute(IDs);\n//                 setAttributes(attributeData); // Update state with fetched data\n//             }\n//         };\n\n//         fetchAttributes();\n//     }, [allLocations]);\n\n//     // Fetch road distances between the user's location and all other clinics\n//     useEffect(() => {\n//         const fetchDistances = async () => {\n//             if (!userLocation) return;\n\n//             const newDistances = {};\n//             for (const location of allLocations) {\n//                 if (location.clinic_name === \"Your Location\") continue;\n\n//                 const roadDistance = await getRoadDistance(\n//                     userLocation.latitude, userLocation.longitude,\n//                     location.latitude, location.longitude\n//                 );\n\n//                 newDistances[location.clinic_name] = roadDistance;\n//             }\n\n//             setDistances(newDistances);\n//         };\n\n//         fetchDistances();\n//     }, [userLocation, allLocations]);\n\n//     return (\n//         <div>\n//             <h3>Analystic Data</h3>\n//             {allLocations.length > 0 ? (\n//                 <ul>\n//                     {allLocations.map((location, index) => {\n//                         if (location.clinic_name === \"Your Location\") return null;\n\n//                         return (\n//                             <li key={index}>\n//                                 {location.clinic_name} \n//                                 <br />\n//                                 Road Distance: {distances[location.clinic_name] || \"Calculating...\"} km\n//                                 <br />\n//                                 Attributes: {JSON.stringify(attributes[location.clinic_id] || \"Loading...\")}\n//                             </li>\n//                         );\n//                     })}\n//                 </ul>\n//             ) : (\n//                 <p>No data available.</p>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default Analystics;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"./LocationContext\";\nimport axios from \"axios\";\n\n// Function to get attributes from API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getAttribute = async (IDs = []) => {\n  try {\n    console.log(`🔵 Sending request to: http://127.0.0.1:5000/search with IDs:`, IDs);\n    const response = await axios.get(\"http://127.0.0.1:5000/search\", {\n      params: {\n        ID: IDs\n      }\n    });\n    console.log(\"✅ API Response Received:\", response.data);\n    return response.data; // Return data instead of setting state here\n  } catch (error) {\n    console.error(\"❌ API Error:\", error);\n    return {}; // Return empty object on failure\n  }\n};\n\n// Function to get road distance from OSRM API\nconst getRoadDistance = async (lat1, lon1, lat2, lon2) => {\n  const url = `https://router.project-osrm.org/route/v1/driving/${lon1},${lat1};${lon2},${lat2}?overview=false`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    if (data.routes && data.routes.length > 0) {\n      return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\n    } else {\n      return \"N/A\";\n    }\n  } catch (error) {\n    console.error(\"Error fetching road distance:\", error);\n    return \"N/A\";\n  }\n};\nconst Analystics = () => {\n  _s();\n  const {\n    allLocations\n  } = useLocation();\n  const [distances, setDistances] = useState({});\n  const [attributes, setAttributes] = useState({});\n\n  // Find the user's location (if available)\n  const userLocation = allLocations.find(loc => loc.clinic_name === \"Your Location\");\n\n  // Fetch attributes for all clinics\n  useEffect(() => {\n    const fetchAttributes = async () => {\n      if (allLocations.length > 0) {\n        const IDs = allLocations.map(loc => loc.clinic_id);\n        const attributeData = await getAttribute(IDs);\n        setAttributes(attributeData); // Update state with fetched data\n      }\n    };\n    fetchAttributes();\n  }, [allLocations]);\n\n  // Fetch road distances between the user's location and all other clinics\n  useEffect(() => {\n    const fetchDistances = async () => {\n      if (!userLocation) return;\n      const newDistances = {};\n      for (const location of allLocations) {\n        if (location.clinic_name === \"Your Location\") continue;\n        const roadDistance = await getRoadDistance(userLocation.latitude, userLocation.longitude, location.latitude, location.longitude);\n        newDistances[location.clinic_name] = roadDistance;\n      }\n      setDistances(newDistances);\n    };\n    fetchDistances();\n  }, [userLocation, allLocations]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: styles.title,\n      children: \"Analystic Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this), allLocations.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: styles.list,\n      children: allLocations.map((location, index) => {\n        if (location.clinic_name === \"Your Location\") return null;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          style: styles.listItem,\n          children: [location.clinic_name, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 33\n          }, this), \"Road Distance: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: styles.bold,\n            children: [distances[location.clinic_name] || \"Calculating...\", \" km\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 48\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 33\n          }, this), \"Attributes: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: styles.bold,\n            children: JSON.stringify(attributes[location.clinic_id] || \"Loading...\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 45\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      style: styles.noData,\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 9\n  }, this);\n};\n\n// CSS-in-JS styles\n_s(Analystics, \"zSHetwml4403Z0yTdVhv8+7CXz8=\", false, function () {\n  return [useLocation];\n});\n_c = Analystics;\nconst styles = {\n  container: {\n    width: \"50%\",\n    fontWeight: \"600\",\n    position: \"absolute\",\n    right: 0,\n    top: \"100px\",\n    padding: \"20px\",\n    backgroundColor: \"#f9f9f9\",\n    boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.1)\",\n    borderRadius: \"8px\"\n  },\n  title: {\n    fontSize: \"20px\",\n    marginBottom: \"10px\"\n  },\n  list: {\n    listStyleType: \"none\",\n    padding: 0\n  },\n  listItem: {\n    marginBottom: \"10px\",\n    padding: \"10px\",\n    borderBottom: \"1px solid #ddd\"\n  },\n  bold: {\n    fontWeight: \"600\"\n  },\n  noData: {\n    fontStyle: \"italic\",\n    color: \"#999\"\n  }\n};\nexport default Analystics;\nvar _c;\n$RefreshReg$(_c, \"Analystics\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","axios","jsxDEV","_jsxDEV","getAttribute","IDs","console","log","response","get","params","ID","data","error","getRoadDistance","lat1","lon1","lat2","lon2","url","fetch","json","routes","length","distance","toFixed","Analystics","_s","allLocations","distances","setDistances","attributes","setAttributes","userLocation","find","loc","clinic_name","fetchAttributes","map","clinic_id","attributeData","fetchDistances","newDistances","location","roadDistance","latitude","longitude","style","styles","container","children","title","fileName","_jsxFileName","lineNumber","columnNumber","list","index","listItem","bold","JSON","stringify","noData","_c","width","fontWeight","position","right","top","padding","backgroundColor","boxShadow","borderRadius","fontSize","marginBottom","listStyleType","borderBottom","fontStyle","color","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/Analystics.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"./LocationContext\";\r\n// import axios from \"axios\";\r\n\r\n// // Function to get attributes from API\r\n// const getAttribute = async (IDs = []) => { \r\n//     try {\r\n//         console.log(`🔵 Sending request to: http://127.0.0.1:5000/search with IDs:`, IDs);\r\n\r\n//         const response = await axios.get(\"http://127.0.0.1:5000/search\", {\r\n//             params: { ID: IDs },\r\n//         });\r\n\r\n//         console.log(\"✅ API Response Received:\", response.data);\r\n//         return response.data; // Return data instead of setting state here\r\n//     } catch (error) {\r\n//         console.error(\"❌ API Error:\", error);\r\n//         return {}; // Return empty object on failure\r\n//     }\r\n// };\r\n\r\n// // Function to get road distance from OSRM API\r\n// const getRoadDistance = async (lat1, lon1, lat2, lon2) => {\r\n//     const url = `https://router.project-osrm.org/route/v1/driving/${lon1},${lat1};${lon2},${lat2}?overview=false`;\r\n\r\n//     try {\r\n//         const response = await fetch(url);\r\n//         const data = await response.json();\r\n//         if (data.routes && data.routes.length > 0) {\r\n//             return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\r\n//         } else {\r\n//             return \"N/A\";\r\n//         }\r\n//     } catch (error) {\r\n//         console.error(\"Error fetching road distance:\", error);\r\n//         return \"N/A\";\r\n//     }\r\n// };\r\n\r\n// const Analystics = () => {\r\n//     const { allLocations } = useLocation();\r\n//     const [distances, setDistances] = useState({});\r\n//     const [attributes, setAttributes] = useState({});\r\n\r\n//     // Find the user's location (if available)\r\n//     const userLocation = allLocations.find(loc => loc.clinic_name === \"Your Location\");\r\n\r\n//     // Fetch attributes for all clinics\r\n//     useEffect(() => {\r\n//         const fetchAttributes = async () => {\r\n//             if (allLocations.length > 0) {\r\n//                 const IDs = allLocations.map(loc => loc.clinic_id);\r\n//                 const attributeData = await getAttribute(IDs);\r\n//                 setAttributes(attributeData); // Update state with fetched data\r\n//             }\r\n//         };\r\n\r\n//         fetchAttributes();\r\n//     }, [allLocations]);\r\n\r\n//     // Fetch road distances between the user's location and all other clinics\r\n//     useEffect(() => {\r\n//         const fetchDistances = async () => {\r\n//             if (!userLocation) return;\r\n\r\n//             const newDistances = {};\r\n//             for (const location of allLocations) {\r\n//                 if (location.clinic_name === \"Your Location\") continue;\r\n\r\n//                 const roadDistance = await getRoadDistance(\r\n//                     userLocation.latitude, userLocation.longitude,\r\n//                     location.latitude, location.longitude\r\n//                 );\r\n\r\n//                 newDistances[location.clinic_name] = roadDistance;\r\n//             }\r\n\r\n//             setDistances(newDistances);\r\n//         };\r\n\r\n//         fetchDistances();\r\n//     }, [userLocation, allLocations]);\r\n\r\n//     return (\r\n//         <div>\r\n//             <h3>Analystic Data</h3>\r\n//             {allLocations.length > 0 ? (\r\n//                 <ul>\r\n//                     {allLocations.map((location, index) => {\r\n//                         if (location.clinic_name === \"Your Location\") return null;\r\n\r\n//                         return (\r\n//                             <li key={index}>\r\n//                                 {location.clinic_name} \r\n//                                 <br />\r\n//                                 Road Distance: {distances[location.clinic_name] || \"Calculating...\"} km\r\n//                                 <br />\r\n//                                 Attributes: {JSON.stringify(attributes[location.clinic_id] || \"Loading...\")}\r\n//                             </li>\r\n//                         );\r\n//                     })}\r\n//                 </ul>\r\n//             ) : (\r\n//                 <p>No data available.</p>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Analystics;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"./LocationContext\";\r\nimport axios from \"axios\";\r\n\r\n// Function to get attributes from API\r\nconst getAttribute = async (IDs = []) => { \r\n    try {\r\n        console.log(`🔵 Sending request to: http://127.0.0.1:5000/search with IDs:`, IDs);\r\n\r\n        const response = await axios.get(\"http://127.0.0.1:5000/search\", {\r\n            params: { ID: IDs },\r\n        });\r\n\r\n        console.log(\"✅ API Response Received:\", response.data);\r\n        return response.data; // Return data instead of setting state here\r\n    } catch (error) {\r\n        console.error(\"❌ API Error:\", error);\r\n        return {}; // Return empty object on failure\r\n    }\r\n};\r\n\r\n// Function to get road distance from OSRM API\r\nconst getRoadDistance = async (lat1, lon1, lat2, lon2) => {\r\n    const url = `https://router.project-osrm.org/route/v1/driving/${lon1},${lat1};${lon2},${lat2}?overview=false`;\r\n\r\n    try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        if (data.routes && data.routes.length > 0) {\r\n            return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\r\n        } else {\r\n            return \"N/A\";\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error fetching road distance:\", error);\r\n        return \"N/A\";\r\n    }\r\n};\r\n\r\nconst Analystics = () => {\r\n    const { allLocations } = useLocation();\r\n    const [distances, setDistances] = useState({});\r\n    const [attributes, setAttributes] = useState({});\r\n\r\n    // Find the user's location (if available)\r\n    const userLocation = allLocations.find(loc => loc.clinic_name === \"Your Location\");\r\n\r\n    // Fetch attributes for all clinics\r\n    useEffect(() => {\r\n        const fetchAttributes = async () => {\r\n            if (allLocations.length > 0) {\r\n                const IDs = allLocations.map(loc => loc.clinic_id);\r\n                const attributeData = await getAttribute(IDs);\r\n                setAttributes(attributeData); // Update state with fetched data\r\n            }\r\n        };\r\n\r\n        fetchAttributes();\r\n    }, [allLocations]);\r\n\r\n    // Fetch road distances between the user's location and all other clinics\r\n    useEffect(() => {\r\n        const fetchDistances = async () => {\r\n            if (!userLocation) return;\r\n\r\n            const newDistances = {};\r\n            for (const location of allLocations) {\r\n                if (location.clinic_name === \"Your Location\") continue;\r\n\r\n                const roadDistance = await getRoadDistance(\r\n                    userLocation.latitude, userLocation.longitude,\r\n                    location.latitude, location.longitude\r\n                );\r\n\r\n                newDistances[location.clinic_name] = roadDistance;\r\n            }\r\n\r\n            setDistances(newDistances);\r\n        };\r\n\r\n        fetchDistances();\r\n    }, [userLocation, allLocations]);\r\n\r\n    return (\r\n        <div style={styles.container}>\r\n            <h3 style={styles.title}>Analystic Data</h3>\r\n            {allLocations.length > 0 ? (\r\n                <ul style={styles.list}>\r\n                    {allLocations.map((location, index) => {\r\n                        if (location.clinic_name === \"Your Location\") return null;\r\n\r\n                        return (\r\n                            <li key={index} style={styles.listItem}>\r\n                                {location.clinic_name} \r\n                                <br />\r\n                                Road Distance: <span style={styles.bold}>{distances[location.clinic_name] || \"Calculating...\"} km</span>\r\n                                <br />\r\n                                Attributes: <span style={styles.bold}>{JSON.stringify(attributes[location.clinic_id] || \"Loading...\")}</span>\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            ) : (\r\n                <p style={styles.noData}>No data available.</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n// CSS-in-JS styles\r\nconst styles = {\r\n    container: {\r\n        width: \"50%\",\r\n        fontWeight: \"600\",\r\n        position: \"absolute\",\r\n        right: 0,\r\n        top: \"100px\",\r\n        padding: \"20px\",\r\n        backgroundColor: \"#f9f9f9\",\r\n        boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.1)\",\r\n        borderRadius: \"8px\"\r\n    },\r\n    title: {\r\n        fontSize: \"20px\",\r\n        marginBottom: \"10px\"\r\n    },\r\n    list: {\r\n        listStyleType: \"none\",\r\n        padding: 0\r\n    },\r\n    listItem: {\r\n        marginBottom: \"10px\",\r\n        padding: \"10px\",\r\n        borderBottom: \"1px solid #ddd\"\r\n    },\r\n    bold: {\r\n        fontWeight: \"600\"\r\n    },\r\n    noData: {\r\n        fontStyle: \"italic\",\r\n        color: \"#999\"\r\n    }\r\n};\r\n\r\nexport default Analystics;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}