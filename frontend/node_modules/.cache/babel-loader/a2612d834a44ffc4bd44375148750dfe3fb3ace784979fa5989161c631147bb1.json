{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\map.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useState, useEffect, useMemo } from \"react\";\n// import { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\n// import 'leaflet/dist/leaflet.css';\n// import SearchForm from \"./SearchForm\";\n// import L from \"leaflet\";\n// import { useLocation } from \"./LocationContext\";\n\n// // ðŸŽ¯ Predefined colors for clinics, MVZ, ASV\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"black\", \"brown\"];\n\n// // ðŸŸ¢ Custom icons for different provider types\n// const userIcon = L.icon({\n//     iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\", // Unique user icon\n//     iconSize: [35, 35],\n//     iconAnchor: [17, 35]\n// });\n\n// // ðŸŽ¯ Function to create color-matched clinic icons\n// const getColoredClinicIcon = (color) => {\n//     return L.divIcon({\n//         className: \"custom-clinic-marker\",\n//         html: `<div style=\"\n//             width: 30px; height: 30px; \n//             background-color: ${color}; \n//             border-radius: 50%; \n//             border: 2px solid black;\n//             display: flex; justify-content: center; align-items: center;\">\n//         </div>`,\n//         iconSize: [30, 30],\n//         iconAnchor: [15, 30]\n//     });\n// };\n\n// const Map = () => {\n//     const [graphData, setGraphData] = useState([]);\n//     const [userLocation, setUserLocation] = useState(null);\n//     const [locationChoice, setLocationChoice] = useState(\"\"); \n//     const [manualAddress, setManualAddress] = useState(\"\"); \n//     const { setAllLocations } = useLocation();\n\n//     // ðŸš€ Get user's current location\n//     const fetchMyLocation = () => {\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition(\n//                 (position) => {\n//                     setUserLocation({\n//                         latitude: position.coords.latitude,\n//                         longitude: position.coords.longitude\n//                     });\n//                 },\n//                 (error) => {\n//                     console.error(\"Error getting location:\", error);\n//                 }\n//             );\n//         }\n//     };\n\n//     // ðŸŽ¯ Handle location selection\n//     const handleLocationChoice = (choice) => {\n//         setLocationChoice(choice);\n//         setUserLocation(null);\n//         setManualAddress(\"\"); \n//         if (choice === \"my-location\") {\n//             fetchMyLocation();\n//         }\n//     };\n\n//     // ðŸŽ¯ Convert address to latitude & longitude using OpenStreetMap's Nominatim API\n//     const handleManualAddressSearch = async () => {\n//         if (!manualAddress.trim()) {\n//             alert(\"Please enter a valid address.\");\n//             return;\n//         }\n//         try {\n//             const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n//             const data = await response.json();\n//             if (data.length > 0) {\n//                 setUserLocation({\n//                     latitude: parseFloat(data[0].lat),\n//                     longitude: parseFloat(data[0].lon)\n//                 });\n//             } else {\n//                 alert(\"Address not found. Please enter a more precise location.\");\n//             }\n//         } catch (error) {\n//             console.error(\"Error fetching geolocation:\", error);\n//             alert(\"Failed to fetch location. Try again later.\");\n//         }\n//     };\n\n//     // âœ… UseMemo to prevent unnecessary re-renders\n//     const allLocations = useMemo(() => {\n//         const locations = [...graphData];\n//         if (userLocation) {\n//             locations.push({ clinic_name: \"Your Location\", provider_type: \"User\", ...userLocation });\n//         }\n//         return locations;\n//     }, [graphData, userLocation]);\n\n//     // âœ… Update locations when changed\n//     useEffect(() => {\n//         setAllLocations(allLocations);\n//     }, [allLocations, setAllLocations]);\n\n//     return (\n//         <div>\n//             <h1>New Ways of Care Provision and Analysis of Patient Flows</h1>\n//             <div>\n//                 <h3>Select Your Location:</h3>\n//                 <button onClick={() => handleLocationChoice(\"my-location\")}>Use My Location</button>\n//                 <button onClick={() => handleLocationChoice(\"manual\")}>Enter Location Manually</button>\n//             </div>\n\n//             {locationChoice === \"manual\" && (\n//                 <div>\n//                     <input \n//                         type=\"text\" \n//                         placeholder=\"Enter your address\" \n//                         value={manualAddress} \n//                         onChange={(e) => setManualAddress(e.target.value)}\n//                     />\n//                     <button onClick={handleManualAddressSearch}>Search Address</button>\n//                 </div>\n//             )}\n\n//             <SearchForm setGraphData={setGraphData} />\n\n//             <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: 500, width: \"60%\" }}>\n//                 <TileLayer\n//                     attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n//                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//                 />\n\n//                 {/* ðŸŽ¯ Draw user location marker */}\n//                 {userLocation && (\n//                     <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\n//                         <Popup><strong>Your Location</strong></Popup>\n//                     </Marker>\n//                 )}\n\n//                 {/* ðŸŽ¯ Draw clinic markers with color-matched icons */}\n//                 {graphData.map((data, index) => {\n//                     const color = lineColors[index % lineColors.length]; // Match line & marker color\n//                     return (\n//                         <Marker key={index} position={[data.latitude, data.longitude]} icon={getColoredClinicIcon(color)}>\n//                             <Popup>\n//                                 <strong>{data.clinic_name}</strong><br />\n//                                 City: {data.city} <br />\n//                                 Beds: {data.number_of_beds} <br />\n//                                 Address: {data.address || \"N/A\"}\n//                             </Popup>\n//                         </Marker>\n//                     );\n//                 })}\n\n//                 {/* ðŸŽ¯ Draw lines from user location to each clinic */}\n//                 {userLocation && graphData.map((data, index) => {\n//                     const color = lineColors[index % lineColors.length]; // Match line color\n//                     return (\n//                         <Polyline \n//                             key={index} \n//                             positions={[\n//                                 [userLocation.latitude, userLocation.longitude], \n//                                 [data.latitude, data.longitude]\n//                             ]} \n//                             color={color} \n//                             weight={3} \n//                         />\n//                     );\n//                 })}\n//             </MapContainer>\n//         </div>\n//     );\n// };\n\n// export default Map;\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport SearchForm from \"./SearchForm\";\nimport L from \"leaflet\";\nimport { useLocation } from \"./LocationContext\";\n\n// Predefined colors for different clinics\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"black\"];\n\n// Auto-zoom component\nconst AutoZoom = ({\n  locations\n}) => {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (locations.length > 0) {\n      const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\n      map.fitBounds(bounds, {\n        padding: [50, 50]\n      });\n    }\n  }, [locations, map]);\n  return null;\n};\n_s(AutoZoom, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = AutoZoom;\nconst Map = () => {\n  _s2();\n  const [graphData, setGraphData] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const [locationChoice, setLocationChoice] = useState(\"\");\n  const [manualAddress, setManualAddress] = useState(\"\");\n  const {\n    setAllLocations\n  } = useLocation();\n\n  // Fetch user location\n  const fetchMyLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setUserLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      }, error => {\n        console.error(\"Error getting location:\", error);\n      });\n    }\n  };\n\n  // Handle user location choice\n  const handleLocationChoice = choice => {\n    setLocationChoice(choice);\n    setUserLocation(null);\n    setManualAddress(\"\");\n    if (choice === \"my-location\") {\n      fetchMyLocation();\n    }\n  };\n\n  // Convert address to lat/lon using OpenStreetMap API\n  const handleManualAddressSearch = async () => {\n    if (!manualAddress.trim()) {\n      alert(\"Please enter a valid address.\");\n      return;\n    }\n    try {\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n      const data = await response.json();\n      if (data.length > 0) {\n        setUserLocation({\n          latitude: parseFloat(data[0].lat),\n          longitude: parseFloat(data[0].lon)\n        });\n      } else {\n        alert(\"Address not found. Please enter a more precise location.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching geolocation:\", error);\n      alert(\"Failed to fetch location. Try again later.\");\n    }\n  };\n\n  // Create color mapping for each clinic\n  const assignedColors = useMemo(() => {\n    let mapping = {};\n    graphData.forEach((clinic, index) => {\n      mapping[clinic.clinic_name] = lineColors[index % lineColors.length];\n    });\n    return mapping;\n  }, [graphData]);\n\n  // Determine icon size based on the number of beds\n  const minBeds = Math.min(...graphData.map(c => c.number_of_beds), 50);\n  const maxBeds = Math.max(...graphData.map(c => c.number_of_beds), 500);\n  const getIconSize = beds => {\n    if (!beds) return [35, 35]; // Default size for MVZ or unknown beds\n    const scale = 35 + (beds - minBeds) / (maxBeds - minBeds) * 20;\n    return [scale, scale];\n  };\n\n  // Generate location list\n  const allLocations = useMemo(() => {\n    const locations = [...graphData];\n    if (userLocation) {\n      locations.push({\n        clinic_name: \"Your Location\",\n        ...userLocation\n      });\n    }\n    return locations;\n  }, [graphData, userLocation]);\n  useEffect(() => {\n    setAllLocations(allLocations);\n  }, [allLocations, setAllLocations]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"New Ways of Care Provision and Analysis of Patient Flows\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Your Location:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleLocationChoice(\"my-location\"),\n        children: \"Use My Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleLocationChoice(\"manual\"),\n        children: \"Enter Location Manually\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }, this), locationChoice === \"manual\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your address\",\n        value: manualAddress,\n        onChange: e => setManualAddress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleManualAddressSearch,\n        children: \"Search Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      setGraphData: setGraphData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [50.851, 8.015],\n      zoom: 8,\n      scrollWheelZoom: false,\n      style: {\n        height: 500,\n        width: \"60%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AutoZoom, {\n        locations: allLocations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 17\n      }, this), graphData.map((data, index) => {\n        const iconSize = getIconSize(data.number_of_beds);\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: [data.latitude, data.longitude],\n          icon: new L.Icon({\n            iconUrl: `https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/Simple_red_dot.svg/512px-Simple_red_dot.svg.png`,\n            iconSize: iconSize,\n            iconAnchor: [iconSize[0] / 2, iconSize[1] / 2]\n          }),\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: data.clinic_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 68\n            }, this), \"City: \", data.city, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 51\n            }, this), \"Number of Beds: \", data.number_of_beds]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 25\n        }, this);\n      }), userLocation && /*#__PURE__*/_jsxDEV(Marker, {\n        position: [userLocation.latitude, userLocation.longitude],\n        icon: new L.Icon({\n          iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\n          iconSize: [30, 30],\n          iconAnchor: [15, 30]\n        }),\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Your Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 32\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 21\n      }, this), userLocation && graphData.map((data, index) => /*#__PURE__*/_jsxDEV(Polyline, {\n        positions: [[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]],\n        color: assignedColors[data.clinic_name],\n        weight: 3\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"analytics-panel\",\n      style: {\n        marginTop: \"20px\",\n        padding: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Leistungserbringer Informationen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 17\n      }, this), graphData.map((data, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"5px\",\n          borderBottom: \"1px solid #ddd\",\n          display: \"flex\",\n          alignItems: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"10px\",\n            height: \"10px\",\n            backgroundColor: assignedColors[data.clinic_name] || \"gray\",\n            borderRadius: \"50%\",\n            marginRight: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: data.clinic_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 29\n          }, this), \" - \", data.city, \" (Beds: \", data.number_of_beds, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 9\n  }, this);\n};\n_s2(Map, \"bKaiZwi5DnJx5Z71s9ekUGuSagI=\", false, function () {\n  return [useLocation];\n});\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"AutoZoom\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","MapContainer","TileLayer","useMap","Marker","Popup","Polyline","SearchForm","L","useLocation","jsxDEV","_jsxDEV","lineColors","AutoZoom","locations","_s","map","length","bounds","latLngBounds","loc","latitude","longitude","fitBounds","padding","_c","Map","_s2","graphData","setGraphData","userLocation","setUserLocation","locationChoice","setLocationChoice","manualAddress","setManualAddress","setAllLocations","fetchMyLocation","navigator","geolocation","getCurrentPosition","position","coords","error","console","handleLocationChoice","choice","handleManualAddressSearch","trim","alert","response","fetch","encodeURIComponent","data","json","parseFloat","lat","lon","assignedColors","mapping","forEach","clinic","index","clinic_name","minBeds","Math","min","c","number_of_beds","maxBeds","max","getIconSize","beds","scale","allLocations","push","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","e","target","center","zoom","scrollWheelZoom","style","height","width","attribution","url","iconSize","icon","Icon","iconUrl","iconAnchor","city","positions","color","weight","className","marginTop","borderBottom","display","alignItems","backgroundColor","borderRadius","marginRight","_c2","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/map.js"],"sourcesContent":["// import React, { useState, useEffect, useMemo } from \"react\";\r\n// import { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\r\n// import 'leaflet/dist/leaflet.css';\r\n// import SearchForm from \"./SearchForm\";\r\n// import L from \"leaflet\";\r\n// import { useLocation } from \"./LocationContext\";\r\n\r\n// // ðŸŽ¯ Predefined colors for clinics, MVZ, ASV\r\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"black\", \"brown\"];\r\n\r\n// // ðŸŸ¢ Custom icons for different provider types\r\n// const userIcon = L.icon({\r\n//     iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\", // Unique user icon\r\n//     iconSize: [35, 35],\r\n//     iconAnchor: [17, 35]\r\n// });\r\n\r\n// // ðŸŽ¯ Function to create color-matched clinic icons\r\n// const getColoredClinicIcon = (color) => {\r\n//     return L.divIcon({\r\n//         className: \"custom-clinic-marker\",\r\n//         html: `<div style=\"\r\n//             width: 30px; height: 30px; \r\n//             background-color: ${color}; \r\n//             border-radius: 50%; \r\n//             border: 2px solid black;\r\n//             display: flex; justify-content: center; align-items: center;\">\r\n//         </div>`,\r\n//         iconSize: [30, 30],\r\n//         iconAnchor: [15, 30]\r\n//     });\r\n// };\r\n\r\n// const Map = () => {\r\n//     const [graphData, setGraphData] = useState([]);\r\n//     const [userLocation, setUserLocation] = useState(null);\r\n//     const [locationChoice, setLocationChoice] = useState(\"\"); \r\n//     const [manualAddress, setManualAddress] = useState(\"\"); \r\n//     const { setAllLocations } = useLocation();\r\n\r\n//     // ðŸš€ Get user's current location\r\n//     const fetchMyLocation = () => {\r\n//         if (navigator.geolocation) {\r\n//             navigator.geolocation.getCurrentPosition(\r\n//                 (position) => {\r\n//                     setUserLocation({\r\n//                         latitude: position.coords.latitude,\r\n//                         longitude: position.coords.longitude\r\n//                     });\r\n//                 },\r\n//                 (error) => {\r\n//                     console.error(\"Error getting location:\", error);\r\n//                 }\r\n//             );\r\n//         }\r\n//     };\r\n\r\n//     // ðŸŽ¯ Handle location selection\r\n//     const handleLocationChoice = (choice) => {\r\n//         setLocationChoice(choice);\r\n//         setUserLocation(null);\r\n//         setManualAddress(\"\"); \r\n//         if (choice === \"my-location\") {\r\n//             fetchMyLocation();\r\n//         }\r\n//     };\r\n\r\n//     // ðŸŽ¯ Convert address to latitude & longitude using OpenStreetMap's Nominatim API\r\n//     const handleManualAddressSearch = async () => {\r\n//         if (!manualAddress.trim()) {\r\n//             alert(\"Please enter a valid address.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\r\n//             const data = await response.json();\r\n//             if (data.length > 0) {\r\n//                 setUserLocation({\r\n//                     latitude: parseFloat(data[0].lat),\r\n//                     longitude: parseFloat(data[0].lon)\r\n//                 });\r\n//             } else {\r\n//                 alert(\"Address not found. Please enter a more precise location.\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error fetching geolocation:\", error);\r\n//             alert(\"Failed to fetch location. Try again later.\");\r\n//         }\r\n//     };\r\n\r\n//     // âœ… UseMemo to prevent unnecessary re-renders\r\n//     const allLocations = useMemo(() => {\r\n//         const locations = [...graphData];\r\n//         if (userLocation) {\r\n//             locations.push({ clinic_name: \"Your Location\", provider_type: \"User\", ...userLocation });\r\n//         }\r\n//         return locations;\r\n//     }, [graphData, userLocation]);\r\n\r\n//     // âœ… Update locations when changed\r\n//     useEffect(() => {\r\n//         setAllLocations(allLocations);\r\n//     }, [allLocations, setAllLocations]);\r\n\r\n//     return (\r\n//         <div>\r\n//             <h1>New Ways of Care Provision and Analysis of Patient Flows</h1>\r\n//             <div>\r\n//                 <h3>Select Your Location:</h3>\r\n//                 <button onClick={() => handleLocationChoice(\"my-location\")}>Use My Location</button>\r\n//                 <button onClick={() => handleLocationChoice(\"manual\")}>Enter Location Manually</button>\r\n//             </div>\r\n\r\n//             {locationChoice === \"manual\" && (\r\n//                 <div>\r\n//                     <input \r\n//                         type=\"text\" \r\n//                         placeholder=\"Enter your address\" \r\n//                         value={manualAddress} \r\n//                         onChange={(e) => setManualAddress(e.target.value)}\r\n//                     />\r\n//                     <button onClick={handleManualAddressSearch}>Search Address</button>\r\n//                 </div>\r\n//             )}\r\n\r\n//             <SearchForm setGraphData={setGraphData} />\r\n\r\n//             <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: 500, width: \"60%\" }}>\r\n//                 <TileLayer\r\n//                     attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n//                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n//                 />\r\n                \r\n//                 {/* ðŸŽ¯ Draw user location marker */}\r\n//                 {userLocation && (\r\n//                     <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\r\n//                         <Popup><strong>Your Location</strong></Popup>\r\n//                     </Marker>\r\n//                 )}\r\n\r\n//                 {/* ðŸŽ¯ Draw clinic markers with color-matched icons */}\r\n//                 {graphData.map((data, index) => {\r\n//                     const color = lineColors[index % lineColors.length]; // Match line & marker color\r\n//                     return (\r\n//                         <Marker key={index} position={[data.latitude, data.longitude]} icon={getColoredClinicIcon(color)}>\r\n//                             <Popup>\r\n//                                 <strong>{data.clinic_name}</strong><br />\r\n//                                 City: {data.city} <br />\r\n//                                 Beds: {data.number_of_beds} <br />\r\n//                                 Address: {data.address || \"N/A\"}\r\n//                             </Popup>\r\n//                         </Marker>\r\n//                     );\r\n//                 })}\r\n\r\n//                 {/* ðŸŽ¯ Draw lines from user location to each clinic */}\r\n//                 {userLocation && graphData.map((data, index) => {\r\n//                     const color = lineColors[index % lineColors.length]; // Match line color\r\n//                     return (\r\n//                         <Polyline \r\n//                             key={index} \r\n//                             positions={[\r\n//                                 [userLocation.latitude, userLocation.longitude], \r\n//                                 [data.latitude, data.longitude]\r\n//                             ]} \r\n//                             color={color} \r\n//                             weight={3} \r\n//                         />\r\n//                     );\r\n//                 })}\r\n//             </MapContainer>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Map;\r\n\r\nimport React, { useState, useEffect, useMemo } from \"react\";\r\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport SearchForm from \"./SearchForm\";\r\nimport L from \"leaflet\";\r\nimport { useLocation } from \"./LocationContext\";\r\n\r\n// Predefined colors for different clinics\r\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"black\"];\r\n\r\n// Auto-zoom component\r\nconst AutoZoom = ({ locations }) => {\r\n    const map = useMap();\r\n    useEffect(() => {\r\n        if (locations.length > 0) {\r\n            const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\r\n            map.fitBounds(bounds, { padding: [50, 50] });\r\n        }\r\n    }, [locations, map]);\r\n    return null;\r\n};\r\n\r\nconst Map = () => {\r\n    const [graphData, setGraphData] = useState([]);\r\n    const [userLocation, setUserLocation] = useState(null);\r\n    const [locationChoice, setLocationChoice] = useState(\"\");\r\n    const [manualAddress, setManualAddress] = useState(\"\");\r\n    const { setAllLocations } = useLocation();\r\n\r\n    // Fetch user location\r\n    const fetchMyLocation = () => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    setUserLocation({\r\n                        latitude: position.coords.latitude,\r\n                        longitude: position.coords.longitude\r\n                    });\r\n                },\r\n                (error) => {\r\n                    console.error(\"Error getting location:\", error);\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    // Handle user location choice\r\n    const handleLocationChoice = (choice) => {\r\n        setLocationChoice(choice);\r\n        setUserLocation(null);\r\n        setManualAddress(\"\");\r\n        if (choice === \"my-location\") {\r\n            fetchMyLocation();\r\n        }\r\n    };\r\n\r\n    // Convert address to lat/lon using OpenStreetMap API\r\n    const handleManualAddressSearch = async () => {\r\n        if (!manualAddress.trim()) {\r\n            alert(\"Please enter a valid address.\");\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\r\n            const data = await response.json();\r\n            if (data.length > 0) {\r\n                setUserLocation({\r\n                    latitude: parseFloat(data[0].lat),\r\n                    longitude: parseFloat(data[0].lon)\r\n                });\r\n            } else {\r\n                alert(\"Address not found. Please enter a more precise location.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching geolocation:\", error);\r\n            alert(\"Failed to fetch location. Try again later.\");\r\n        }\r\n    };\r\n\r\n    // Create color mapping for each clinic\r\n    const assignedColors = useMemo(() => {\r\n        let mapping = {};\r\n        graphData.forEach((clinic, index) => {\r\n            mapping[clinic.clinic_name] = lineColors[index % lineColors.length];\r\n        });\r\n        return mapping;\r\n    }, [graphData]);\r\n\r\n    // Determine icon size based on the number of beds\r\n    const minBeds = Math.min(...graphData.map(c => c.number_of_beds), 50);\r\n    const maxBeds = Math.max(...graphData.map(c => c.number_of_beds), 500);\r\n\r\n    const getIconSize = (beds) => {\r\n        if (!beds) return [35, 35]; // Default size for MVZ or unknown beds\r\n        const scale = 35 + ((beds - minBeds) / (maxBeds - minBeds)) * 20;\r\n        return [scale, scale];\r\n    };\r\n\r\n    // Generate location list\r\n    const allLocations = useMemo(() => {\r\n        const locations = [...graphData];\r\n        if (userLocation) {\r\n            locations.push({ clinic_name: \"Your Location\", ...userLocation });\r\n        }\r\n        return locations;\r\n    }, [graphData, userLocation]);\r\n\r\n    useEffect(() => {\r\n        setAllLocations(allLocations);\r\n    }, [allLocations, setAllLocations]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>New Ways of Care Provision and Analysis of Patient Flows</h1>\r\n\r\n            {/* Location Selection */}\r\n            <div>\r\n                <h3>Select Your Location:</h3>\r\n                <button onClick={() => handleLocationChoice(\"my-location\")}>Use My Location</button>\r\n                <button onClick={() => handleLocationChoice(\"manual\")}>Enter Location Manually</button>\r\n            </div>\r\n\r\n            {/* Manual Address Input */}\r\n            {locationChoice === \"manual\" && (\r\n                <div>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Enter your address\" \r\n                        value={manualAddress} \r\n                        onChange={(e) => setManualAddress(e.target.value)}\r\n                    />\r\n                    <button onClick={handleManualAddressSearch}>Search Address</button>\r\n                </div>\r\n            )}\r\n\r\n            <SearchForm setGraphData={setGraphData} />\r\n\r\n            {/* Map */}\r\n            <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: 500, width: \"60%\" }}>\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                <AutoZoom locations={allLocations} />\r\n\r\n                {/* Clinic Markers */}\r\n                {graphData.map((data, index) => {\r\n                    const iconSize = getIconSize(data.number_of_beds);\r\n                    return (\r\n                        <Marker key={index} position={[data.latitude, data.longitude]} \r\n                            icon={new L.Icon({\r\n                                iconUrl: `https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/Simple_red_dot.svg/512px-Simple_red_dot.svg.png`,\r\n                                iconSize: iconSize,\r\n                                iconAnchor: [iconSize[0] / 2, iconSize[1] / 2]\r\n                            })}\r\n                        >\r\n                            <Popup>\r\n                                <strong>{data.clinic_name}</strong><br />\r\n                                City: {data.city} <br />\r\n                                Number of Beds: {data.number_of_beds}\r\n                            </Popup>\r\n                        </Marker>\r\n                    );\r\n                })}\r\n\r\n                {/* User Location Marker */}\r\n                {userLocation && (\r\n                    <Marker position={[userLocation.latitude, userLocation.longitude]} \r\n                        icon={new L.Icon({\r\n                            iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\r\n                            iconSize: [30, 30],\r\n                            iconAnchor: [15, 30]\r\n                        })}\r\n                    >\r\n                        <Popup><strong>Your Location</strong></Popup>\r\n                    </Marker>\r\n                )}\r\n\r\n                {/* Draw lines from user location to clinics */}\r\n                {userLocation && graphData.map((data, index) => (\r\n                    <Polyline key={index} \r\n                        positions={[[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]]} \r\n                        color={assignedColors[data.clinic_name]} \r\n                        weight={3} \r\n                    />\r\n                ))}\r\n            </MapContainer>\r\n\r\n            {/* Analytics Panel */}\r\n            <div className=\"analytics-panel\" style={{ marginTop: \"20px\", padding: \"10px\" }}>\r\n                <h3>Leistungserbringer Informationen</h3>\r\n                {graphData.map((data, index) => (\r\n                    <div key={index} style={{ padding: \"5px\", borderBottom: \"1px solid #ddd\", display: \"flex\", alignItems: \"center\" }}>\r\n                        <div style={{\r\n                            width: \"10px\",\r\n                            height: \"10px\",\r\n                            backgroundColor: assignedColors[data.clinic_name] || \"gray\",\r\n                            borderRadius: \"50%\",\r\n                            marginRight: \"10px\"\r\n                        }}></div>\r\n                        <span>\r\n                            <strong>{data.clinic_name}</strong> - {data.city} (Beds: {data.number_of_beds})\r\n                        </span>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC3D,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AACxF,OAAO,0BAA0B;AACjC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,CAAC,MAAM,SAAS;AACvB,SAASC,WAAW,QAAQ,mBAAmB;;AAE/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC;;AAEhF;AACA,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAMC,GAAG,GAAGb,MAAM,CAAC,CAAC;EACpBJ,SAAS,CAAC,MAAM;IACZ,IAAIe,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;MACtB,MAAMC,MAAM,GAAGV,CAAC,CAACW,YAAY,CAACL,SAAS,CAACE,GAAG,CAACI,GAAG,IAAI,CAACA,GAAG,CAACC,QAAQ,EAAED,GAAG,CAACE,SAAS,CAAC,CAAC,CAAC;MAClFN,GAAG,CAACO,SAAS,CAACL,MAAM,EAAE;QAAEM,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE;MAAE,CAAC,CAAC;IAChD;EACJ,CAAC,EAAE,CAACV,SAAS,EAAEE,GAAG,CAAC,CAAC;EACpB,OAAO,IAAI;AACf,CAAC;AAACD,EAAA,CATIF,QAAQ;EAAA,QACEV,MAAM;AAAA;AAAAsB,EAAA,GADhBZ,QAAQ;AAWd,MAAMa,GAAG,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACd,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACgC,YAAY,EAAEC,eAAe,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACkC,cAAc,EAAEC,iBAAiB,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACoC,aAAa,EAAEC,gBAAgB,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM;IAAEsC;EAAgB,CAAC,GAAG3B,WAAW,CAAC,CAAC;;EAEzC;EACA,MAAM4B,eAAe,GAAGA,CAAA,KAAM;IAC1B,IAAIC,SAAS,CAACC,WAAW,EAAE;MACvBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACnCC,QAAQ,IAAK;QACVV,eAAe,CAAC;UACZV,QAAQ,EAAEoB,QAAQ,CAACC,MAAM,CAACrB,QAAQ;UAClCC,SAAS,EAAEmB,QAAQ,CAACC,MAAM,CAACpB;QAC/B,CAAC,CAAC;MACN,CAAC,EACAqB,KAAK,IAAK;QACPC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACnD,CACJ,CAAC;IACL;EACJ,CAAC;;EAED;EACA,MAAME,oBAAoB,GAAIC,MAAM,IAAK;IACrCb,iBAAiB,CAACa,MAAM,CAAC;IACzBf,eAAe,CAAC,IAAI,CAAC;IACrBI,gBAAgB,CAAC,EAAE,CAAC;IACpB,IAAIW,MAAM,KAAK,aAAa,EAAE;MAC1BT,eAAe,CAAC,CAAC;IACrB;EACJ,CAAC;;EAED;EACA,MAAMU,yBAAyB,GAAG,MAAAA,CAAA,KAAY;IAC1C,IAAI,CAACb,aAAa,CAACc,IAAI,CAAC,CAAC,EAAE;MACvBC,KAAK,CAAC,+BAA+B,CAAC;MACtC;IACJ;IACA,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4DAA4DC,kBAAkB,CAAClB,aAAa,CAAC,EAAE,CAAC;MAC7H,MAAMmB,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACpC,MAAM,GAAG,CAAC,EAAE;QACjBc,eAAe,CAAC;UACZV,QAAQ,EAAEkC,UAAU,CAACF,IAAI,CAAC,CAAC,CAAC,CAACG,GAAG,CAAC;UACjClC,SAAS,EAAEiC,UAAU,CAACF,IAAI,CAAC,CAAC,CAAC,CAACI,GAAG;QACrC,CAAC,CAAC;MACN,CAAC,MAAM;QACHR,KAAK,CAAC,0DAA0D,CAAC;MACrE;IACJ,CAAC,CAAC,OAAON,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDM,KAAK,CAAC,4CAA4C,CAAC;IACvD;EACJ,CAAC;;EAED;EACA,MAAMS,cAAc,GAAG1D,OAAO,CAAC,MAAM;IACjC,IAAI2D,OAAO,GAAG,CAAC,CAAC;IAChB/B,SAAS,CAACgC,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;MACjCH,OAAO,CAACE,MAAM,CAACE,WAAW,CAAC,GAAGnD,UAAU,CAACkD,KAAK,GAAGlD,UAAU,CAACK,MAAM,CAAC;IACvE,CAAC,CAAC;IACF,OAAO0C,OAAO;EAClB,CAAC,EAAE,CAAC/B,SAAS,CAAC,CAAC;;EAEf;EACA,MAAMoC,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGtC,SAAS,CAACZ,GAAG,CAACmD,CAAC,IAAIA,CAAC,CAACC,cAAc,CAAC,EAAE,EAAE,CAAC;EACrE,MAAMC,OAAO,GAAGJ,IAAI,CAACK,GAAG,CAAC,GAAG1C,SAAS,CAACZ,GAAG,CAACmD,CAAC,IAAIA,CAAC,CAACC,cAAc,CAAC,EAAE,GAAG,CAAC;EAEtE,MAAMG,WAAW,GAAIC,IAAI,IAAK;IAC1B,IAAI,CAACA,IAAI,EAAE,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;IAC5B,MAAMC,KAAK,GAAG,EAAE,GAAI,CAACD,IAAI,GAAGR,OAAO,KAAKK,OAAO,GAAGL,OAAO,CAAC,GAAI,EAAE;IAChE,OAAO,CAACS,KAAK,EAAEA,KAAK,CAAC;EACzB,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG1E,OAAO,CAAC,MAAM;IAC/B,MAAMc,SAAS,GAAG,CAAC,GAAGc,SAAS,CAAC;IAChC,IAAIE,YAAY,EAAE;MACdhB,SAAS,CAAC6D,IAAI,CAAC;QAAEZ,WAAW,EAAE,eAAe;QAAE,GAAGjC;MAAa,CAAC,CAAC;IACrE;IACA,OAAOhB,SAAS;EACpB,CAAC,EAAE,CAACc,SAAS,EAAEE,YAAY,CAAC,CAAC;EAE7B/B,SAAS,CAAC,MAAM;IACZqC,eAAe,CAACsC,YAAY,CAAC;EACjC,CAAC,EAAE,CAACA,YAAY,EAAEtC,eAAe,CAAC,CAAC;EAEnC,oBACIzB,OAAA;IAAAiE,QAAA,gBACIjE,OAAA;MAAAiE,QAAA,EAAI;IAAwD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGjErE,OAAA;MAAAiE,QAAA,gBACIjE,OAAA;QAAAiE,QAAA,EAAI;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9BrE,OAAA;QAAQsE,OAAO,EAAEA,CAAA,KAAMpC,oBAAoB,CAAC,aAAa,CAAE;QAAA+B,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACpFrE,OAAA;QAAQsE,OAAO,EAAEA,CAAA,KAAMpC,oBAAoB,CAAC,QAAQ,CAAE;QAAA+B,QAAA,EAAC;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtF,CAAC,EAGLhD,cAAc,KAAK,QAAQ,iBACxBrB,OAAA;MAAAiE,QAAA,gBACIjE,OAAA;QACIuE,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,oBAAoB;QAChCC,KAAK,EAAElD,aAAc;QACrBmD,QAAQ,EAAGC,CAAC,IAAKnD,gBAAgB,CAACmD,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrD,CAAC,eACFrE,OAAA;QAAQsE,OAAO,EAAElC,yBAA0B;QAAA6B,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClE,CACR,eAEDrE,OAAA,CAACJ,UAAU;MAACsB,YAAY,EAAEA;IAAa;MAAAgD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAG1CrE,OAAA,CAACV,YAAY;MAACuF,MAAM,EAAE,CAAC,MAAM,EAAE,KAAK,CAAE;MAACC,IAAI,EAAE,CAAE;MAACC,eAAe,EAAE,KAAM;MAACC,KAAK,EAAE;QAAEC,MAAM,EAAE,GAAG;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAjB,QAAA,gBACzGjE,OAAA,CAACT,SAAS;QACN4F,WAAW,EAAC,yFAAyF;QACrGC,GAAG,EAAC;MAAoD;QAAAlB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3D,CAAC,eACFrE,OAAA,CAACE,QAAQ;QAACC,SAAS,EAAE4D;MAAa;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAGpCpD,SAAS,CAACZ,GAAG,CAAC,CAACqC,IAAI,EAAES,KAAK,KAAK;QAC5B,MAAMkC,QAAQ,GAAGzB,WAAW,CAAClB,IAAI,CAACe,cAAc,CAAC;QACjD,oBACIzD,OAAA,CAACP,MAAM;UAAaqC,QAAQ,EAAE,CAACY,IAAI,CAAChC,QAAQ,EAAEgC,IAAI,CAAC/B,SAAS,CAAE;UAC1D2E,IAAI,EAAE,IAAIzF,CAAC,CAAC0F,IAAI,CAAC;YACbC,OAAO,EAAE,2GAA2G;YACpHH,QAAQ,EAAEA,QAAQ;YAClBI,UAAU,EAAE,CAACJ,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC;UACjD,CAAC,CAAE;UAAApB,QAAA,eAEHjE,OAAA,CAACN,KAAK;YAAAuE,QAAA,gBACFjE,OAAA;cAAAiE,QAAA,EAASvB,IAAI,CAACU;YAAW;cAAAc,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAS,CAAC,eAAArE,OAAA;cAAAkE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,UACnC,EAAC3B,IAAI,CAACgD,IAAI,EAAC,GAAC,eAAA1F,OAAA;cAAAkE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,oBACR,EAAC3B,IAAI,CAACe,cAAc;UAAA;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjC;QAAC,GAXClB,KAAK;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAYV,CAAC;MAEjB,CAAC,CAAC,EAGDlD,YAAY,iBACTnB,OAAA,CAACP,MAAM;QAACqC,QAAQ,EAAE,CAACX,YAAY,CAACT,QAAQ,EAAES,YAAY,CAACR,SAAS,CAAE;QAC9D2E,IAAI,EAAE,IAAIzF,CAAC,CAAC0F,IAAI,CAAC;UACbC,OAAO,EAAE,uDAAuD;UAChEH,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;UAClBI,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE;QACvB,CAAC,CAAE;QAAAxB,QAAA,eAEHjE,OAAA,CAACN,KAAK;UAAAuE,QAAA,eAACjE,OAAA;YAAAiE,QAAA,EAAQ;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CACX,EAGAlD,YAAY,IAAIF,SAAS,CAACZ,GAAG,CAAC,CAACqC,IAAI,EAAES,KAAK,kBACvCnD,OAAA,CAACL,QAAQ;QACLgG,SAAS,EAAE,CAAC,CAACxE,YAAY,CAACT,QAAQ,EAAES,YAAY,CAACR,SAAS,CAAC,EAAE,CAAC+B,IAAI,CAAChC,QAAQ,EAAEgC,IAAI,CAAC/B,SAAS,CAAC,CAAE;QAC9FiF,KAAK,EAAE7C,cAAc,CAACL,IAAI,CAACU,WAAW,CAAE;QACxCyC,MAAM,EAAE;MAAE,GAHC1C,KAAK;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAInB,CACJ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACQ,CAAC,eAGfrE,OAAA;MAAK8F,SAAS,EAAC,iBAAiB;MAACd,KAAK,EAAE;QAAEe,SAAS,EAAE,MAAM;QAAElF,OAAO,EAAE;MAAO,CAAE;MAAAoD,QAAA,gBAC3EjE,OAAA;QAAAiE,QAAA,EAAI;MAAgC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACxCpD,SAAS,CAACZ,GAAG,CAAC,CAACqC,IAAI,EAAES,KAAK,kBACvBnD,OAAA;QAAiBgF,KAAK,EAAE;UAAEnE,OAAO,EAAE,KAAK;UAAEmF,YAAY,EAAE,gBAAgB;UAAEC,OAAO,EAAE,MAAM;UAAEC,UAAU,EAAE;QAAS,CAAE;QAAAjC,QAAA,gBAC9GjE,OAAA;UAAKgF,KAAK,EAAE;YACRE,KAAK,EAAE,MAAM;YACbD,MAAM,EAAE,MAAM;YACdkB,eAAe,EAAEpD,cAAc,CAACL,IAAI,CAACU,WAAW,CAAC,IAAI,MAAM;YAC3DgD,YAAY,EAAE,KAAK;YACnBC,WAAW,EAAE;UACjB;QAAE;UAAAnC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACTrE,OAAA;UAAAiE,QAAA,gBACIjE,OAAA;YAAAiE,QAAA,EAASvB,IAAI,CAACU;UAAW;YAAAc,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,OAAG,EAAC3B,IAAI,CAACgD,IAAI,EAAC,UAAQ,EAAChD,IAAI,CAACe,cAAc,EAAC,GAClF;QAAA;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA,GAVDlB,KAAK;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWV,CACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACrD,GAAA,CA1LID,GAAG;EAAA,QAKuBjB,WAAW;AAAA;AAAAwG,GAAA,GALrCvF,GAAG;AA4LT,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAwF,GAAA;AAAAC,YAAA,CAAAzF,EAAA;AAAAyF,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}