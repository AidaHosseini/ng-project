{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\map.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useState, useEffect, useMemo } from \"react\";\n// import { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\n// import 'leaflet/dist/leaflet.css';\n// import SearchForm from \"./SearchForm\";\n// import L from \"leaflet\";\n// import { useLocation } from \"./LocationContext\";\n// import Button from '@mui/material/Button';\n\n// // 🎯 Predefined colors for clinics, MVZ, ASV\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// // 🟢 Custom icons for different provider types\n// const userIcon = L.icon({\n//     iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\", // Unique user icon\n//     iconSize: [35, 35],\n//     iconAnchor: [17, 35]\n// });\n\n// // 🏥 Create a circular icon for clinics/MVZ/etc.\n// const getColoredClinicIcon = (color) => {\n//     return L.divIcon({\n//         className: \"custom-clinic-marker\",\n//         html: `<div style=\"\n//             width: 30px; height: 30px; \n//             background-color: ${color}; \n//             border-radius: 50%; \n//             border: 1px solid black;\n//             display: flex; justify-content: center; align-items: center;\">\n//         </div>`,\n//         iconSize: [20, 20],\n//         iconAnchor: [15, 20]\n//     });\n// };\n// // ✅ AutoZoom adjusts the map bounds to show all valid points\n// const AutoZoom = ({ locations }) => {\n//     const map = useMap();\n\n//     useEffect(() => {\n//         // 🛑 Filter out locations with missing latitude/longitude\n//         console.log(\"hii&&&\",locations);\n//         const validLocations = locations.filter(loc => \n//             (loc.latitude && loc.longitude) ||\n//             (loc.clinic_latitude && loc.clinic_longitude) ||\n//             (loc.mvz_latitude && loc.mvz_longitude) ||\n//             (loc.asv_latitude && loc.asv_longitude) ||  // Fixed: loc.asv.longitude → loc.asv_longitude\n//             (loc.niedergelassene_latitude && loc.niedergelassene_longitude) ||\n//             (loc.neurologe_latitude && loc.neurologe_longitude) ||\n//             (loc.onkologe_latitude && loc.onkologe_longitude)\n//         );\n\n//         console.log(\"hii&&&\",validLocations.length);\n//         if (validLocations.length > 0) {\n//             const bounds = L.latLngBounds(validLocations.map(loc => [\n//                 loc.latitude || \n//                 loc.clinic_latitude || \n//                 loc.mvz_latitude || \n//                 loc.asv_latitude || \n//                 loc.niedergelassene_latitude || \n//                 loc.neurologe_latitude || \n//                 loc.onkologe_latitude, \n\n//                 loc.longitude || \n//                 loc.clinic_longitude || \n//                 loc.mvz_longitude || \n//                 loc.asv_longitude || \n//                 loc.niedergelassene_longitude || \n//                 loc.neurologe_longitude || \n//                 loc.onkologe_longitude\n//             ]));\n//             map.fitBounds(bounds, { padding: [50, 50] }); // Ensure all points are visible\n//         } else {\n//             console.warn(\"⚠️ No valid locations found for AutoZoom!\");\n//         }\n//     }, [locations, map]);\n\n//     return null; // No UI component, only logic\n// };\n\n// const Map = () => {\n//     const [graphData, setGraphData] = useState([]);                 // Holds clinic/MVZ/etc. data\n//     const [userLocation, setUserLocation] = useState(null);         // User's position\n//     const [locationChoice, setLocationChoice] = useState(\"\");       // Selected location method\n//     const [manualAddress, setManualAddress] = useState(\"\");         // For manual input\n//     // const [selectedLocation, setSelectedLocation] = useState(null); // 🆕 Selected clicked location\n//     // const { setAllLocations } = useLocation();                      // Context function\n//     const { setAllLocations, selectedLocation, setSelectedLocation } = useLocation(); // 🆕 Destructure selectedLocation & setSelectedLocation\n\n//     // 🚀 Get user's current location\n//     const fetchMyLocation = () => {\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition(\n//                 (position) => {\n//                     const lat = position.coords.latitude;\n//                     const lon = position.coords.longitude;\n\n//                     if (lat && lon) {\n//                         setUserLocation({\n//                             latitude: lat,\n//                             longitude: lon\n//                         });\n//                         console.log(\"✅ User location set:\", lat, lon);\n//                     } else {\n//                         console.warn(\"⚠️ Invalid user location received.\");\n//                     }\n//                 },\n//                 (error) => {\n//                     console.error(\"❌ Error getting user location:\", error);\n//                 }\n//             );\n//         }\n//     };\n//     // 📍 Handle click on marker → save clicked location\n//     const handleMarkerClick = (location) => {\n//         setSelectedLocation(location); // 🆕 Sets the selected location on click\n//     };\n\n//     // 🎯 Handle location selection\n//     const handleLocationChoice = (choice) => {\n//         setLocationChoice(choice);\n//         setUserLocation(null);\n//         setManualAddress(\"\"); \n//         if (choice === \"my-location\") {\n//             fetchMyLocation();\n//         }\n//     };\n\n//     // 🎯 Convert address to latitude & longitude using OpenStreetMap's Nominatim API\n//     const handleManualAddressSearch = async () => {\n//         if (!manualAddress.trim()) {\n//             alert(\"Please enter a valid address.\");\n//             return;\n//         }\n//         try {\n//             const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n//             const data = await response.json();\n//             if (data.length > 0 && data[0].lat && data[0].lon) {\n//                 setUserLocation({\n//                     latitude: parseFloat(data[0].lat),\n//                     longitude: parseFloat(data[0].lon)\n//                 });\n//             } else {\n//                 alert(\"Address not found. Please enter a more precise location.\");\n//                 console.warn(\"❌ No valid latitude/longitude found in API response.\");\n//             }\n//         } catch (error) {\n//             console.error(\"Error fetching geolocation:\", error);\n//             alert(\"Failed to fetch location. Try again later.\");\n//         }\n//     };\n\n//     const allLocations = useMemo(() => {\n//         const locations = [...graphData];\n\n//         if (userLocation) {\n//             locations.push({ clinic_name: \"Your Location\", provider_type: \"User\", ...userLocation });\n//         } else if (graphData.length > 0 && graphData[0].search_center_lat && graphData[0].search_center_lon) {\n//             locations.push({\n//                 clinic_name: \"Zentrum (Umkreis)\",\n//                 provider_type: \"Radius\",\n//                 latitude: graphData[0].search_center_lat,\n//                 longitude: graphData[0].search_center_lon\n//             });\n//         }\n\n//         return locations;\n//     }, [graphData, userLocation]);\n\n//     // ✅ Update locations when changed\n//     useEffect(() => {\n//         setAllLocations(allLocations);\n//     }, [allLocations, setAllLocations]);\n\n//     return (\n\n//         <div style={{\n//             backgroundColor: \"#f0ffff\", // Light blue background\n//             border: \"1px solid #b3e5fc\",\n//             borderRadius: \"10px\",\n//             padding: \"10px\",\n//             marginBottom: \"15px\",\n//             boxShadow: \"0px 2px 10px rgba(0,0,0,0.1)\"\n//         }}>\n//         <h3>Wählen Sie Ihren Standort:</h3>\n//         <div style={{ display: \"flex\", gap: \"10px\", marginBottom: \"10px\", paddingLeft: \"10px\" }}>\n//             <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"my-location\")}>Meinen Standort verwenden</Button>\n//             <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"manual\")}>Standort manuell eingeben</Button>\n//         </div>\n\n//             {locationChoice === \"manual\" && (\n//                 <div style={{ paddingLeft: \"10px\",marginBottom: \"10px\" }}>\n//                     <input \n//                         type=\"text\" \n//                         placeholder=\"Geben Sie Ihre Adresse ein\" \n//                         value={manualAddress} \n//                         onChange={(e) => setManualAddress(e.target.value)}\n//                         style={{ padding: \"8px\", width: \"250px\", border: \"1px solid #ccc\", borderRadius: \"5px\", marginRight: \"10px\" }} \n//                     />\n//                     {/* <button onClick={handleManualAddressSearch}>Search Address</button> */}\n\n//                     {/* ✅ Styled \"Search Address\" Button */}\n//                     <button \n//                         onClick={handleManualAddressSearch} \n//                         style={{\n//                             padding: \"8px 12px\",\n//                             borderRadius: \"5px\",\n//                             backgroundColor: \"#007BFF\", /* Primary blue */\n//                             color: \"white\",\n//                             border: \"none\",\n//                             cursor: \"pointer\",\n//                             fontSize: \"14px\",\n//                             fontWeight: \"bold\",\n//                             transition: \"background-color 0.3s\",\n//                             boxShadow: \"0px 2px 5px rgba(0, 0, 0, 0.2)\"\n//                         }}\n//                         onMouseOver={(e) => e.target.style.backgroundColor = \"#0056b3\"} /* Hover effect */\n//                         onMouseOut={(e) => e.target.style.backgroundColor = \"#007BFF\"} \n//                     >\n//                         Search Address\n//                     </button>\n//                 </div>\n//             )}\n\n//             <SearchForm setGraphData={setGraphData} />\n\n//             <div style={{\n//                 width: \"59%\",\n//                 height: \"500px\",\n//                 border: \"1px solid #b3e5fc\",\n//                 borderRadius: \"10px\",\n//                 padding: \"10px\",\n//                 margin: \"10px 0\", // Ensure no auto-centering\n//                 boxShadow: \"0px 4px 10px rgba(0,0,0,0.15)\",\n//                 backgroundColor: \"white\", // White background for contrast\n//                 display: \"flex\", // Ensures content aligns properly\n//                 alignItems: \"center\", // Aligns map within box\n//                 justifyContent: \"center\" // Aligns the map box to the left\n//             }}>\n//             <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: \"100%\", width: \"100%\", borderRadius: \"8px\" }}>\n//                 <TileLayer\n//                     attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n//                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//                 />\n\n//                 {/* AutoZoom Component to adjust map bounds dynamically */}\n\n//                 {/* <AutoZoom locations={allLocations} /> */}\n//                 {allLocations.length > 0 ? (\n\n//                     <AutoZoom locations={allLocations} />\n//                 ) : (\n//                     <div style={{ textAlign: \"center\", fontSize: \"18px\", color: \"red\", marginTop: \"20px\" }}>\n//                         ❌ No locations found. Try a different search.\n//                     </div>\n//                 )}\n//                 {/* 🎯 Draw user location marker */}\n//                 {userLocation &&  (\n//                     <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\n//                         <Popup><strong>Your Location</strong></Popup>\n//                     </Marker>\n//                 )}\n\n//                 {/* 🎯 Draw clinic markers */}\n//                 {graphData.map((data, index) => {\n//                     const color = lineColors[index % lineColors.length]; // Match line & marker color\n//                     // Extract valid lat/lng values from multiple possible sources\n//                     const latitude = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\n//                     const longitude = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\n//                     // 🛑 Skip if latitude or longitude is missing\n//                     if (!latitude || !longitude) {\n//                         console.warn(`⚠️ Skipping invalid location: ${data.clinic_name || data.mvz_name || data.neurologe_name || data.onkologe_name}`);\n//                         return null;\n//                     }\n\n//                     return (\n//                         // <Marker key={index} position={[latitude, longitude]} icon={getColoredClinicIcon(color)}>\n//                         <Marker \n//                             key={index} \n//                             position={[latitude, longitude]} \n//                             icon={getColoredClinicIcon(color)}\n//                             eventHandlers={{\n//                                 click: () => handleMarkerClick(data)\n//                             }} // 🆕 Assign click event handler\n//                         >\n//                             <Popup>\n//                                 <strong>{data.clinic_name || data.mvz_name || data.neurologe_name || data.onkologe_name}</strong><br />\n//                                 <strong>City:</strong> {data.clinic_city || data.mvz_city || data.neurologe_city || data.onkologe_city} <br />\n//                                 <strong>Address:</strong> {data.clinic_address || data.mvz_address || data.neurologe_address || data.onkologe_address || \"N/A\"} <br />\n//                                 <strong>Beds:</strong> {data.clinic_number_of_beds || \"N/A\"}\n//                             </Popup>\n//                         </Marker>\n//                     );\n//                 })}\n//                 {/* 🎯 Draw lines between user location & clinics */}\n//                 {userLocation && graphData.map((data, index) => {\n//         const color = lineColors[index % lineColors.length]; // Match line color\n\n//         // Extract lat/lng for the target location\n//         const latitude = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\n//         const longitude = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\n\n//         // 🛑 Skip if lat/lng is missing\n//         if (!latitude || !longitude) return null;\n\n//         return (\n//             <Polyline \n//                 key={index} \n//                 positions={[\n//                     [userLocation.latitude, userLocation.longitude], \n//                     [latitude, longitude]\n//                 ]} \n//                 color={color} \n//                 weight={2} \n//             />\n//         );\n//     })}\n//             </MapContainer>\n//         </div>\n//         </div>\n//     );\n// };\n\n// export default Map;\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMap } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport SearchForm from \"./SearchForm\";\nimport L from \"leaflet\";\nimport { useLocation } from \"./LocationContext\";\nimport Button from '@mui/material/Button';\n\n// 🎨 Custom marker icons\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\nconst userIcon = L.icon({\n  iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\n  iconSize: [35, 35],\n  iconAnchor: [17, 35]\n});\nconst getColoredClinicIcon = color => {\n  return L.divIcon({\n    className: \"custom-clinic-marker\",\n    html: `<div style=\"width: 30px; height: 30px; background-color: ${color}; border-radius: 50%; border: 1px solid black;\"></div>`,\n    iconSize: [20, 20],\n    iconAnchor: [15, 20]\n  });\n};\n\n// 🔍 AutoZoom to fit all points\nconst AutoZoom = ({\n  locations\n}) => {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    const validLocations = locations.filter(loc => loc.latitude && loc.longitude);\n    if (validLocations.length > 0) {\n      const bounds = L.latLngBounds(validLocations.map(loc => [loc.latitude, loc.longitude]));\n      map.fitBounds(bounds, {\n        padding: [50, 50]\n      });\n    }\n  }, [locations, map]);\n  return null;\n};\n_s(AutoZoom, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = AutoZoom;\nconst Map = () => {\n  _s2();\n  const [graphData, setGraphData] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const [locationChoice, setLocationChoice] = useState(\"\");\n  const [manualAddress, setManualAddress] = useState(\"\");\n  const {\n    setAllLocations,\n    selectedLocation,\n    setSelectedLocation\n  } = useLocation();\n\n  // 📍 Fetch user's current location\n  const fetchMyLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n        setUserLocation({\n          latitude: lat,\n          longitude: lon\n        });\n      }, error => {\n        console.error(\"Geolocation error:\", error);\n      });\n    }\n  };\n  const handleMarkerClick = location => {\n    setSelectedLocation(location);\n  };\n  const handleLocationChoice = choice => {\n    setLocationChoice(choice);\n    setUserLocation(null);\n    setManualAddress(\"\");\n    if (choice === \"my-location\") {\n      fetchMyLocation();\n    }\n  };\n\n  // 🌍 Manual address to lat/lng\n  const handleManualAddressSearch = async () => {\n    if (!manualAddress.trim()) return;\n    try {\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n      const data = await response.json();\n      if (data.length > 0) {\n        setUserLocation({\n          latitude: parseFloat(data[0].lat),\n          longitude: parseFloat(data[0].lon)\n        });\n      } else {\n        alert(\"Adresse nicht gefunden.\");\n      }\n    } catch (error) {\n      console.error(\"Geocoding error:\", error);\n    }\n  };\n\n  // 🧭 Decide which origin to connect lines from\n  const getOriginLocation = () => {\n    if (userLocation) {\n      return userLocation;\n    } else if (graphData.length > 0 && graphData[0].search_center_lat && graphData[0].search_center_lon) {\n      return {\n        latitude: graphData[0].search_center_lat,\n        longitude: graphData[0].search_center_lon,\n        label: \"Zentrum (Umkreis)\"\n      };\n    }\n    return null;\n  };\n\n  // 📦 All points shown on map (providers + origin)\n  const allLocations = useMemo(() => {\n    const locations = [...graphData];\n    const origin = getOriginLocation();\n    if (origin) {\n      locations.push({\n        clinic_name: origin.label || \"Your Location\",\n        provider_type: \"Origin\",\n        latitude: origin.latitude,\n        longitude: origin.longitude\n      });\n    }\n    return locations;\n  }, [graphData, userLocation]);\n  useEffect(() => {\n    setAllLocations(allLocations);\n  }, [allLocations, setAllLocations]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: \"#f0ffff\",\n      padding: \"10px\",\n      borderRadius: \"10px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"W\\xE4hlen Sie Ihren Standort:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: \"10px\",\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: () => handleLocationChoice(\"my-location\"),\n        children: \"Meinen Standort verwenden\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: () => handleLocationChoice(\"manual\"),\n        children: \"Standort manuell eingeben\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 13\n    }, this), locationChoice === \"manual\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Adresse eingeben\",\n        value: manualAddress,\n        onChange: e => setManualAddress(e.target.value),\n        style: {\n          padding: \"8px\",\n          width: \"250px\",\n          marginRight: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleManualAddressSearch,\n        style: {\n          padding: \"8px 12px\",\n          borderRadius: \"5px\",\n          backgroundColor: \"#007BFF\",\n          color: \"white\",\n          border: \"none\",\n          cursor: \"pointer\"\n        },\n        children: \"Search Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      setGraphData: setGraphData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"59%\",\n        height: \"500px\",\n        marginTop: \"15px\",\n        backgroundColor: \"white\",\n        borderRadius: \"10px\",\n        boxShadow: \"0px 4px 10px rgba(0,0,0,0.15)\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MapContainer, {\n        center: [50.851, 8.015],\n        zoom: 8,\n        scrollWheelZoom: false,\n        style: {\n          height: \"100%\",\n          width: \"100%\",\n          borderRadius: \"8px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          attribution: \"\\xA9 OpenStreetMap contributors\",\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(AutoZoom, {\n          locations: allLocations\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 21\n        }, this), getOriginLocation() && /*#__PURE__*/_jsxDEV(Marker, {\n          position: [getOriginLocation().latitude, getOriginLocation().longitude],\n          icon: userIcon,\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: getOriginLocation().label || \"Your Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 25\n        }, this), graphData.map((data, index) => {\n          const lat = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\n          const lon = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\n          if (!lat || !lon) return null;\n          const color = lineColors[index % lineColors.length];\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            position: [lat, lon],\n            icon: getColoredClinicIcon(color),\n            eventHandlers: {\n              click: () => handleMarkerClick(data)\n            },\n            children: /*#__PURE__*/_jsxDEV(Popup, {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: data.clinic_name || data.mvz_name || data.neurologe_name || data.onkologe_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 134\n              }, this), \"Stadt: \", data.clinic_city || data.mvz_city || data.neurologe_city || data.onkologe_city, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 533,\n                columnNumber: 124\n              }, this), \"Adresse: \", data.clinic_address || data.mvz_address || data.neurologe_address || data.onkologe_address, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 534,\n                columnNumber: 138\n              }, this), \"Betten: \", data.clinic_number_of_beds || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 531,\n              columnNumber: 33\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 29\n          }, this);\n        }), (() => {\n          const origin = getOriginLocation();\n          if (!origin) return null;\n          return graphData.map((data, index) => {\n            const lat = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\n            const lon = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\n            if (!lat || !lon) return null;\n            const color = lineColors[index % lineColors.length];\n            return /*#__PURE__*/_jsxDEV(Polyline, {\n              positions: [[origin.latitude, origin.longitude], [lat, lon]],\n              color: color,\n              weight: 2\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 554,\n              columnNumber: 33\n            }, this);\n          });\n        })()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 464,\n    columnNumber: 9\n  }, this);\n};\n_s2(Map, \"ldPG56thr84O3jwSVmH2MIaI4FE=\", false, function () {\n  return [useLocation];\n});\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"AutoZoom\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","MapContainer","TileLayer","Marker","Popup","Polyline","useMap","SearchForm","L","useLocation","Button","jsxDEV","_jsxDEV","lineColors","userIcon","icon","iconUrl","iconSize","iconAnchor","getColoredClinicIcon","color","divIcon","className","html","AutoZoom","locations","_s","map","validLocations","filter","loc","latitude","longitude","length","bounds","latLngBounds","fitBounds","padding","_c","Map","_s2","graphData","setGraphData","userLocation","setUserLocation","locationChoice","setLocationChoice","manualAddress","setManualAddress","setAllLocations","selectedLocation","setSelectedLocation","fetchMyLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","lon","error","console","handleMarkerClick","location","handleLocationChoice","choice","handleManualAddressSearch","trim","response","fetch","encodeURIComponent","data","json","parseFloat","alert","getOriginLocation","search_center_lat","search_center_lon","label","allLocations","origin","push","clinic_name","provider_type","style","backgroundColor","borderRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","display","gap","marginBottom","variant","onClick","type","placeholder","value","onChange","e","target","width","marginRight","border","cursor","height","marginTop","boxShadow","center","zoom","scrollWheelZoom","attribution","url","index","clinic_latitude","mvz_latitude","neurologe_latitude","onkologe_latitude","clinic_longitude","mvz_longitude","neurologe_longitude","onkologe_longitude","eventHandlers","click","mvz_name","neurologe_name","onkologe_name","clinic_city","mvz_city","neurologe_city","onkologe_city","clinic_address","mvz_address","neurologe_address","onkologe_address","clinic_number_of_beds","positions","weight","_c2","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/map.js"],"sourcesContent":["// import React, { useState, useEffect, useMemo } from \"react\";\r\n// import { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\r\n// import 'leaflet/dist/leaflet.css';\r\n// import SearchForm from \"./SearchForm\";\r\n// import L from \"leaflet\";\r\n// import { useLocation } from \"./LocationContext\";\r\n// import Button from '@mui/material/Button';\r\n\r\n\r\n\r\n\r\n// // 🎯 Predefined colors for clinics, MVZ, ASV\r\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// // 🟢 Custom icons for different provider types\r\n// const userIcon = L.icon({\r\n//     iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\", // Unique user icon\r\n//     iconSize: [35, 35],\r\n//     iconAnchor: [17, 35]\r\n// });\r\n\r\n// // 🏥 Create a circular icon for clinics/MVZ/etc.\r\n// const getColoredClinicIcon = (color) => {\r\n//     return L.divIcon({\r\n//         className: \"custom-clinic-marker\",\r\n//         html: `<div style=\"\r\n//             width: 30px; height: 30px; \r\n//             background-color: ${color}; \r\n//             border-radius: 50%; \r\n//             border: 1px solid black;\r\n//             display: flex; justify-content: center; align-items: center;\">\r\n//         </div>`,\r\n//         iconSize: [20, 20],\r\n//         iconAnchor: [15, 20]\r\n//     });\r\n// };\r\n// // ✅ AutoZoom adjusts the map bounds to show all valid points\r\n// const AutoZoom = ({ locations }) => {\r\n//     const map = useMap();\r\n    \r\n//     useEffect(() => {\r\n//         // 🛑 Filter out locations with missing latitude/longitude\r\n//         console.log(\"hii&&&\",locations);\r\n//         const validLocations = locations.filter(loc => \r\n//             (loc.latitude && loc.longitude) ||\r\n//             (loc.clinic_latitude && loc.clinic_longitude) ||\r\n//             (loc.mvz_latitude && loc.mvz_longitude) ||\r\n//             (loc.asv_latitude && loc.asv_longitude) ||  // Fixed: loc.asv.longitude → loc.asv_longitude\r\n//             (loc.niedergelassene_latitude && loc.niedergelassene_longitude) ||\r\n//             (loc.neurologe_latitude && loc.neurologe_longitude) ||\r\n//             (loc.onkologe_latitude && loc.onkologe_longitude)\r\n//         );\r\n        \r\n\r\n//         console.log(\"hii&&&\",validLocations.length);\r\n//         if (validLocations.length > 0) {\r\n//             const bounds = L.latLngBounds(validLocations.map(loc => [\r\n//                 loc.latitude || \r\n//                 loc.clinic_latitude || \r\n//                 loc.mvz_latitude || \r\n//                 loc.asv_latitude || \r\n//                 loc.niedergelassene_latitude || \r\n//                 loc.neurologe_latitude || \r\n//                 loc.onkologe_latitude, \r\n\r\n//                 loc.longitude || \r\n//                 loc.clinic_longitude || \r\n//                 loc.mvz_longitude || \r\n//                 loc.asv_longitude || \r\n//                 loc.niedergelassene_longitude || \r\n//                 loc.neurologe_longitude || \r\n//                 loc.onkologe_longitude\r\n//             ]));\r\n//             map.fitBounds(bounds, { padding: [50, 50] }); // Ensure all points are visible\r\n//         } else {\r\n//             console.warn(\"⚠️ No valid locations found for AutoZoom!\");\r\n//         }\r\n//     }, [locations, map]);\r\n\r\n//     return null; // No UI component, only logic\r\n// };\r\n\r\n// const Map = () => {\r\n//     const [graphData, setGraphData] = useState([]);                 // Holds clinic/MVZ/etc. data\r\n//     const [userLocation, setUserLocation] = useState(null);         // User's position\r\n//     const [locationChoice, setLocationChoice] = useState(\"\");       // Selected location method\r\n//     const [manualAddress, setManualAddress] = useState(\"\");         // For manual input\r\n//     // const [selectedLocation, setSelectedLocation] = useState(null); // 🆕 Selected clicked location\r\n//     // const { setAllLocations } = useLocation();                      // Context function\r\n//     const { setAllLocations, selectedLocation, setSelectedLocation } = useLocation(); // 🆕 Destructure selectedLocation & setSelectedLocation\r\n\r\n//     // 🚀 Get user's current location\r\n//     const fetchMyLocation = () => {\r\n//         if (navigator.geolocation) {\r\n//             navigator.geolocation.getCurrentPosition(\r\n//                 (position) => {\r\n//                     const lat = position.coords.latitude;\r\n//                     const lon = position.coords.longitude;\r\n    \r\n//                     if (lat && lon) {\r\n//                         setUserLocation({\r\n//                             latitude: lat,\r\n//                             longitude: lon\r\n//                         });\r\n//                         console.log(\"✅ User location set:\", lat, lon);\r\n//                     } else {\r\n//                         console.warn(\"⚠️ Invalid user location received.\");\r\n//                     }\r\n//                 },\r\n//                 (error) => {\r\n//                     console.error(\"❌ Error getting user location:\", error);\r\n//                 }\r\n//             );\r\n//         }\r\n//     };\r\n//     // 📍 Handle click on marker → save clicked location\r\n//     const handleMarkerClick = (location) => {\r\n//         setSelectedLocation(location); // 🆕 Sets the selected location on click\r\n//     };\r\n\r\n//     // 🎯 Handle location selection\r\n//     const handleLocationChoice = (choice) => {\r\n//         setLocationChoice(choice);\r\n//         setUserLocation(null);\r\n//         setManualAddress(\"\"); \r\n//         if (choice === \"my-location\") {\r\n//             fetchMyLocation();\r\n//         }\r\n//     };\r\n\r\n//     // 🎯 Convert address to latitude & longitude using OpenStreetMap's Nominatim API\r\n//     const handleManualAddressSearch = async () => {\r\n//         if (!manualAddress.trim()) {\r\n//             alert(\"Please enter a valid address.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\r\n//             const data = await response.json();\r\n//             if (data.length > 0 && data[0].lat && data[0].lon) {\r\n//                 setUserLocation({\r\n//                     latitude: parseFloat(data[0].lat),\r\n//                     longitude: parseFloat(data[0].lon)\r\n//                 });\r\n//             } else {\r\n//                 alert(\"Address not found. Please enter a more precise location.\");\r\n//                 console.warn(\"❌ No valid latitude/longitude found in API response.\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error fetching geolocation:\", error);\r\n//             alert(\"Failed to fetch location. Try again later.\");\r\n//         }\r\n//     };\r\n    \r\n//     const allLocations = useMemo(() => {\r\n//         const locations = [...graphData];\r\n    \r\n//         if (userLocation) {\r\n//             locations.push({ clinic_name: \"Your Location\", provider_type: \"User\", ...userLocation });\r\n//         } else if (graphData.length > 0 && graphData[0].search_center_lat && graphData[0].search_center_lon) {\r\n//             locations.push({\r\n//                 clinic_name: \"Zentrum (Umkreis)\",\r\n//                 provider_type: \"Radius\",\r\n//                 latitude: graphData[0].search_center_lat,\r\n//                 longitude: graphData[0].search_center_lon\r\n//             });\r\n//         }\r\n    \r\n//         return locations;\r\n//     }, [graphData, userLocation]);\r\n    \r\n\r\n//     // ✅ Update locations when changed\r\n//     useEffect(() => {\r\n//         setAllLocations(allLocations);\r\n//     }, [allLocations, setAllLocations]);\r\n    \r\n//     return (\r\n         \r\n        \r\n//         <div style={{\r\n//             backgroundColor: \"#f0ffff\", // Light blue background\r\n//             border: \"1px solid #b3e5fc\",\r\n//             borderRadius: \"10px\",\r\n//             padding: \"10px\",\r\n//             marginBottom: \"15px\",\r\n//             boxShadow: \"0px 2px 10px rgba(0,0,0,0.1)\"\r\n//         }}>\r\n//         <h3>Wählen Sie Ihren Standort:</h3>\r\n//         <div style={{ display: \"flex\", gap: \"10px\", marginBottom: \"10px\", paddingLeft: \"10px\" }}>\r\n//             <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"my-location\")}>Meinen Standort verwenden</Button>\r\n//             <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"manual\")}>Standort manuell eingeben</Button>\r\n//         </div>\r\n\r\n//             {locationChoice === \"manual\" && (\r\n//                 <div style={{ paddingLeft: \"10px\",marginBottom: \"10px\" }}>\r\n//                     <input \r\n//                         type=\"text\" \r\n//                         placeholder=\"Geben Sie Ihre Adresse ein\" \r\n//                         value={manualAddress} \r\n//                         onChange={(e) => setManualAddress(e.target.value)}\r\n//                         style={{ padding: \"8px\", width: \"250px\", border: \"1px solid #ccc\", borderRadius: \"5px\", marginRight: \"10px\" }} \r\n//                     />\r\n//                     {/* <button onClick={handleManualAddressSearch}>Search Address</button> */}\r\n                            \r\n//                     {/* ✅ Styled \"Search Address\" Button */}\r\n//                     <button \r\n//                         onClick={handleManualAddressSearch} \r\n//                         style={{\r\n//                             padding: \"8px 12px\",\r\n//                             borderRadius: \"5px\",\r\n//                             backgroundColor: \"#007BFF\", /* Primary blue */\r\n//                             color: \"white\",\r\n//                             border: \"none\",\r\n//                             cursor: \"pointer\",\r\n//                             fontSize: \"14px\",\r\n//                             fontWeight: \"bold\",\r\n//                             transition: \"background-color 0.3s\",\r\n//                             boxShadow: \"0px 2px 5px rgba(0, 0, 0, 0.2)\"\r\n//                         }}\r\n//                         onMouseOver={(e) => e.target.style.backgroundColor = \"#0056b3\"} /* Hover effect */\r\n//                         onMouseOut={(e) => e.target.style.backgroundColor = \"#007BFF\"} \r\n//                     >\r\n//                         Search Address\r\n//                     </button>\r\n//                 </div>\r\n//             )}\r\n\r\n//             <SearchForm setGraphData={setGraphData} />\r\n            \r\n//             <div style={{\r\n//                 width: \"59%\",\r\n//                 height: \"500px\",\r\n//                 border: \"1px solid #b3e5fc\",\r\n//                 borderRadius: \"10px\",\r\n//                 padding: \"10px\",\r\n//                 margin: \"10px 0\", // Ensure no auto-centering\r\n//                 boxShadow: \"0px 4px 10px rgba(0,0,0,0.15)\",\r\n//                 backgroundColor: \"white\", // White background for contrast\r\n//                 display: \"flex\", // Ensures content aligns properly\r\n//                 alignItems: \"center\", // Aligns map within box\r\n//                 justifyContent: \"center\" // Aligns the map box to the left\r\n//             }}>\r\n//             <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: \"100%\", width: \"100%\", borderRadius: \"8px\" }}>\r\n//                 <TileLayer\r\n//                     attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n//                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n//                 />\r\n\r\n//                 {/* AutoZoom Component to adjust map bounds dynamically */}\r\n                \r\n//                 {/* <AutoZoom locations={allLocations} /> */}\r\n//                 {allLocations.length > 0 ? (\r\n                    \r\n//                     <AutoZoom locations={allLocations} />\r\n//                 ) : (\r\n//                     <div style={{ textAlign: \"center\", fontSize: \"18px\", color: \"red\", marginTop: \"20px\" }}>\r\n//                         ❌ No locations found. Try a different search.\r\n//                     </div>\r\n//                 )}\r\n//                 {/* 🎯 Draw user location marker */}\r\n//                 {userLocation &&  (\r\n//                     <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\r\n//                         <Popup><strong>Your Location</strong></Popup>\r\n//                     </Marker>\r\n//                 )}\r\n                \r\n//                 {/* 🎯 Draw clinic markers */}\r\n//                 {graphData.map((data, index) => {\r\n//                     const color = lineColors[index % lineColors.length]; // Match line & marker color\r\n//                     // Extract valid lat/lng values from multiple possible sources\r\n//                     const latitude = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\r\n//                     const longitude = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\r\n//                     // 🛑 Skip if latitude or longitude is missing\r\n//                     if (!latitude || !longitude) {\r\n//                         console.warn(`⚠️ Skipping invalid location: ${data.clinic_name || data.mvz_name || data.neurologe_name || data.onkologe_name}`);\r\n//                         return null;\r\n//                     }\r\n\r\n//                     return (\r\n//                         // <Marker key={index} position={[latitude, longitude]} icon={getColoredClinicIcon(color)}>\r\n//                         <Marker \r\n//                             key={index} \r\n//                             position={[latitude, longitude]} \r\n//                             icon={getColoredClinicIcon(color)}\r\n//                             eventHandlers={{\r\n//                                 click: () => handleMarkerClick(data)\r\n//                             }} // 🆕 Assign click event handler\r\n//                         >\r\n//                             <Popup>\r\n//                                 <strong>{data.clinic_name || data.mvz_name || data.neurologe_name || data.onkologe_name}</strong><br />\r\n//                                 <strong>City:</strong> {data.clinic_city || data.mvz_city || data.neurologe_city || data.onkologe_city} <br />\r\n//                                 <strong>Address:</strong> {data.clinic_address || data.mvz_address || data.neurologe_address || data.onkologe_address || \"N/A\"} <br />\r\n//                                 <strong>Beds:</strong> {data.clinic_number_of_beds || \"N/A\"}\r\n//                             </Popup>\r\n//                         </Marker>\r\n//                     );\r\n//                 })}\r\n//                 {/* 🎯 Draw lines between user location & clinics */}\r\n//                 {userLocation && graphData.map((data, index) => {\r\n//         const color = lineColors[index % lineColors.length]; // Match line color\r\n\r\n//         // Extract lat/lng for the target location\r\n//         const latitude = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\r\n//         const longitude = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\r\n\r\n//         // 🛑 Skip if lat/lng is missing\r\n//         if (!latitude || !longitude) return null;\r\n\r\n//         return (\r\n//             <Polyline \r\n//                 key={index} \r\n//                 positions={[\r\n//                     [userLocation.latitude, userLocation.longitude], \r\n//                     [latitude, longitude]\r\n//                 ]} \r\n//                 color={color} \r\n//                 weight={2} \r\n//             />\r\n//         );\r\n//     })}\r\n//             </MapContainer>\r\n//         </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Map;\r\nimport React, { useState, useEffect, useMemo } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMap } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport SearchForm from \"./SearchForm\";\r\nimport L from \"leaflet\";\r\nimport { useLocation } from \"./LocationContext\";\r\nimport Button from '@mui/material/Button';\r\n\r\n// 🎨 Custom marker icons\r\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\nconst userIcon = L.icon({\r\n    iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\r\n    iconSize: [35, 35],\r\n    iconAnchor: [17, 35]\r\n});\r\n\r\nconst getColoredClinicIcon = (color) => {\r\n    return L.divIcon({\r\n        className: \"custom-clinic-marker\",\r\n        html: `<div style=\"width: 30px; height: 30px; background-color: ${color}; border-radius: 50%; border: 1px solid black;\"></div>`,\r\n        iconSize: [20, 20],\r\n        iconAnchor: [15, 20]\r\n    });\r\n};\r\n\r\n// 🔍 AutoZoom to fit all points\r\nconst AutoZoom = ({ locations }) => {\r\n    const map = useMap();\r\n\r\n    useEffect(() => {\r\n        const validLocations = locations.filter(loc =>\r\n            loc.latitude && loc.longitude\r\n        );\r\n\r\n        if (validLocations.length > 0) {\r\n            const bounds = L.latLngBounds(validLocations.map(loc => [loc.latitude, loc.longitude]));\r\n            map.fitBounds(bounds, { padding: [50, 50] });\r\n        }\r\n    }, [locations, map]);\r\n\r\n    return null;\r\n};\r\n\r\nconst Map = () => {\r\n    const [graphData, setGraphData] = useState([]);\r\n    const [userLocation, setUserLocation] = useState(null);\r\n    const [locationChoice, setLocationChoice] = useState(\"\");\r\n    const [manualAddress, setManualAddress] = useState(\"\");\r\n    const { setAllLocations, selectedLocation, setSelectedLocation } = useLocation();\r\n\r\n    // 📍 Fetch user's current location\r\n    const fetchMyLocation = () => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    const lat = position.coords.latitude;\r\n                    const lon = position.coords.longitude;\r\n\r\n                    setUserLocation({ latitude: lat, longitude: lon });\r\n                },\r\n                (error) => {\r\n                    console.error(\"Geolocation error:\", error);\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    const handleMarkerClick = (location) => {\r\n        setSelectedLocation(location);\r\n    };\r\n\r\n    const handleLocationChoice = (choice) => {\r\n        setLocationChoice(choice);\r\n        setUserLocation(null);\r\n        setManualAddress(\"\");\r\n        if (choice === \"my-location\") {\r\n            fetchMyLocation();\r\n        }\r\n    };\r\n\r\n    // 🌍 Manual address to lat/lng\r\n    const handleManualAddressSearch = async () => {\r\n        if (!manualAddress.trim()) return;\r\n\r\n        try {\r\n            const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\r\n            const data = await response.json();\r\n            if (data.length > 0) {\r\n                setUserLocation({\r\n                    latitude: parseFloat(data[0].lat),\r\n                    longitude: parseFloat(data[0].lon)\r\n                });\r\n            } else {\r\n                alert(\"Adresse nicht gefunden.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Geocoding error:\", error);\r\n        }\r\n    };\r\n\r\n    // 🧭 Decide which origin to connect lines from\r\n    const getOriginLocation = () => {\r\n        if (userLocation) {\r\n            return userLocation;\r\n        } else if (graphData.length > 0 && graphData[0].search_center_lat && graphData[0].search_center_lon) {\r\n            return {\r\n                latitude: graphData[0].search_center_lat,\r\n                longitude: graphData[0].search_center_lon,\r\n                label: \"Zentrum (Umkreis)\"\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n\r\n    // 📦 All points shown on map (providers + origin)\r\n    const allLocations = useMemo(() => {\r\n        const locations = [...graphData];\r\n        const origin = getOriginLocation();\r\n        if (origin) {\r\n            locations.push({\r\n                clinic_name: origin.label || \"Your Location\",\r\n                provider_type: \"Origin\",\r\n                latitude: origin.latitude,\r\n                longitude: origin.longitude\r\n            });\r\n        }\r\n        return locations;\r\n    }, [graphData, userLocation]);\r\n\r\n    useEffect(() => {\r\n        setAllLocations(allLocations);\r\n    }, [allLocations, setAllLocations]);\r\n\r\n    return (\r\n        <div style={{ backgroundColor: \"#f0ffff\", padding: \"10px\", borderRadius: \"10px\" }}>\r\n            <h3>Wählen Sie Ihren Standort:</h3>\r\n            <div style={{ display: \"flex\", gap: \"10px\", marginBottom: \"10px\" }}>\r\n                <Button variant=\"contained\" onClick={() => handleLocationChoice(\"my-location\")}>Meinen Standort verwenden</Button>\r\n                <Button variant=\"contained\" onClick={() => handleLocationChoice(\"manual\")}>Standort manuell eingeben</Button>\r\n            </div>\r\n\r\n            {locationChoice === \"manual\" && (\r\n                <div>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Adresse eingeben\"\r\n                        value={manualAddress}\r\n                        onChange={(e) => setManualAddress(e.target.value)}\r\n                        style={{ padding: \"8px\", width: \"250px\", marginRight: \"10px\" }}\r\n                    />\r\n                    <button\r\n                        onClick={handleManualAddressSearch}\r\n                        style={{\r\n                            padding: \"8px 12px\",\r\n                            borderRadius: \"5px\",\r\n                            backgroundColor: \"#007BFF\",\r\n                            color: \"white\",\r\n                            border: \"none\",\r\n                            cursor: \"pointer\"\r\n                        }}\r\n                    >\r\n                        Search Address\r\n                    </button>\r\n                </div>\r\n            )}\r\n\r\n            <SearchForm setGraphData={setGraphData} />\r\n\r\n            <div style={{ width: \"59%\", height: \"500px\", marginTop: \"15px\", backgroundColor: \"white\", borderRadius: \"10px\", boxShadow: \"0px 4px 10px rgba(0,0,0,0.15)\" }}>\r\n                <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: \"100%\", width: \"100%\", borderRadius: \"8px\" }}>\r\n                    <TileLayer\r\n                        attribution='&copy; OpenStreetMap contributors'\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    />\r\n                    <AutoZoom locations={allLocations} />\r\n\r\n                    {/* 🔵 Origin marker */}\r\n                    {getOriginLocation() && (\r\n                        <Marker\r\n                            position={[getOriginLocation().latitude, getOriginLocation().longitude]}\r\n                            icon={userIcon}\r\n                        >\r\n                            <Popup>{getOriginLocation().label || \"Your Location\"}</Popup>\r\n                        </Marker>\r\n                    )}\r\n\r\n                    {/* 🔴 Provider markers */}\r\n                    {graphData.map((data, index) => {\r\n                        const lat = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\r\n                        const lon = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\r\n                        if (!lat || !lon) return null;\r\n\r\n                        const color = lineColors[index % lineColors.length];\r\n\r\n                        return (\r\n                            <Marker\r\n                                key={index}\r\n                                position={[lat, lon]}\r\n                                icon={getColoredClinicIcon(color)}\r\n                                eventHandlers={{ click: () => handleMarkerClick(data) }}\r\n                            >\r\n                                <Popup>\r\n                                    <strong>{data.clinic_name || data.mvz_name || data.neurologe_name || data.onkologe_name}</strong><br />\r\n                                    Stadt: {data.clinic_city || data.mvz_city || data.neurologe_city || data.onkologe_city}<br />\r\n                                    Adresse: {data.clinic_address || data.mvz_address || data.neurologe_address || data.onkologe_address}<br />\r\n                                    Betten: {data.clinic_number_of_beds || \"N/A\"}\r\n                                </Popup>\r\n                            </Marker>\r\n                        );\r\n                    })}\r\n\r\n                    {/* 🟢 Draw lines from origin to providers */}\r\n                    {(() => {\r\n                        const origin = getOriginLocation();\r\n                        if (!origin) return null;\r\n\r\n                        return graphData.map((data, index) => {\r\n                            const lat = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\r\n                            const lon = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\r\n                            if (!lat || !lon) return null;\r\n\r\n                            const color = lineColors[index % lineColors.length];\r\n\r\n                            return (\r\n                                <Polyline\r\n                                    key={index}\r\n                                    positions={[[origin.latitude, origin.longitude], [lat, lon]]}\r\n                                    color={color}\r\n                                    weight={2}\r\n                                />\r\n                            );\r\n                        });\r\n                    })()}\r\n                </MapContainer>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}