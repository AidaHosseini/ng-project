{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\map.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useState, useEffect, useMemo } from \"react\";\n// import { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\n// import 'leaflet/dist/leaflet.css';\n// import SearchForm from \"./SearchForm\";\n// import L from \"leaflet\";\n// import { useLocation } from \"./LocationContext\";\n// import Button from '@mui/material/Button';\n\n// // 🎯 Predefined colors for clinics, MVZ, ASV\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// // 🟢 Custom icons for different provider types\n// const userIcon = L.icon({\n//     iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\", // Unique user icon\n//     iconSize: [35, 35],\n//     iconAnchor: [17, 35]\n// });\n\n// // 🏥 Create a circular icon for clinics/MVZ/etc.\n// const getColoredClinicIcon = (color) => {\n//     return L.divIcon({\n//         className: \"custom-clinic-marker\",\n//         html: `<div style=\"\n//             width: 30px; height: 30px; \n//             background-color: ${color}; \n//             border-radius: 50%; \n//             border: 1px solid black;\n//             display: flex; justify-content: center; align-items: center;\">\n//         </div>`,\n//         iconSize: [20, 20],\n//         iconAnchor: [15, 20]\n//     });\n// };\n// // ✅ AutoZoom adjusts the map bounds to show all valid points\n// const AutoZoom = ({ locations }) => {\n//     const map = useMap();\n\n//     useEffect(() => {\n//         // 🛑 Filter out locations with missing latitude/longitude\n//         console.log(\"hii&&&\",locations);\n//         const validLocations = locations.filter(loc => \n//             (loc.latitude && loc.longitude) ||\n//             (loc.clinic_latitude && loc.clinic_longitude) ||\n//             (loc.mvz_latitude && loc.mvz_longitude) ||\n//             (loc.asv_latitude && loc.asv_longitude) ||  // Fixed: loc.asv.longitude → loc.asv_longitude\n//             (loc.niedergelassene_latitude && loc.niedergelassene_longitude) ||\n//             (loc.neurologe_latitude && loc.neurologe_longitude) ||\n//             (loc.onkologe_latitude && loc.onkologe_longitude)\n//         );\n\n//         console.log(\"hii&&&\",validLocations.length);\n//         if (validLocations.length > 0) {\n//             const bounds = L.latLngBounds(validLocations.map(loc => [\n//                 loc.latitude || \n//                 loc.clinic_latitude || \n//                 loc.mvz_latitude || \n//                 loc.asv_latitude || \n//                 loc.niedergelassene_latitude || \n//                 loc.neurologe_latitude || \n//                 loc.onkologe_latitude, \n\n//                 loc.longitude || \n//                 loc.clinic_longitude || \n//                 loc.mvz_longitude || \n//                 loc.asv_longitude || \n//                 loc.niedergelassene_longitude || \n//                 loc.neurologe_longitude || \n//                 loc.onkologe_longitude\n//             ]));\n//             map.fitBounds(bounds, { padding: [50, 50] }); // Ensure all points are visible\n//         } else {\n//             console.warn(\"⚠️ No valid locations found for AutoZoom!\");\n//         }\n//     }, [locations, map]);\n\n//     return null; // No UI component, only logic\n// };\n\n// const Map = () => {\n//     const [graphData, setGraphData] = useState([]);                 // Holds clinic/MVZ/etc. data\n//     const [userLocation, setUserLocation] = useState(null);         // User's position\n//     const [locationChoice, setLocationChoice] = useState(\"\");       // Selected location method\n//     const [manualAddress, setManualAddress] = useState(\"\");         // For manual input\n//     // const [selectedLocation, setSelectedLocation] = useState(null); // 🆕 Selected clicked location\n//     // const { setAllLocations } = useLocation();                      // Context function\n//     const { setAllLocations, selectedLocation, setSelectedLocation } = useLocation(); // 🆕 Destructure selectedLocation & setSelectedLocation\n\n//     // 🚀 Get user's current location\n//     const fetchMyLocation = () => {\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition(\n//                 (position) => {\n//                     const lat = position.coords.latitude;\n//                     const lon = position.coords.longitude;\n\n//                     if (lat && lon) {\n//                         setUserLocation({\n//                             latitude: lat,\n//                             longitude: lon\n//                         });\n//                         console.log(\"✅ User location set:\", lat, lon);\n//                     } else {\n//                         console.warn(\"⚠️ Invalid user location received.\");\n//                     }\n//                 },\n//                 (error) => {\n//                     console.error(\"❌ Error getting user location:\", error);\n//                 }\n//             );\n//         }\n//     };\n//     // 📍 Handle click on marker → save clicked location\n//     const handleMarkerClick = (location) => {\n//         setSelectedLocation(location); // 🆕 Sets the selected location on click\n//     };\n\n//     // 🎯 Handle location selection\n//     const handleLocationChoice = (choice) => {\n//         setLocationChoice(choice);\n//         setUserLocation(null);\n//         setManualAddress(\"\"); \n//         if (choice === \"my-location\") {\n//             fetchMyLocation();\n//         }\n//     };\n\n//     // 🎯 Convert address to latitude & longitude using OpenStreetMap's Nominatim API\n//     const handleManualAddressSearch = async () => {\n//         if (!manualAddress.trim()) {\n//             alert(\"Please enter a valid address.\");\n//             return;\n//         }\n//         try {\n//             const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n//             const data = await response.json();\n//             if (data.length > 0 && data[0].lat && data[0].lon) {\n//                 setUserLocation({\n//                     latitude: parseFloat(data[0].lat),\n//                     longitude: parseFloat(data[0].lon)\n//                 });\n//             } else {\n//                 alert(\"Address not found. Please enter a more precise location.\");\n//                 console.warn(\"❌ No valid latitude/longitude found in API response.\");\n//             }\n//         } catch (error) {\n//             console.error(\"Error fetching geolocation:\", error);\n//             alert(\"Failed to fetch location. Try again later.\");\n//         }\n//     };\n\n//     const allLocations = useMemo(() => {\n//         const locations = [...graphData];\n\n//         if (userLocation) {\n//             locations.push({ clinic_name: \"Your Location\", provider_type: \"User\", ...userLocation });\n//         } else if (graphData.length > 0 && graphData[0].search_center_lat && graphData[0].search_center_lon) {\n//             locations.push({\n//                 clinic_name: \"Zentrum (Umkreis)\",\n//                 provider_type: \"Radius\",\n//                 latitude: graphData[0].search_center_lat,\n//                 longitude: graphData[0].search_center_lon\n//             });\n//         }\n\n//         return locations;\n//     }, [graphData, userLocation]);\n\n//     // ✅ Update locations when changed\n//     useEffect(() => {\n//         setAllLocations(allLocations);\n//     }, [allLocations, setAllLocations]);\n\n//     return (\n\n//         <div style={{\n//             backgroundColor: \"#f0ffff\", // Light blue background\n//             border: \"1px solid #b3e5fc\",\n//             borderRadius: \"10px\",\n//             padding: \"10px\",\n//             marginBottom: \"15px\",\n//             boxShadow: \"0px 2px 10px rgba(0,0,0,0.1)\"\n//         }}>\n//         <h3>Wählen Sie Ihren Standort:</h3>\n//         <div style={{ display: \"flex\", gap: \"10px\", marginBottom: \"10px\", paddingLeft: \"10px\" }}>\n//             <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"my-location\")}>Meinen Standort verwenden</Button>\n//             <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"manual\")}>Standort manuell eingeben</Button>\n//         </div>\n\n//             {locationChoice === \"manual\" && (\n//                 <div style={{ paddingLeft: \"10px\",marginBottom: \"10px\" }}>\n//                     <input \n//                         type=\"text\" \n//                         placeholder=\"Geben Sie Ihre Adresse ein\" \n//                         value={manualAddress} \n//                         onChange={(e) => setManualAddress(e.target.value)}\n//                         style={{ padding: \"8px\", width: \"250px\", border: \"1px solid #ccc\", borderRadius: \"5px\", marginRight: \"10px\" }} \n//                     />\n//                     {/* <button onClick={handleManualAddressSearch}>Search Address</button> */}\n\n//                     {/* ✅ Styled \"Search Address\" Button */}\n//                     <button \n//                         onClick={handleManualAddressSearch} \n//                         style={{\n//                             padding: \"8px 12px\",\n//                             borderRadius: \"5px\",\n//                             backgroundColor: \"#007BFF\", /* Primary blue */\n//                             color: \"white\",\n//                             border: \"none\",\n//                             cursor: \"pointer\",\n//                             fontSize: \"14px\",\n//                             fontWeight: \"bold\",\n//                             transition: \"background-color 0.3s\",\n//                             boxShadow: \"0px 2px 5px rgba(0, 0, 0, 0.2)\"\n//                         }}\n//                         onMouseOver={(e) => e.target.style.backgroundColor = \"#0056b3\"} /* Hover effect */\n//                         onMouseOut={(e) => e.target.style.backgroundColor = \"#007BFF\"} \n//                     >\n//                         Search Address\n//                     </button>\n//                 </div>\n//             )}\n\n//             <SearchForm setGraphData={setGraphData} />\n\n//             <div style={{\n//                 width: \"59%\",\n//                 height: \"500px\",\n//                 border: \"1px solid #b3e5fc\",\n//                 borderRadius: \"10px\",\n//                 padding: \"10px\",\n//                 margin: \"10px 0\", // Ensure no auto-centering\n//                 boxShadow: \"0px 4px 10px rgba(0,0,0,0.15)\",\n//                 backgroundColor: \"white\", // White background for contrast\n//                 display: \"flex\", // Ensures content aligns properly\n//                 alignItems: \"center\", // Aligns map within box\n//                 justifyContent: \"center\" // Aligns the map box to the left\n//             }}>\n//             <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: \"100%\", width: \"100%\", borderRadius: \"8px\" }}>\n//                 <TileLayer\n//                     attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n//                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//                 />\n\n//                 {/* AutoZoom Component to adjust map bounds dynamically */}\n\n//                 {/* <AutoZoom locations={allLocations} /> */}\n//                 {allLocations.length > 0 ? (\n\n//                     <AutoZoom locations={allLocations} />\n//                 ) : (\n//                     <div style={{ textAlign: \"center\", fontSize: \"18px\", color: \"red\", marginTop: \"20px\" }}>\n//                         ❌ No locations found. Try a different search.\n//                     </div>\n//                 )}\n//                 {/* 🎯 Draw user location marker */}\n//                 {userLocation &&  (\n//                     <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\n//                         <Popup><strong>Your Location</strong></Popup>\n//                     </Marker>\n//                 )}\n\n//                 {/* 🎯 Draw clinic markers */}\n//                 {graphData.map((data, index) => {\n//                     const color = lineColors[index % lineColors.length]; // Match line & marker color\n//                     // Extract valid lat/lng values from multiple possible sources\n//                     const latitude = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\n//                     const longitude = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\n//                     // 🛑 Skip if latitude or longitude is missing\n//                     if (!latitude || !longitude) {\n//                         console.warn(`⚠️ Skipping invalid location: ${data.clinic_name || data.mvz_name || data.neurologe_name || data.onkologe_name}`);\n//                         return null;\n//                     }\n\n//                     return (\n//                         // <Marker key={index} position={[latitude, longitude]} icon={getColoredClinicIcon(color)}>\n//                         <Marker \n//                             key={index} \n//                             position={[latitude, longitude]} \n//                             icon={getColoredClinicIcon(color)}\n//                             eventHandlers={{\n//                                 click: () => handleMarkerClick(data)\n//                             }} // 🆕 Assign click event handler\n//                         >\n//                             <Popup>\n//                                 <strong>{data.clinic_name || data.mvz_name || data.neurologe_name || data.onkologe_name}</strong><br />\n//                                 <strong>City:</strong> {data.clinic_city || data.mvz_city || data.neurologe_city || data.onkologe_city} <br />\n//                                 {/* <strong>Address:</strong> {data.clinic_address || data.mvz_address || data.neurologe_address || data.onkologe_address || \"N/A\"} <br />\n//                                 <strong>Beds:</strong> {data.clinic_number_of_beds || \"N/A\"} */}\n//                             </Popup>\n//                         </Marker>\n//                     );\n//                 })}\n//                 {/* 🎯 Draw lines between user location & clinics */}\n//                 {userLocation && graphData.map((data, index) => {\n//         const color = lineColors[index % lineColors.length]; // Match line color\n\n//         // Extract lat/lng for the target location\n//         const latitude = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\n//         const longitude = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\n\n//         // 🛑 Skip if lat/lng is missing\n//         if (!latitude || !longitude) return null;\n\n//         return (\n//             <Polyline \n//                 key={index} \n//                 positions={[\n//                     [userLocation.latitude, userLocation.longitude], \n//                     [latitude, longitude]\n//                 ]} \n//                 color={color} \n//                 weight={2} \n//             />\n//         );\n//     })}\n//             </MapContainer>\n//         </div>\n//         </div>\n//     );\n// };\n\n// export default Map;\n\nimport React, { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport SearchForm from \"./SearchForm\";\nimport L from \"leaflet\";\nimport { useLocation } from \"./LocationContext\";\nimport Button from '@mui/material/Button';\n\n// Constants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LINE_COLORS = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\nconst MAP_CONTAINER_STYLE = {\n  width: \"59%\",\n  height: \"500px\",\n  border: \"1px solid #b3e5fc\",\n  borderRadius: \"10px\",\n  padding: \"10px\",\n  margin: \"10px 0\",\n  boxShadow: \"0px 4px 10px rgba(0,0,0,0.15)\",\n  backgroundColor: \"white\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\"\n};\n\n// Custom Icons\nconst userIcon = L.icon({\n  iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\n  iconSize: [35, 35],\n  iconAnchor: [17, 35]\n});\nconst getColoredClinicIcon = color => L.divIcon({\n  className: \"custom-clinic-marker\",\n  html: `<div style=\"\n    width: 30px; height: 30px; \n    background-color: ${color}; \n    border-radius: 50%; \n    border: 1px solid black;\n    display: flex; justify-content: center; align-items: center;\">\n  </div>`,\n  iconSize: [20, 20],\n  iconAnchor: [15, 20]\n});\n\n// AutoZoom Component\nconst AutoZoom = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_c = _s(({\n  locations\n}) => {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    const validLocations = locations.filter(loc => loc.latitude && loc.longitude || loc.clinic_latitude && loc.clinic_longitude || loc.mvz_latitude && loc.mvz_longitude || loc.asv_latitude && loc.asv_longitude || loc.niedergelassene_latitude && loc.niedergelassene_longitude || loc.neurologe_latitude && loc.neurologe_longitude || loc.onkologe_latitude && loc.onkologe_longitude);\n    if (validLocations.length > 0) {\n      const bounds = L.latLngBounds(validLocations.map(loc => [loc.latitude || loc.clinic_latitude || loc.mvz_latitude || loc.asv_latitude || loc.niedergelassene_latitude || loc.neurologe_latitude || loc.onkologe_latitude, loc.longitude || loc.clinic_longitude || loc.mvz_longitude || loc.asv_longitude || loc.niedergelassene_longitude || loc.neurologe_longitude || loc.onkologe_longitude]));\n      map.fitBounds(bounds, {\n        padding: [50, 50]\n      });\n    }\n  }, [locations, map]);\n  return null;\n}, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n})), \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c2 = AutoZoom;\nconst Map = () => {\n  _s2();\n  const [graphData, setGraphData] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const [locationChoice, setLocationChoice] = useState(\"\");\n  const [manualAddress, setManualAddress] = useState(\"\");\n  const {\n    setAllLocations,\n    selectedLocation,\n    setSelectedLocation\n  } = useLocation();\n\n  // Memoized fetch location function\n  const fetchMyLocation = useCallback(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude: lat,\n          longitude: lon\n        } = position.coords;\n        if (lat && lon) {\n          setUserLocation({\n            latitude: lat,\n            longitude: lon\n          });\n        }\n      }, error => console.error(\"Error getting user location:\", error));\n    }\n  }, []);\n  const handleMarkerClick = useCallback(location => {\n    setSelectedLocation(location);\n  }, [setSelectedLocation]);\n  const handleLocationChoice = useCallback(choice => {\n    setLocationChoice(choice);\n    setUserLocation(null);\n    setManualAddress(\"\");\n    if (choice === \"my-location\") {\n      fetchMyLocation();\n    }\n  }, [fetchMyLocation]);\n  const handleManualAddressSearch = useCallback(async () => {\n    if (!manualAddress.trim()) {\n      alert(\"Please enter a valid address.\");\n      return;\n    }\n    try {\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n      const data = await response.json();\n      if (data.length > 0 && data[0].lat && data[0].lon) {\n        setUserLocation({\n          latitude: parseFloat(data[0].lat),\n          longitude: parseFloat(data[0].lon)\n        });\n      } else {\n        alert(\"Address not found. Please enter a more precise location.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching geolocation:\", error);\n      alert(\"Failed to fetch location. Try again later.\");\n    }\n  }, [manualAddress]);\n  const allLocations = useMemo(() => {\n    const locations = [...graphData];\n    if (userLocation) {\n      locations.push({\n        clinic_name: \"Your Location\",\n        provider_type: \"User\",\n        ...userLocation\n      });\n    } else if (graphData.length > 0 && graphData[0].search_center_lat && graphData[0].search_center_lon) {\n      locations.push({\n        clinic_name: \"Zentrum (Umkreis)\",\n        provider_type: \"Radius\",\n        latitude: graphData[0].search_center_lat,\n        longitude: graphData[0].search_center_lon\n      });\n    }\n    return locations;\n  }, [graphData, userLocation]);\n  useEffect(() => {\n    setAllLocations(allLocations);\n  }, [allLocations, setAllLocations]);\n  const renderMarkers = useMemo(() => {\n    return graphData.map((data, index) => {\n      const color = LINE_COLORS[index % LINE_COLORS.length];\n      const latitude = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\n      const longitude = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\n      if (!latitude || !longitude) return null;\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: [latitude, longitude],\n        icon: getColoredClinicIcon(color),\n        eventHandlers: {\n          click: () => handleMarkerClick(data)\n        },\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: data.clinic_name || data.mvz_name || data.neurologe_name || data.onkologe_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 110\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"City:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 13\n          }, this), \" \", data.clinic_city || data.mvz_city || data.neurologe_city || data.onkologe_city]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 11\n        }, this)\n      }, `marker-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 9\n      }, this);\n    });\n  }, [graphData, handleMarkerClick]);\n  const renderPolylines = useMemo(() => {\n    if (!userLocation) return null;\n    return graphData.map((data, index) => {\n      const color = LINE_COLORS[index % LINE_COLORS.length];\n      const latitude = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\n      const longitude = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\n      if (!latitude || !longitude) return null;\n      return /*#__PURE__*/_jsxDEV(Polyline, {\n        positions: [[userLocation.latitude, userLocation.longitude], [latitude, longitude]],\n        color: color,\n        weight: 2\n      }, `polyline-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 9\n      }, this);\n    });\n  }, [graphData, userLocation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: \"#f0ffff\",\n      border: \"1px solid #b3e5fc\",\n      borderRadius: \"10px\",\n      padding: \"10px\",\n      marginBottom: \"15px\",\n      boxShadow: \"0px 2px 10px rgba(0,0,0,0.1)\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"W\\xE4hlen Sie Ihren Standort:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: \"10px\",\n        marginBottom: \"10px\",\n        paddingLeft: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => handleLocationChoice(\"my-location\"),\n        children: \"Meinen Standort verwenden\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => handleLocationChoice(\"manual\"),\n        children: \"Standort manuell eingeben\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 7\n    }, this), locationChoice === \"manual\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingLeft: \"10px\",\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Geben Sie Ihre Adresse ein\",\n        value: manualAddress,\n        onChange: e => setManualAddress(e.target.value),\n        style: {\n          padding: \"8px\",\n          width: \"250px\",\n          border: \"1px solid #ccc\",\n          borderRadius: \"5px\",\n          marginRight: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleManualAddressSearch,\n        style: {\n          padding: \"8px 12px\",\n          borderRadius: \"5px\",\n          backgroundColor: \"#007BFF\",\n          color: \"white\",\n          border: \"none\",\n          cursor: \"pointer\",\n          fontSize: \"14px\",\n          fontWeight: \"bold\",\n          transition: \"background-color 0.3s\",\n          boxShadow: \"0px 2px 5px rgba(0, 0, 0, 0.2)\"\n        },\n        onMouseOver: e => e.target.style.backgroundColor = \"#0056b3\",\n        onMouseOut: e => e.target.style.backgroundColor = \"#007BFF\",\n        children: \"Search Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      setGraphData: setGraphData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: MAP_CONTAINER_STYLE,\n      children: /*#__PURE__*/_jsxDEV(MapContainer, {\n        center: [50.851, 8.015],\n        zoom: 8,\n        scrollWheelZoom: false,\n        style: {\n          height: \"100%\",\n          width: \"100%\",\n          borderRadius: \"8px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 11\n        }, this), allLocations.length > 0 ? /*#__PURE__*/_jsxDEV(AutoZoom, {\n          locations: allLocations\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\",\n            fontSize: \"18px\",\n            color: \"red\",\n            marginTop: \"20px\"\n          },\n          children: \"\\u274C No locations found. Try a different search.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 13\n        }, this), userLocation && /*#__PURE__*/_jsxDEV(Marker, {\n          position: [userLocation.latitude, userLocation.longitude],\n          icon: userIcon,\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Your Location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 616,\n              columnNumber: 22\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 616,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 13\n        }, this), renderMarkers, renderPolylines]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 537,\n    columnNumber: 5\n  }, this);\n};\n_s2(Map, \"Sj59szIIQ/5CRYtytRxESbPP0jw=\", false, function () {\n  return [useLocation];\n});\n_c3 = Map;\nexport default _c4 = /*#__PURE__*/React.memo(Map);\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"AutoZoom$React.memo\");\n$RefreshReg$(_c2, \"AutoZoom\");\n$RefreshReg$(_c3, \"Map\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","MapContainer","TileLayer","useMap","Marker","Popup","Polyline","SearchForm","L","useLocation","Button","jsxDEV","_jsxDEV","LINE_COLORS","MAP_CONTAINER_STYLE","width","height","border","borderRadius","padding","margin","boxShadow","backgroundColor","display","alignItems","justifyContent","userIcon","icon","iconUrl","iconSize","iconAnchor","getColoredClinicIcon","color","divIcon","className","html","AutoZoom","_s","memo","_c","locations","map","validLocations","filter","loc","latitude","longitude","clinic_latitude","clinic_longitude","mvz_latitude","mvz_longitude","asv_latitude","asv_longitude","niedergelassene_latitude","niedergelassene_longitude","neurologe_latitude","neurologe_longitude","onkologe_latitude","onkologe_longitude","length","bounds","latLngBounds","fitBounds","_c2","Map","_s2","graphData","setGraphData","userLocation","setUserLocation","locationChoice","setLocationChoice","manualAddress","setManualAddress","setAllLocations","selectedLocation","setSelectedLocation","fetchMyLocation","navigator","geolocation","getCurrentPosition","position","lat","lon","coords","error","console","handleMarkerClick","location","handleLocationChoice","choice","handleManualAddressSearch","trim","alert","response","fetch","encodeURIComponent","data","json","parseFloat","allLocations","push","clinic_name","provider_type","search_center_lat","search_center_lon","renderMarkers","index","eventHandlers","click","children","mvz_name","neurologe_name","onkologe_name","fileName","_jsxFileName","lineNumber","columnNumber","clinic_city","mvz_city","neurologe_city","onkologe_city","renderPolylines","positions","weight","style","marginBottom","gap","paddingLeft","variant","onClick","type","placeholder","value","onChange","e","target","marginRight","cursor","fontSize","fontWeight","transition","onMouseOver","onMouseOut","center","zoom","scrollWheelZoom","attribution","url","textAlign","marginTop","_c3","_c4","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/map.js"],"sourcesContent":["// import React, { useState, useEffect, useMemo } from \"react\";\r\n// import { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\r\n// import 'leaflet/dist/leaflet.css';\r\n// import SearchForm from \"./SearchForm\";\r\n// import L from \"leaflet\";\r\n// import { useLocation } from \"./LocationContext\";\r\n// import Button from '@mui/material/Button';\r\n\r\n\r\n\r\n\r\n// // 🎯 Predefined colors for clinics, MVZ, ASV\r\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// // 🟢 Custom icons for different provider types\r\n// const userIcon = L.icon({\r\n//     iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\", // Unique user icon\r\n//     iconSize: [35, 35],\r\n//     iconAnchor: [17, 35]\r\n// });\r\n\r\n// // 🏥 Create a circular icon for clinics/MVZ/etc.\r\n// const getColoredClinicIcon = (color) => {\r\n//     return L.divIcon({\r\n//         className: \"custom-clinic-marker\",\r\n//         html: `<div style=\"\r\n//             width: 30px; height: 30px; \r\n//             background-color: ${color}; \r\n//             border-radius: 50%; \r\n//             border: 1px solid black;\r\n//             display: flex; justify-content: center; align-items: center;\">\r\n//         </div>`,\r\n//         iconSize: [20, 20],\r\n//         iconAnchor: [15, 20]\r\n//     });\r\n// };\r\n// // ✅ AutoZoom adjusts the map bounds to show all valid points\r\n// const AutoZoom = ({ locations }) => {\r\n//     const map = useMap();\r\n    \r\n//     useEffect(() => {\r\n//         // 🛑 Filter out locations with missing latitude/longitude\r\n//         console.log(\"hii&&&\",locations);\r\n//         const validLocations = locations.filter(loc => \r\n//             (loc.latitude && loc.longitude) ||\r\n//             (loc.clinic_latitude && loc.clinic_longitude) ||\r\n//             (loc.mvz_latitude && loc.mvz_longitude) ||\r\n//             (loc.asv_latitude && loc.asv_longitude) ||  // Fixed: loc.asv.longitude → loc.asv_longitude\r\n//             (loc.niedergelassene_latitude && loc.niedergelassene_longitude) ||\r\n//             (loc.neurologe_latitude && loc.neurologe_longitude) ||\r\n//             (loc.onkologe_latitude && loc.onkologe_longitude)\r\n//         );\r\n        \r\n\r\n//         console.log(\"hii&&&\",validLocations.length);\r\n//         if (validLocations.length > 0) {\r\n//             const bounds = L.latLngBounds(validLocations.map(loc => [\r\n//                 loc.latitude || \r\n//                 loc.clinic_latitude || \r\n//                 loc.mvz_latitude || \r\n//                 loc.asv_latitude || \r\n//                 loc.niedergelassene_latitude || \r\n//                 loc.neurologe_latitude || \r\n//                 loc.onkologe_latitude, \r\n\r\n//                 loc.longitude || \r\n//                 loc.clinic_longitude || \r\n//                 loc.mvz_longitude || \r\n//                 loc.asv_longitude || \r\n//                 loc.niedergelassene_longitude || \r\n//                 loc.neurologe_longitude || \r\n//                 loc.onkologe_longitude\r\n//             ]));\r\n//             map.fitBounds(bounds, { padding: [50, 50] }); // Ensure all points are visible\r\n//         } else {\r\n//             console.warn(\"⚠️ No valid locations found for AutoZoom!\");\r\n//         }\r\n//     }, [locations, map]);\r\n\r\n//     return null; // No UI component, only logic\r\n// };\r\n\r\n// const Map = () => {\r\n//     const [graphData, setGraphData] = useState([]);                 // Holds clinic/MVZ/etc. data\r\n//     const [userLocation, setUserLocation] = useState(null);         // User's position\r\n//     const [locationChoice, setLocationChoice] = useState(\"\");       // Selected location method\r\n//     const [manualAddress, setManualAddress] = useState(\"\");         // For manual input\r\n//     // const [selectedLocation, setSelectedLocation] = useState(null); // 🆕 Selected clicked location\r\n//     // const { setAllLocations } = useLocation();                      // Context function\r\n//     const { setAllLocations, selectedLocation, setSelectedLocation } = useLocation(); // 🆕 Destructure selectedLocation & setSelectedLocation\r\n\r\n//     // 🚀 Get user's current location\r\n//     const fetchMyLocation = () => {\r\n//         if (navigator.geolocation) {\r\n//             navigator.geolocation.getCurrentPosition(\r\n//                 (position) => {\r\n//                     const lat = position.coords.latitude;\r\n//                     const lon = position.coords.longitude;\r\n    \r\n//                     if (lat && lon) {\r\n//                         setUserLocation({\r\n//                             latitude: lat,\r\n//                             longitude: lon\r\n//                         });\r\n//                         console.log(\"✅ User location set:\", lat, lon);\r\n//                     } else {\r\n//                         console.warn(\"⚠️ Invalid user location received.\");\r\n//                     }\r\n//                 },\r\n//                 (error) => {\r\n//                     console.error(\"❌ Error getting user location:\", error);\r\n//                 }\r\n//             );\r\n//         }\r\n//     };\r\n//     // 📍 Handle click on marker → save clicked location\r\n//     const handleMarkerClick = (location) => {\r\n//         setSelectedLocation(location); // 🆕 Sets the selected location on click\r\n//     };\r\n\r\n//     // 🎯 Handle location selection\r\n//     const handleLocationChoice = (choice) => {\r\n//         setLocationChoice(choice);\r\n//         setUserLocation(null);\r\n//         setManualAddress(\"\"); \r\n//         if (choice === \"my-location\") {\r\n//             fetchMyLocation();\r\n//         }\r\n//     };\r\n\r\n//     // 🎯 Convert address to latitude & longitude using OpenStreetMap's Nominatim API\r\n//     const handleManualAddressSearch = async () => {\r\n//         if (!manualAddress.trim()) {\r\n//             alert(\"Please enter a valid address.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\r\n//             const data = await response.json();\r\n//             if (data.length > 0 && data[0].lat && data[0].lon) {\r\n//                 setUserLocation({\r\n//                     latitude: parseFloat(data[0].lat),\r\n//                     longitude: parseFloat(data[0].lon)\r\n//                 });\r\n//             } else {\r\n//                 alert(\"Address not found. Please enter a more precise location.\");\r\n//                 console.warn(\"❌ No valid latitude/longitude found in API response.\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error fetching geolocation:\", error);\r\n//             alert(\"Failed to fetch location. Try again later.\");\r\n//         }\r\n//     };\r\n    \r\n//     const allLocations = useMemo(() => {\r\n//         const locations = [...graphData];\r\n    \r\n//         if (userLocation) {\r\n//             locations.push({ clinic_name: \"Your Location\", provider_type: \"User\", ...userLocation });\r\n//         } else if (graphData.length > 0 && graphData[0].search_center_lat && graphData[0].search_center_lon) {\r\n//             locations.push({\r\n//                 clinic_name: \"Zentrum (Umkreis)\",\r\n//                 provider_type: \"Radius\",\r\n//                 latitude: graphData[0].search_center_lat,\r\n//                 longitude: graphData[0].search_center_lon\r\n//             });\r\n//         }\r\n    \r\n//         return locations;\r\n//     }, [graphData, userLocation]);\r\n    \r\n\r\n//     // ✅ Update locations when changed\r\n//     useEffect(() => {\r\n//         setAllLocations(allLocations);\r\n//     }, [allLocations, setAllLocations]);\r\n    \r\n//     return (\r\n         \r\n        \r\n//         <div style={{\r\n//             backgroundColor: \"#f0ffff\", // Light blue background\r\n//             border: \"1px solid #b3e5fc\",\r\n//             borderRadius: \"10px\",\r\n//             padding: \"10px\",\r\n//             marginBottom: \"15px\",\r\n//             boxShadow: \"0px 2px 10px rgba(0,0,0,0.1)\"\r\n//         }}>\r\n//         <h3>Wählen Sie Ihren Standort:</h3>\r\n//         <div style={{ display: \"flex\", gap: \"10px\", marginBottom: \"10px\", paddingLeft: \"10px\" }}>\r\n//             <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"my-location\")}>Meinen Standort verwenden</Button>\r\n//             <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"manual\")}>Standort manuell eingeben</Button>\r\n//         </div>\r\n\r\n//             {locationChoice === \"manual\" && (\r\n//                 <div style={{ paddingLeft: \"10px\",marginBottom: \"10px\" }}>\r\n//                     <input \r\n//                         type=\"text\" \r\n//                         placeholder=\"Geben Sie Ihre Adresse ein\" \r\n//                         value={manualAddress} \r\n//                         onChange={(e) => setManualAddress(e.target.value)}\r\n//                         style={{ padding: \"8px\", width: \"250px\", border: \"1px solid #ccc\", borderRadius: \"5px\", marginRight: \"10px\" }} \r\n//                     />\r\n//                     {/* <button onClick={handleManualAddressSearch}>Search Address</button> */}\r\n                            \r\n//                     {/* ✅ Styled \"Search Address\" Button */}\r\n//                     <button \r\n//                         onClick={handleManualAddressSearch} \r\n//                         style={{\r\n//                             padding: \"8px 12px\",\r\n//                             borderRadius: \"5px\",\r\n//                             backgroundColor: \"#007BFF\", /* Primary blue */\r\n//                             color: \"white\",\r\n//                             border: \"none\",\r\n//                             cursor: \"pointer\",\r\n//                             fontSize: \"14px\",\r\n//                             fontWeight: \"bold\",\r\n//                             transition: \"background-color 0.3s\",\r\n//                             boxShadow: \"0px 2px 5px rgba(0, 0, 0, 0.2)\"\r\n//                         }}\r\n//                         onMouseOver={(e) => e.target.style.backgroundColor = \"#0056b3\"} /* Hover effect */\r\n//                         onMouseOut={(e) => e.target.style.backgroundColor = \"#007BFF\"} \r\n//                     >\r\n//                         Search Address\r\n//                     </button>\r\n//                 </div>\r\n//             )}\r\n\r\n//             <SearchForm setGraphData={setGraphData} />\r\n            \r\n//             <div style={{\r\n//                 width: \"59%\",\r\n//                 height: \"500px\",\r\n//                 border: \"1px solid #b3e5fc\",\r\n//                 borderRadius: \"10px\",\r\n//                 padding: \"10px\",\r\n//                 margin: \"10px 0\", // Ensure no auto-centering\r\n//                 boxShadow: \"0px 4px 10px rgba(0,0,0,0.15)\",\r\n//                 backgroundColor: \"white\", // White background for contrast\r\n//                 display: \"flex\", // Ensures content aligns properly\r\n//                 alignItems: \"center\", // Aligns map within box\r\n//                 justifyContent: \"center\" // Aligns the map box to the left\r\n//             }}>\r\n//             <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: \"100%\", width: \"100%\", borderRadius: \"8px\" }}>\r\n//                 <TileLayer\r\n//                     attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n//                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n//                 />\r\n\r\n//                 {/* AutoZoom Component to adjust map bounds dynamically */}\r\n                \r\n//                 {/* <AutoZoom locations={allLocations} /> */}\r\n//                 {allLocations.length > 0 ? (\r\n                    \r\n//                     <AutoZoom locations={allLocations} />\r\n//                 ) : (\r\n//                     <div style={{ textAlign: \"center\", fontSize: \"18px\", color: \"red\", marginTop: \"20px\" }}>\r\n//                         ❌ No locations found. Try a different search.\r\n//                     </div>\r\n//                 )}\r\n//                 {/* 🎯 Draw user location marker */}\r\n//                 {userLocation &&  (\r\n//                     <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\r\n//                         <Popup><strong>Your Location</strong></Popup>\r\n//                     </Marker>\r\n//                 )}\r\n                \r\n//                 {/* 🎯 Draw clinic markers */}\r\n//                 {graphData.map((data, index) => {\r\n//                     const color = lineColors[index % lineColors.length]; // Match line & marker color\r\n//                     // Extract valid lat/lng values from multiple possible sources\r\n//                     const latitude = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\r\n//                     const longitude = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\r\n//                     // 🛑 Skip if latitude or longitude is missing\r\n//                     if (!latitude || !longitude) {\r\n//                         console.warn(`⚠️ Skipping invalid location: ${data.clinic_name || data.mvz_name || data.neurologe_name || data.onkologe_name}`);\r\n//                         return null;\r\n//                     }\r\n\r\n//                     return (\r\n//                         // <Marker key={index} position={[latitude, longitude]} icon={getColoredClinicIcon(color)}>\r\n//                         <Marker \r\n//                             key={index} \r\n//                             position={[latitude, longitude]} \r\n//                             icon={getColoredClinicIcon(color)}\r\n//                             eventHandlers={{\r\n//                                 click: () => handleMarkerClick(data)\r\n//                             }} // 🆕 Assign click event handler\r\n//                         >\r\n//                             <Popup>\r\n//                                 <strong>{data.clinic_name || data.mvz_name || data.neurologe_name || data.onkologe_name}</strong><br />\r\n//                                 <strong>City:</strong> {data.clinic_city || data.mvz_city || data.neurologe_city || data.onkologe_city} <br />\r\n//                                 {/* <strong>Address:</strong> {data.clinic_address || data.mvz_address || data.neurologe_address || data.onkologe_address || \"N/A\"} <br />\r\n//                                 <strong>Beds:</strong> {data.clinic_number_of_beds || \"N/A\"} */}\r\n//                             </Popup>\r\n//                         </Marker>\r\n//                     );\r\n//                 })}\r\n//                 {/* 🎯 Draw lines between user location & clinics */}\r\n//                 {userLocation && graphData.map((data, index) => {\r\n//         const color = lineColors[index % lineColors.length]; // Match line color\r\n\r\n//         // Extract lat/lng for the target location\r\n//         const latitude = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\r\n//         const longitude = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\r\n\r\n//         // 🛑 Skip if lat/lng is missing\r\n//         if (!latitude || !longitude) return null;\r\n\r\n//         return (\r\n//             <Polyline \r\n//                 key={index} \r\n//                 positions={[\r\n//                     [userLocation.latitude, userLocation.longitude], \r\n//                     [latitude, longitude]\r\n//                 ]} \r\n//                 color={color} \r\n//                 weight={2} \r\n//             />\r\n//         );\r\n//     })}\r\n//             </MapContainer>\r\n//         </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Map;\r\n\r\nimport React, { useState, useEffect, useMemo, useCallback } from \"react\";\r\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport SearchForm from \"./SearchForm\";\r\nimport L from \"leaflet\";\r\nimport { useLocation } from \"./LocationContext\";\r\nimport Button from '@mui/material/Button';\r\n\r\n// Constants\r\nconst LINE_COLORS = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\nconst MAP_CONTAINER_STYLE = {\r\n  width: \"59%\",\r\n  height: \"500px\",\r\n  border: \"1px solid #b3e5fc\",\r\n  borderRadius: \"10px\",\r\n  padding: \"10px\",\r\n  margin: \"10px 0\",\r\n  boxShadow: \"0px 4px 10px rgba(0,0,0,0.15)\",\r\n  backgroundColor: \"white\",\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\"\r\n};\r\n\r\n// Custom Icons\r\nconst userIcon = L.icon({\r\n  iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\r\n  iconSize: [35, 35],\r\n  iconAnchor: [17, 35]\r\n});\r\n\r\nconst getColoredClinicIcon = (color) => L.divIcon({\r\n  className: \"custom-clinic-marker\",\r\n  html: `<div style=\"\r\n    width: 30px; height: 30px; \r\n    background-color: ${color}; \r\n    border-radius: 50%; \r\n    border: 1px solid black;\r\n    display: flex; justify-content: center; align-items: center;\">\r\n  </div>`,\r\n  iconSize: [20, 20],\r\n  iconAnchor: [15, 20]\r\n});\r\n\r\n// AutoZoom Component\r\nconst AutoZoom = React.memo(({ locations }) => {\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    const validLocations = locations.filter(loc => \r\n      (loc.latitude && loc.longitude) ||\r\n      (loc.clinic_latitude && loc.clinic_longitude) ||\r\n      (loc.mvz_latitude && loc.mvz_longitude) ||\r\n      (loc.asv_latitude && loc.asv_longitude) ||\r\n      (loc.niedergelassene_latitude && loc.niedergelassene_longitude) ||\r\n      (loc.neurologe_latitude && loc.neurologe_longitude) ||\r\n      (loc.onkologe_latitude && loc.onkologe_longitude)\r\n    );\r\n\r\n    if (validLocations.length > 0) {\r\n      const bounds = L.latLngBounds(validLocations.map(loc => [\r\n        loc.latitude || loc.clinic_latitude || loc.mvz_latitude || \r\n        loc.asv_latitude || loc.niedergelassene_latitude || \r\n        loc.neurologe_latitude || loc.onkologe_latitude,\r\n        \r\n        loc.longitude || loc.clinic_longitude || loc.mvz_longitude || \r\n        loc.asv_longitude || loc.niedergelassene_longitude || \r\n        loc.neurologe_longitude || loc.onkologe_longitude\r\n      ]));\r\n      map.fitBounds(bounds, { padding: [50, 50] });\r\n    }\r\n  }, [locations, map]);\r\n\r\n  return null;\r\n});\r\n\r\nconst Map = () => {\r\n  const [graphData, setGraphData] = useState([]);\r\n  const [userLocation, setUserLocation] = useState(null);\r\n  const [locationChoice, setLocationChoice] = useState(\"\");\r\n  const [manualAddress, setManualAddress] = useState(\"\");\r\n  const { setAllLocations, selectedLocation, setSelectedLocation } = useLocation();\r\n\r\n  // Memoized fetch location function\r\n  const fetchMyLocation = useCallback(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude: lat, longitude: lon } = position.coords;\r\n          if (lat && lon) {\r\n            setUserLocation({ latitude: lat, longitude: lon });\r\n          }\r\n        },\r\n        (error) => console.error(\"Error getting user location:\", error)\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  const handleMarkerClick = useCallback((location) => {\r\n    setSelectedLocation(location);\r\n  }, [setSelectedLocation]);\r\n\r\n  const handleLocationChoice = useCallback((choice) => {\r\n    setLocationChoice(choice);\r\n    setUserLocation(null);\r\n    setManualAddress(\"\");\r\n    if (choice === \"my-location\") {\r\n      fetchMyLocation();\r\n    }\r\n  }, [fetchMyLocation]);\r\n\r\n  const handleManualAddressSearch = useCallback(async () => {\r\n    if (!manualAddress.trim()) {\r\n      alert(\"Please enter a valid address.\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const response = await fetch(\r\n        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`\r\n      );\r\n      const data = await response.json();\r\n      \r\n      if (data.length > 0 && data[0].lat && data[0].lon) {\r\n        setUserLocation({\r\n          latitude: parseFloat(data[0].lat),\r\n          longitude: parseFloat(data[0].lon)\r\n        });\r\n      } else {\r\n        alert(\"Address not found. Please enter a more precise location.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching geolocation:\", error);\r\n      alert(\"Failed to fetch location. Try again later.\");\r\n    }\r\n  }, [manualAddress]);\r\n\r\n  const allLocations = useMemo(() => {\r\n    const locations = [...graphData];\r\n    \r\n    if (userLocation) {\r\n      locations.push({ clinic_name: \"Your Location\", provider_type: \"User\", ...userLocation });\r\n    } else if (graphData.length > 0 && graphData[0].search_center_lat && graphData[0].search_center_lon) {\r\n      locations.push({\r\n        clinic_name: \"Zentrum (Umkreis)\",\r\n        provider_type: \"Radius\",\r\n        latitude: graphData[0].search_center_lat,\r\n        longitude: graphData[0].search_center_lon\r\n      });\r\n    }\r\n    \r\n    return locations;\r\n  }, [graphData, userLocation]);\r\n\r\n  useEffect(() => {\r\n    setAllLocations(allLocations);\r\n  }, [allLocations, setAllLocations]);\r\n\r\n  const renderMarkers = useMemo(() => {\r\n    return graphData.map((data, index) => {\r\n      const color = LINE_COLORS[index % LINE_COLORS.length];\r\n      const latitude = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\r\n      const longitude = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\r\n\r\n      if (!latitude || !longitude) return null;\r\n\r\n      return (\r\n        <Marker \r\n          key={`marker-${index}`} \r\n          position={[latitude, longitude]} \r\n          icon={getColoredClinicIcon(color)}\r\n          eventHandlers={{ click: () => handleMarkerClick(data) }}\r\n        >\r\n          <Popup>\r\n            <strong>{data.clinic_name || data.mvz_name || data.neurologe_name || data.onkologe_name}</strong><br />\r\n            <strong>City:</strong> {data.clinic_city || data.mvz_city || data.neurologe_city || data.onkologe_city}\r\n          </Popup>\r\n        </Marker>\r\n      );\r\n    });\r\n  }, [graphData, handleMarkerClick]);\r\n\r\n  const renderPolylines = useMemo(() => {\r\n    if (!userLocation) return null;\r\n\r\n    return graphData.map((data, index) => {\r\n      const color = LINE_COLORS[index % LINE_COLORS.length];\r\n      const latitude = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\r\n      const longitude = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\r\n\r\n      if (!latitude || !longitude) return null;\r\n\r\n      return (\r\n        <Polyline \r\n          key={`polyline-${index}`}\r\n          positions={[\r\n            [userLocation.latitude, userLocation.longitude], \r\n            [latitude, longitude]\r\n          ]} \r\n          color={color} \r\n          weight={2} \r\n        />\r\n      );\r\n    });\r\n  }, [graphData, userLocation]);\r\n\r\n  return (\r\n    <div style={{\r\n      backgroundColor: \"#f0ffff\",\r\n      border: \"1px solid #b3e5fc\",\r\n      borderRadius: \"10px\",\r\n      padding: \"10px\",\r\n      marginBottom: \"15px\",\r\n      boxShadow: \"0px 2px 10px rgba(0,0,0,0.1)\"\r\n    }}>\r\n      <h3>Wählen Sie Ihren Standort:</h3>\r\n      <div style={{ display: \"flex\", gap: \"10px\", marginBottom: \"10px\", paddingLeft: \"10px\" }}>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"my-location\")}>\r\n          Meinen Standort verwenden\r\n        </Button>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"manual\")}>\r\n          Standort manuell eingeben\r\n        </Button>\r\n      </div>\r\n\r\n      {locationChoice === \"manual\" && (\r\n        <div style={{ paddingLeft: \"10px\", marginBottom: \"10px\" }}>\r\n          <input \r\n            type=\"text\" \r\n            placeholder=\"Geben Sie Ihre Adresse ein\" \r\n            value={manualAddress} \r\n            onChange={(e) => setManualAddress(e.target.value)}\r\n            style={{ \r\n              padding: \"8px\", \r\n              width: \"250px\", \r\n              border: \"1px solid #ccc\", \r\n              borderRadius: \"5px\", \r\n              marginRight: \"10px\" \r\n            }} \r\n          />\r\n          <button \r\n            onClick={handleManualAddressSearch}\r\n            style={{\r\n              padding: \"8px 12px\",\r\n              borderRadius: \"5px\",\r\n              backgroundColor: \"#007BFF\",\r\n              color: \"white\",\r\n              border: \"none\",\r\n              cursor: \"pointer\",\r\n              fontSize: \"14px\",\r\n              fontWeight: \"bold\",\r\n              transition: \"background-color 0.3s\",\r\n              boxShadow: \"0px 2px 5px rgba(0, 0, 0, 0.2)\"\r\n            }}\r\n            onMouseOver={(e) => e.target.style.backgroundColor = \"#0056b3\"}\r\n            onMouseOut={(e) => e.target.style.backgroundColor = \"#007BFF\"} \r\n          >\r\n            Search Address\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      <SearchForm setGraphData={setGraphData} />\r\n      \r\n      <div style={MAP_CONTAINER_STYLE}>\r\n        <MapContainer \r\n          center={[50.851, 8.015]} \r\n          zoom={8} \r\n          scrollWheelZoom={false} \r\n          style={{ height: \"100%\", width: \"100%\", borderRadius: \"8px\" }}\r\n        >\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n\r\n          {allLocations.length > 0 ? (\r\n            <AutoZoom locations={allLocations} />\r\n          ) : (\r\n            <div style={{ textAlign: \"center\", fontSize: \"18px\", color: \"red\", marginTop: \"20px\" }}>\r\n              ❌ No locations found. Try a different search.\r\n            </div>\r\n          )}\r\n\r\n          {userLocation && (\r\n            <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\r\n              <Popup><strong>Your Location</strong></Popup>\r\n            </Marker>\r\n          )}\r\n          \r\n          {renderMarkers}\r\n          {renderPolylines}\r\n        </MapContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Map);"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}