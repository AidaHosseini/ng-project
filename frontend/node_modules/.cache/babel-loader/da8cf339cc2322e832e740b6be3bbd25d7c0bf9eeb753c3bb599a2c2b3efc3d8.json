{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\map.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useState, useEffect, useMemo } from \"react\";\n// import { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\n// import 'leaflet/dist/leaflet.css';\n// import SearchForm from \"./SearchForm\";\n// import L from \"leaflet\";\n// import { useLocation } from \"./LocationContext\";\n\n// // üé® Dynamic Marker Icons based on Provider Type and Bed Count\n// const getCustomIcon = (providerType, bedCount) => {\n//     let iconSize = bedCount ? Math.min(50, Math.max(20, bedCount / 15)) : 25; // Adjust icon size\n//     let iconUrl = \"\";\n\n//     switch (providerType) {\n//         case \"Clinic\":\n//             iconUrl = \"https://cdn-icons-png.flaticon.com/512/2874/2874783.png\"; // Hospital Icon\n//             break;\n//         case \"MVZ\":\n//             iconUrl = \"https://cdn-icons-png.flaticon.com/512/3062/3062634.png\"; // Medical Practice Icon\n//             iconSize = 25; // Fixed small size\n//             break;\n//         case \"ASV\":\n//             iconUrl = \"https://cdn-icons-png.flaticon.com/512/1048/1048953.png\"; // ASV Icon\n//             iconSize = 25; // Fixed small size\n//             break;\n//         case \"User\":\n//             iconUrl = \"https://cdn-icons-png.flaticon.com/512/684/684908.png\"; // User Location Icon\n//             iconSize = 30;\n//             break;\n//         default:\n//             iconUrl = \"https://cdn-icons-png.flaticon.com/512/684/684908.png\"; // Default location pin\n//             iconSize = 25;\n//             break;\n//     }\n\n//     return new L.Icon({\n//         iconUrl,\n//         iconSize: [iconSize, iconSize],\n//         iconAnchor: [iconSize / 2, iconSize],\n//     });\n// };\n\n// // üé® Predefined colors for lines\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// // üéØ Auto-zoom Component\n// const AutoZoom = ({ locations }) => {\n//     const map = useMap();\n//     useEffect(() => {\n//         if (locations.length > 0) {\n//             const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\n//             map.fitBounds(bounds, { padding: [50, 50] });\n//         }\n//     }, [locations, map]);\n//     return null;\n// };\n\n// const Map = () => {\n//     const [graphData, setGraphData] = useState([]);\n//     const [userLocation, setUserLocation] = useState(null);\n//     const [locationChoice, setLocationChoice] = useState(\"\"); // \"my-location\" or \"manual\"\n//     const [manualAddress, setManualAddress] = useState(\"\"); // User's address input\n//     const { setAllLocations } = useLocation();\n\n//     // üìç Fetch user's current location\n//     const fetchMyLocation = () => {\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition(\n//                 (position) => {\n//                     setUserLocation({\n//                         latitude: position.coords.latitude,\n//                         longitude: position.coords.longitude\n//                     });\n//                 },\n//                 (error) => {\n//                     console.error(\"Error getting location:\", error);\n//                 }\n//             );\n//         }\n//     };\n\n//     // üìç Handle location selection\n//     const handleLocationChoice = (choice) => {\n//         setLocationChoice(choice);\n//         setUserLocation(null);\n//         setManualAddress(\"\");\n//         if (choice === \"my-location\") {\n//             fetchMyLocation();\n//         }\n//     };\n\n//     // üìç Convert address to lat/lon using OpenStreetMap's API\n//     const handleManualAddressSearch = async () => {\n//         if (!manualAddress.trim()) {\n//             alert(\"Please enter a valid address.\");\n//             return;\n//         }\n//         try {\n//             const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n//             const data = await response.json();\n//             if (data.length > 0) {\n//                 setUserLocation({\n//                     latitude: parseFloat(data[0].lat),\n//                     longitude: parseFloat(data[0].lon)\n//                 });\n//             } else {\n//                 alert(\"Address not found. Please enter a more precise location.\");\n//             }\n//         } catch (error) {\n//             console.error(\"Error fetching geolocation:\", error);\n//             alert(\"Failed to fetch location. Try again later.\");\n//         }\n//     };\n\n//     // üìå Memoize locations\n//     const allLocations = useMemo(() => {\n//         const locations = [...graphData];\n//         if (userLocation) {\n//             locations.push({ clinic_name: \"Your Location\", provider_type: \"User\", ...userLocation });\n//         }\n//         return locations;\n//     }, [graphData, userLocation]);\n\n//     // ‚úÖ Update locations in the context\n//     useEffect(() => {\n//         setAllLocations(allLocations);\n//     }, [allLocations, setAllLocations]);\n\n//     return (\n//         <div>\n//             <h1>New Ways of Care Provision and Analysis of Patient Flows</h1>\n\n//             {/* üåç Location Selection */}\n//             <div>\n//                 <h3>Select Your Location:</h3>\n//                 <button onClick={() => handleLocationChoice(\"my-location\")}>Use My Location</button>\n//                 <button onClick={() => handleLocationChoice(\"manual\")}>Enter Location Manually</button>\n//             </div>\n\n//             {/* üìå Manual Address Input */}\n//             {locationChoice === \"manual\" && (\n//                 <div>\n//                     <input \n//                         type=\"text\" \n//                         placeholder=\"Enter your address\" \n//                         value={manualAddress} \n//                         onChange={(e) => setManualAddress(e.target.value)}\n//                     />\n//                     <button onClick={handleManualAddressSearch}>Search Address</button>\n//                 </div>\n//             )}\n\n//             {/* üîé Search Form */}\n//             <SearchForm setGraphData={setGraphData} />\n\n//             {/* üó∫Ô∏è Map Display */}\n//             <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: 500, width: \"60%\" }}>\n//                 <TileLayer\n//                     attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n//                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//                 />\n//                 {/* Auto-Zoom Feature */}\n//                 <AutoZoom locations={allLocations} />\n\n//                 {/* üìç Add Clinic & Provider Markers */}\n//                 {graphData.map((data, index) => (\n//                     <Marker \n//                         key={index} \n//                         position={[data.latitude, data.longitude]} \n//                         icon={getCustomIcon(data.provider_type, data.number_of_beds)}\n//                     >\n//                         <Popup>\n//                             <strong>{data.clinic_name}</strong><br />\n//                             City: {data.city} <br />\n//                             {data.number_of_beds ? `Beds: ${data.number_of_beds}` : \"MVZ / ASV\"}<br />\n//                         </Popup>\n//                     </Marker>\n//                 ))}\n\n//                 {/* üìç User's Location Marker */}\n//                 {userLocation && (\n//                     <Marker position={[userLocation.latitude, userLocation.longitude]} icon={getCustomIcon(\"User\", null)}>\n//                         <Popup>\n//                             <strong>Your Location</strong><br />\n//                             Lat: {userLocation.latitude}, Lng: {userLocation.longitude}\n//                         </Popup>\n//                     </Marker>\n//                 )}\n\n//                 {/* üõ£Ô∏è Draw Lines */}\n//                 {userLocation && graphData.map((data, index) => (\n//                     <Polyline \n//                         key={index} \n//                         positions={[[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]]} \n//                         color={lineColors[index % lineColors.length]} \n//                         weight={3}\n//                     />\n//                 ))}\n//             </MapContainer>\n//         </div>\n//     );\n// };\n\n// export default Map;\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport SearchForm from \"./SearchForm\";\nimport L from \"leaflet\";\nimport { useLocation } from \"./LocationContext\";\n\n// üéØ Auto-zoom component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutoZoom = ({\n  locations\n}) => {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (locations.length > 0) {\n      const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\n      map.fitBounds(bounds, {\n        padding: [50, 50]\n      });\n    }\n  }, [locations, map]);\n  return null;\n};\n\n// üéØ Function to get scaled circle markers for Clinics\n_s(AutoZoom, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = AutoZoom;\nconst getCustomIcon = (providerType, bedCount, minBeds, maxBeds) => {\n  let iconSize = 35; // Default for MVZ/ASV\n\n  if (providerType === \"Clinic\" && bedCount > 0) {\n    if (maxBeds !== minBeds) {\n      iconSize = 35 + (bedCount - minBeds) / (maxBeds - minBeds) * 30; // Scale between 35px and 65px\n    }\n  }\n\n  // üìå Clinics have scalable circle icons\n  if (providerType === \"Clinic\") {\n    return L.divIcon({\n      className: \"custom-clinic-marker\",\n      html: `<div style=\"\n                width: ${iconSize}px; \n                height: ${iconSize}px; \n                background-color: rgba(255, 0, 0, 0.8); \n                border-radius: 50%; \n                border: 2px solid black;\n                display: flex; \n                justify-content: center; \n                align-items: center;\">\n            </div>`,\n      iconSize: [iconSize, iconSize],\n      iconAnchor: [iconSize / 2, iconSize / 2]\n    });\n  }\n\n  // üìå Static icons for MVZ, ASV, User Location\n  let iconUrl = \"\";\n  let fixedSize = 30;\n  switch (providerType) {\n    case \"MVZ\":\n      iconUrl = \"https://cdn-icons-png.flaticon.com/512/3062/3062634.png\";\n      break;\n    case \"ASV\":\n      iconUrl = \"https://cdn-icons-png.flaticon.com/512/1048/1048953.png\";\n      break;\n    case \"User\":\n      iconUrl = \"https://cdn-icons-png.flaticon.com/512/684/684908.png\";\n      fixedSize = 35;\n      break;\n    default:\n      iconUrl = \"https://cdn-icons-png.flaticon.com/512/684/684908.png\";\n      break;\n  }\n  return new L.Icon({\n    iconUrl,\n    iconSize: [fixedSize, fixedSize],\n    iconAnchor: [fixedSize / 2, fixedSize]\n  });\n};\nconst Map = () => {\n  _s2();\n  const [graphData, setGraphData] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const [locationChoice, setLocationChoice] = useState(\"\");\n  const [manualAddress, setManualAddress] = useState(\"\");\n  const {\n    setAllLocations\n  } = useLocation();\n\n  // üöÄ Get user's current location\n  const fetchMyLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setUserLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      }, error => {\n        console.error(\"Error getting location:\", error);\n      });\n    }\n  };\n\n  // üéØ Handle location selection\n  const handleLocationChoice = choice => {\n    setLocationChoice(choice);\n    setUserLocation(null);\n    setManualAddress(\"\");\n    if (choice === \"my-location\") {\n      fetchMyLocation();\n    }\n  };\n\n  // üéØ Convert address to latitude & longitude using OpenStreetMap's Nominatim API\n  const handleManualAddressSearch = async () => {\n    if (!manualAddress.trim()) {\n      alert(\"Please enter a valid address.\");\n      return;\n    }\n    try {\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n      const data = await response.json();\n      if (data.length > 0) {\n        setUserLocation({\n          latitude: parseFloat(data[0].lat),\n          longitude: parseFloat(data[0].lon)\n        });\n      } else {\n        alert(\"Address not found. Please enter a more precise location.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching geolocation:\", error);\n      alert(\"Failed to fetch location. Try again later.\");\n    }\n  };\n\n  // ‚úÖ UseMemo to prevent unnecessary re-renders\n  const allLocations = useMemo(() => {\n    const locations = [...graphData];\n    if (userLocation) {\n      locations.push({\n        clinic_name: \"Your Location\",\n        provider_type: \"User\",\n        ...userLocation\n      });\n    }\n    return locations;\n  }, [graphData, userLocation]);\n\n  // ‚úÖ Find min and max bed counts\n  const bedCounts = graphData.filter(d => d.number_of_beds > 0).map(d => d.number_of_beds);\n  const minBeds = bedCounts.length ? Math.min(...bedCounts) : 0;\n  const maxBeds = bedCounts.length ? Math.max(...bedCounts) : 0;\n\n  // ‚úÖ Update locations when changed\n  useEffect(() => {\n    setAllLocations(allLocations);\n  }, [allLocations, setAllLocations]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"New Ways of Care Provision and Analysis of Patient Flows\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Your Location:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleLocationChoice(\"my-location\"),\n        children: \"Use My Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleLocationChoice(\"manual\"),\n        children: \"Enter Location Manually\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 13\n    }, this), locationChoice === \"manual\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your address\",\n        value: manualAddress,\n        onChange: e => setManualAddress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleManualAddressSearch,\n        children: \"Search Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      setGraphData: setGraphData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [50.851, 8.015],\n      zoom: 8,\n      scrollWheelZoom: false,\n      style: {\n        height: 500,\n        width: \"60%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AutoZoom, {\n        locations: allLocations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 17\n      }, this), allLocations.map((data, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: [data.latitude, data.longitude],\n        icon: getCustomIcon(data.provider_type, data.number_of_beds, minBeds, maxBeds),\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: data.clinic_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 64\n          }, this), \"City: \", data.city, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 47\n          }, this), \"Beds: \", data.number_of_beds, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 57\n          }, this), \"Address: \", data.address || \"N/A\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 356,\n    columnNumber: 9\n  }, this);\n};\n_s2(Map, \"E7gzXfXTChBO3X0gT1LDrvT0IDA=\", false, function () {\n  return [useLocation];\n});\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"AutoZoom\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","MapContainer","TileLayer","useMap","Marker","Popup","Polyline","SearchForm","L","useLocation","jsxDEV","_jsxDEV","AutoZoom","locations","_s","map","length","bounds","latLngBounds","loc","latitude","longitude","fitBounds","padding","_c","getCustomIcon","providerType","bedCount","minBeds","maxBeds","iconSize","divIcon","className","html","iconAnchor","iconUrl","fixedSize","Icon","Map","_s2","graphData","setGraphData","userLocation","setUserLocation","locationChoice","setLocationChoice","manualAddress","setManualAddress","setAllLocations","fetchMyLocation","navigator","geolocation","getCurrentPosition","position","coords","error","console","handleLocationChoice","choice","handleManualAddressSearch","trim","alert","response","fetch","encodeURIComponent","data","json","parseFloat","lat","lon","allLocations","push","clinic_name","provider_type","bedCounts","filter","d","number_of_beds","Math","min","max","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","e","target","center","zoom","scrollWheelZoom","style","height","width","attribution","url","index","icon","city","address","_c2","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/map.js"],"sourcesContent":["// import React, { useState, useEffect, useMemo } from \"react\";\r\n// import { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\r\n// import 'leaflet/dist/leaflet.css';\r\n// import SearchForm from \"./SearchForm\";\r\n// import L from \"leaflet\";\r\n// import { useLocation } from \"./LocationContext\";\r\n\r\n// // üé® Dynamic Marker Icons based on Provider Type and Bed Count\r\n// const getCustomIcon = (providerType, bedCount) => {\r\n//     let iconSize = bedCount ? Math.min(50, Math.max(20, bedCount / 15)) : 25; // Adjust icon size\r\n//     let iconUrl = \"\";\r\n\r\n//     switch (providerType) {\r\n//         case \"Clinic\":\r\n//             iconUrl = \"https://cdn-icons-png.flaticon.com/512/2874/2874783.png\"; // Hospital Icon\r\n//             break;\r\n//         case \"MVZ\":\r\n//             iconUrl = \"https://cdn-icons-png.flaticon.com/512/3062/3062634.png\"; // Medical Practice Icon\r\n//             iconSize = 25; // Fixed small size\r\n//             break;\r\n//         case \"ASV\":\r\n//             iconUrl = \"https://cdn-icons-png.flaticon.com/512/1048/1048953.png\"; // ASV Icon\r\n//             iconSize = 25; // Fixed small size\r\n//             break;\r\n//         case \"User\":\r\n//             iconUrl = \"https://cdn-icons-png.flaticon.com/512/684/684908.png\"; // User Location Icon\r\n//             iconSize = 30;\r\n//             break;\r\n//         default:\r\n//             iconUrl = \"https://cdn-icons-png.flaticon.com/512/684/684908.png\"; // Default location pin\r\n//             iconSize = 25;\r\n//             break;\r\n//     }\r\n\r\n//     return new L.Icon({\r\n//         iconUrl,\r\n//         iconSize: [iconSize, iconSize],\r\n//         iconAnchor: [iconSize / 2, iconSize],\r\n//     });\r\n// };\r\n\r\n// // üé® Predefined colors for lines\r\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// // üéØ Auto-zoom Component\r\n// const AutoZoom = ({ locations }) => {\r\n//     const map = useMap();\r\n//     useEffect(() => {\r\n//         if (locations.length > 0) {\r\n//             const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\r\n//             map.fitBounds(bounds, { padding: [50, 50] });\r\n//         }\r\n//     }, [locations, map]);\r\n//     return null;\r\n// };\r\n\r\n// const Map = () => {\r\n//     const [graphData, setGraphData] = useState([]);\r\n//     const [userLocation, setUserLocation] = useState(null);\r\n//     const [locationChoice, setLocationChoice] = useState(\"\"); // \"my-location\" or \"manual\"\r\n//     const [manualAddress, setManualAddress] = useState(\"\"); // User's address input\r\n//     const { setAllLocations } = useLocation();\r\n\r\n//     // üìç Fetch user's current location\r\n//     const fetchMyLocation = () => {\r\n//         if (navigator.geolocation) {\r\n//             navigator.geolocation.getCurrentPosition(\r\n//                 (position) => {\r\n//                     setUserLocation({\r\n//                         latitude: position.coords.latitude,\r\n//                         longitude: position.coords.longitude\r\n//                     });\r\n//                 },\r\n//                 (error) => {\r\n//                     console.error(\"Error getting location:\", error);\r\n//                 }\r\n//             );\r\n//         }\r\n//     };\r\n\r\n//     // üìç Handle location selection\r\n//     const handleLocationChoice = (choice) => {\r\n//         setLocationChoice(choice);\r\n//         setUserLocation(null);\r\n//         setManualAddress(\"\");\r\n//         if (choice === \"my-location\") {\r\n//             fetchMyLocation();\r\n//         }\r\n//     };\r\n\r\n//     // üìç Convert address to lat/lon using OpenStreetMap's API\r\n//     const handleManualAddressSearch = async () => {\r\n//         if (!manualAddress.trim()) {\r\n//             alert(\"Please enter a valid address.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\r\n//             const data = await response.json();\r\n//             if (data.length > 0) {\r\n//                 setUserLocation({\r\n//                     latitude: parseFloat(data[0].lat),\r\n//                     longitude: parseFloat(data[0].lon)\r\n//                 });\r\n//             } else {\r\n//                 alert(\"Address not found. Please enter a more precise location.\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error fetching geolocation:\", error);\r\n//             alert(\"Failed to fetch location. Try again later.\");\r\n//         }\r\n//     };\r\n\r\n//     // üìå Memoize locations\r\n//     const allLocations = useMemo(() => {\r\n//         const locations = [...graphData];\r\n//         if (userLocation) {\r\n//             locations.push({ clinic_name: \"Your Location\", provider_type: \"User\", ...userLocation });\r\n//         }\r\n//         return locations;\r\n//     }, [graphData, userLocation]);\r\n\r\n//     // ‚úÖ Update locations in the context\r\n//     useEffect(() => {\r\n//         setAllLocations(allLocations);\r\n//     }, [allLocations, setAllLocations]);\r\n\r\n//     return (\r\n//         <div>\r\n//             <h1>New Ways of Care Provision and Analysis of Patient Flows</h1>\r\n\r\n//             {/* üåç Location Selection */}\r\n//             <div>\r\n//                 <h3>Select Your Location:</h3>\r\n//                 <button onClick={() => handleLocationChoice(\"my-location\")}>Use My Location</button>\r\n//                 <button onClick={() => handleLocationChoice(\"manual\")}>Enter Location Manually</button>\r\n//             </div>\r\n\r\n//             {/* üìå Manual Address Input */}\r\n//             {locationChoice === \"manual\" && (\r\n//                 <div>\r\n//                     <input \r\n//                         type=\"text\" \r\n//                         placeholder=\"Enter your address\" \r\n//                         value={manualAddress} \r\n//                         onChange={(e) => setManualAddress(e.target.value)}\r\n//                     />\r\n//                     <button onClick={handleManualAddressSearch}>Search Address</button>\r\n//                 </div>\r\n//             )}\r\n\r\n//             {/* üîé Search Form */}\r\n//             <SearchForm setGraphData={setGraphData} />\r\n\r\n//             {/* üó∫Ô∏è Map Display */}\r\n//             <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: 500, width: \"60%\" }}>\r\n//                 <TileLayer\r\n//                     attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n//                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n//                 />\r\n//                 {/* Auto-Zoom Feature */}\r\n//                 <AutoZoom locations={allLocations} />\r\n\r\n//                 {/* üìç Add Clinic & Provider Markers */}\r\n//                 {graphData.map((data, index) => (\r\n//                     <Marker \r\n//                         key={index} \r\n//                         position={[data.latitude, data.longitude]} \r\n//                         icon={getCustomIcon(data.provider_type, data.number_of_beds)}\r\n//                     >\r\n//                         <Popup>\r\n//                             <strong>{data.clinic_name}</strong><br />\r\n//                             City: {data.city} <br />\r\n//                             {data.number_of_beds ? `Beds: ${data.number_of_beds}` : \"MVZ / ASV\"}<br />\r\n//                         </Popup>\r\n//                     </Marker>\r\n//                 ))}\r\n\r\n//                 {/* üìç User's Location Marker */}\r\n//                 {userLocation && (\r\n//                     <Marker position={[userLocation.latitude, userLocation.longitude]} icon={getCustomIcon(\"User\", null)}>\r\n//                         <Popup>\r\n//                             <strong>Your Location</strong><br />\r\n//                             Lat: {userLocation.latitude}, Lng: {userLocation.longitude}\r\n//                         </Popup>\r\n//                     </Marker>\r\n//                 )}\r\n\r\n//                 {/* üõ£Ô∏è Draw Lines */}\r\n//                 {userLocation && graphData.map((data, index) => (\r\n//                     <Polyline \r\n//                         key={index} \r\n//                         positions={[[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]]} \r\n//                         color={lineColors[index % lineColors.length]} \r\n//                         weight={3}\r\n//                     />\r\n//                 ))}\r\n//             </MapContainer>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Map;\r\n\r\nimport React, { useState, useEffect, useMemo } from \"react\";\r\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport SearchForm from \"./SearchForm\";\r\nimport L from \"leaflet\";\r\nimport { useLocation } from \"./LocationContext\";\r\n\r\n// üéØ Auto-zoom component\r\nconst AutoZoom = ({ locations }) => {\r\n    const map = useMap();\r\n    useEffect(() => {\r\n        if (locations.length > 0) {\r\n            const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\r\n            map.fitBounds(bounds, { padding: [50, 50] });\r\n        }\r\n    }, [locations, map]);\r\n    return null;\r\n};\r\n\r\n// üéØ Function to get scaled circle markers for Clinics\r\nconst getCustomIcon = (providerType, bedCount, minBeds, maxBeds) => {\r\n    let iconSize = 35; // Default for MVZ/ASV\r\n    \r\n    if (providerType === \"Clinic\" && bedCount > 0) {\r\n        if (maxBeds !== minBeds) {\r\n            iconSize = 35 + ((bedCount - minBeds) / (maxBeds - minBeds)) * 30; // Scale between 35px and 65px\r\n        }\r\n    }\r\n\r\n    // üìå Clinics have scalable circle icons\r\n    if (providerType === \"Clinic\") {\r\n        return L.divIcon({\r\n            className: \"custom-clinic-marker\",\r\n            html: `<div style=\"\r\n                width: ${iconSize}px; \r\n                height: ${iconSize}px; \r\n                background-color: rgba(255, 0, 0, 0.8); \r\n                border-radius: 50%; \r\n                border: 2px solid black;\r\n                display: flex; \r\n                justify-content: center; \r\n                align-items: center;\">\r\n            </div>`,\r\n            iconSize: [iconSize, iconSize],\r\n            iconAnchor: [iconSize / 2, iconSize / 2],\r\n        });\r\n    }\r\n\r\n    // üìå Static icons for MVZ, ASV, User Location\r\n    let iconUrl = \"\";\r\n    let fixedSize = 30; \r\n    switch (providerType) {\r\n        case \"MVZ\":\r\n            iconUrl = \"https://cdn-icons-png.flaticon.com/512/3062/3062634.png\"; \r\n            break;\r\n        case \"ASV\":\r\n            iconUrl = \"https://cdn-icons-png.flaticon.com/512/1048/1048953.png\"; \r\n            break;\r\n        case \"User\":\r\n            iconUrl = \"https://cdn-icons-png.flaticon.com/512/684/684908.png\"; \r\n            fixedSize = 35;\r\n            break;\r\n        default:\r\n            iconUrl = \"https://cdn-icons-png.flaticon.com/512/684/684908.png\";\r\n            break;\r\n    }\r\n\r\n    return new L.Icon({\r\n        iconUrl,\r\n        iconSize: [fixedSize, fixedSize],\r\n        iconAnchor: [fixedSize / 2, fixedSize],\r\n    });\r\n};\r\n\r\nconst Map = () => {\r\n    const [graphData, setGraphData] = useState([]);\r\n    const [userLocation, setUserLocation] = useState(null);\r\n    const [locationChoice, setLocationChoice] = useState(\"\"); \r\n    const [manualAddress, setManualAddress] = useState(\"\"); \r\n    const { setAllLocations } = useLocation();\r\n\r\n    // üöÄ Get user's current location\r\n    const fetchMyLocation = () => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    setUserLocation({\r\n                        latitude: position.coords.latitude,\r\n                        longitude: position.coords.longitude\r\n                    });\r\n                },\r\n                (error) => {\r\n                    console.error(\"Error getting location:\", error);\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    // üéØ Handle location selection\r\n    const handleLocationChoice = (choice) => {\r\n        setLocationChoice(choice);\r\n        setUserLocation(null);\r\n        setManualAddress(\"\"); \r\n        if (choice === \"my-location\") {\r\n            fetchMyLocation();\r\n        }\r\n    };\r\n\r\n    // üéØ Convert address to latitude & longitude using OpenStreetMap's Nominatim API\r\n    const handleManualAddressSearch = async () => {\r\n        if (!manualAddress.trim()) {\r\n            alert(\"Please enter a valid address.\");\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\r\n            const data = await response.json();\r\n            if (data.length > 0) {\r\n                setUserLocation({\r\n                    latitude: parseFloat(data[0].lat),\r\n                    longitude: parseFloat(data[0].lon)\r\n                });\r\n            } else {\r\n                alert(\"Address not found. Please enter a more precise location.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching geolocation:\", error);\r\n            alert(\"Failed to fetch location. Try again later.\");\r\n        }\r\n    };\r\n\r\n    // ‚úÖ UseMemo to prevent unnecessary re-renders\r\n    const allLocations = useMemo(() => {\r\n        const locations = [...graphData];\r\n        if (userLocation) {\r\n            locations.push({ clinic_name: \"Your Location\", provider_type: \"User\", ...userLocation });\r\n        }\r\n        return locations;\r\n    }, [graphData, userLocation]);\r\n\r\n    // ‚úÖ Find min and max bed counts\r\n    const bedCounts = graphData.filter((d) => d.number_of_beds > 0).map((d) => d.number_of_beds);\r\n    const minBeds = bedCounts.length ? Math.min(...bedCounts) : 0;\r\n    const maxBeds = bedCounts.length ? Math.max(...bedCounts) : 0;\r\n\r\n    // ‚úÖ Update locations when changed\r\n    useEffect(() => {\r\n        setAllLocations(allLocations);\r\n    }, [allLocations, setAllLocations]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>New Ways of Care Provision and Analysis of Patient Flows</h1>\r\n            <div>\r\n                <h3>Select Your Location:</h3>\r\n                <button onClick={() => handleLocationChoice(\"my-location\")}>Use My Location</button>\r\n                <button onClick={() => handleLocationChoice(\"manual\")}>Enter Location Manually</button>\r\n            </div>\r\n\r\n            {locationChoice === \"manual\" && (\r\n                <div>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Enter your address\" \r\n                        value={manualAddress} \r\n                        onChange={(e) => setManualAddress(e.target.value)}\r\n                    />\r\n                    <button onClick={handleManualAddressSearch}>Search Address</button>\r\n                </div>\r\n            )}\r\n\r\n            <SearchForm setGraphData={setGraphData} />\r\n\r\n            <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: 500, width: \"60%\" }}>\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                <AutoZoom locations={allLocations} />\r\n\r\n                {allLocations.map((data, index) => (\r\n                    <Marker key={index} position={[data.latitude, data.longitude]} \r\n                        icon={getCustomIcon(data.provider_type, data.number_of_beds, minBeds, maxBeds)}>\r\n                        <Popup>\r\n                            <strong>{data.clinic_name}</strong><br />\r\n                            City: {data.city} <br />\r\n                            Beds: {data.number_of_beds} <br />\r\n                            Address: {data.address || \"N/A\"}\r\n                        </Popup>\r\n                    </Marker>\r\n                ))}\r\n            </MapContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC3D,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AACxF,OAAO,0BAA0B;AACjC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,CAAC,MAAM,SAAS;AACvB,SAASC,WAAW,QAAQ,mBAAmB;;AAE/C;AAAA,SAAAC,M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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}