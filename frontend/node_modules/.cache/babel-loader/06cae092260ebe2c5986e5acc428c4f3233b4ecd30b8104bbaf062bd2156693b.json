{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\map.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useState, useEffect, useMemo } from \"react\";\n// import { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\n// import 'leaflet/dist/leaflet.css';\n// import SearchForm from \"./SearchForm\";\n// import L from \"leaflet\";\n// import { useLocation } from \"./LocationContext\";\n// import Button from '@mui/material/Button';\n\n// // 🎯 Predefined colors for clinics, MVZ, ASV\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// // 🟢 Custom icons for different provider types\n// const userIcon = L.icon({\n//     iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\", // Unique user icon\n//     iconSize: [35, 35],\n//     iconAnchor: [17, 35]\n// });\n\n// // 🎯 Function to create color-matched clinic icons\n// const getColoredClinicIcon = (color) => {\n//     return L.divIcon({\n//         className: \"custom-clinic-marker\",\n//         html: `<div style=\"\n//             width: 30px; height: 30px; \n//             background-color: ${color}; \n//             border-radius: 50%; \n//             border: 1px solid black;\n//             display: flex; justify-content: center; align-items: center;\">\n//         </div>`,\n//         iconSize: [20, 20],\n//         iconAnchor: [15, 20]\n//     });\n// };\n\n// // ✅ AutoZoom component to adjust map bounds dynamically\n// // const AutoZoom = ({ locations }) => {\n// //     const map = useMap();\n\n// //     useEffect(() => {\n// //         if (locations.length > 0) {\n// //             const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\n// //             map.fitBounds(bounds, { padding: [50, 50] }); // Ensure all points are visible\n// //         }\n// //     }, [locations, map]);\n\n// //     return null; // No UI component, only logic\n// // };\n// const AutoZoom = ({ locations }) => {\n//     const map = useMap();\n\n//     useEffect(() => {\n//         // 🛑 Filter out locations with missing latitude/longitude\n//         const validLocations = locations.filter(loc => loc.latitude && loc.longitude);\n\n//         if (validLocations.length > 0) {\n//             const bounds = L.latLngBounds(validLocations.map(loc => [loc.latitude, loc.longitude]));\n//             map.fitBounds(bounds, { padding: [50, 50] }); // Ensure all points are visible\n//         } else {\n//             console.warn(\"⚠️ No valid locations found for AutoZoom!\");\n//         }\n//     }, [locations, map]);\n\n//     return null; // No UI component, only logic\n// };\n\n// const Map = () => {\n//     const [graphData, setGraphData] = useState([]);\n//     const [userLocation, setUserLocation] = useState(null);\n//     const [locationChoice, setLocationChoice] = useState(\"\"); \n//     const [manualAddress, setManualAddress] = useState(\"\"); \n//     const { setAllLocations } = useLocation();\n\n//     // 🚀 Get user's current location\n//     const fetchMyLocation = () => {\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition(\n//                 (position) => {\n//                     const lat = position.coords.latitude;\n//                     const lon = position.coords.longitude;\n\n//                     if (lat && lon) {\n//                         setUserLocation({\n//                             latitude: lat,\n//                             longitude: lon\n//                         });\n//                         console.log(\"✅ User location set:\", lat, lon);\n//                     } else {\n//                         console.warn(\"⚠️ Invalid user location received.\");\n//                     }\n//                 },\n//                 (error) => {\n//                     console.error(\"❌ Error getting user location:\", error);\n//                 }\n//             );\n//         }\n//     };\n\n//     // 🎯 Handle location selection\n//     const handleLocationChoice = (choice) => {\n//         setLocationChoice(choice);\n//         setUserLocation(null);\n//         setManualAddress(\"\"); \n//         if (choice === \"my-location\") {\n//             fetchMyLocation();\n//         }\n//     };\n\n//     // 🎯 Convert address to latitude & longitude using OpenStreetMap's Nominatim API\n//     const handleManualAddressSearch = async () => {\n//         if (!manualAddress.trim()) {\n//             alert(\"Please enter a valid address.\");\n//             return;\n//         }\n//         try {\n//             const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n//             const data = await response.json();\n//             if (data.length > 0 && data[0].lat && data[0].lon) {\n//                 setUserLocation({\n//                     latitude: parseFloat(data[0].lat),\n//                     longitude: parseFloat(data[0].lon)\n//                 });\n//             } else {\n//                 alert(\"Address not found. Please enter a more precise location.\");\n//                 console.warn(\"❌ No valid latitude/longitude found in API response.\");\n//             }\n//         } catch (error) {\n//             console.error(\"Error fetching geolocation:\", error);\n//             alert(\"Failed to fetch location. Try again later.\");\n//         }\n//     };\n\n//     // ✅ UseMemo to prevent unnecessary re-renders\n//     const allLocations = useMemo(() => {\n//         const locations = [...graphData];\n//         if (userLocation) {\n//             locations.push({ clinic_name: \"Your Location\", provider_type: \"User\", ...userLocation });\n//         }\n//         return locations;\n//     }, [graphData, userLocation]);\n\n//     // ✅ Update locations when changed\n//     useEffect(() => {\n//         setAllLocations(allLocations);\n//     }, [allLocations, setAllLocations]);\n\n//     return (\n\n//         <div style={{\n//             backgroundColor: \"#f0ffff\", // Light blue background\n//             border: \"1px solid #b3e5fc\",\n//             borderRadius: \"10px\",\n//             padding: \"10px\",\n//             marginBottom: \"15px\",\n//             boxShadow: \"0px 2px 10px rgba(0,0,0,0.1)\"\n//         }}>\n//         <h3>Wählen Sie Ihren Standort:</h3>\n//         <div style={{ display: \"flex\", gap: \"10px\", marginBottom: \"10px\", paddingLeft: \"10px\" }}>\n//             <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"my-location\")}>Meinen Standort verwenden</Button>\n//             <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"manual\")}>Standort manuell eingeben</Button>\n//         </div>\n\n//             {locationChoice === \"manual\" && (\n//                 <div style={{ paddingLeft: \"10px\",marginBottom: \"10px\" }}>\n//                     <input \n//                         type=\"text\" \n//                         placeholder=\"Geben Sie Ihre Adresse ein\" \n//                         value={manualAddress} \n//                         onChange={(e) => setManualAddress(e.target.value)}\n//                         style={{ padding: \"8px\", width: \"250px\", border: \"1px solid #ccc\", borderRadius: \"5px\", marginRight: \"10px\" }} \n//                     />\n//                     {/* <button onClick={handleManualAddressSearch}>Search Address</button> */}\n\n//                     {/* ✅ Styled \"Search Address\" Button */}\n//                     <button \n//                         onClick={handleManualAddressSearch} \n//                         style={{\n//                             padding: \"8px 12px\",\n//                             borderRadius: \"5px\",\n//                             backgroundColor: \"#007BFF\", /* Primary blue */\n//                             color: \"white\",\n//                             border: \"none\",\n//                             cursor: \"pointer\",\n//                             fontSize: \"14px\",\n//                             fontWeight: \"bold\",\n//                             transition: \"background-color 0.3s\",\n//                             boxShadow: \"0px 2px 5px rgba(0, 0, 0, 0.2)\"\n//                         }}\n//                         onMouseOver={(e) => e.target.style.backgroundColor = \"#0056b3\"} /* Hover effect */\n//                         onMouseOut={(e) => e.target.style.backgroundColor = \"#007BFF\"} \n//                     >\n//                         Search Address\n//                     </button>\n//                 </div>\n//             )}\n\n//             <SearchForm setGraphData={setGraphData} />\n\n//             <div style={{\n//                 width: \"59%\",\n//                 height: \"500px\",\n//                 border: \"1px solid #b3e5fc\",\n//                 borderRadius: \"10px\",\n//                 padding: \"10px\",\n//                 margin: \"10px 0\", // Ensure no auto-centering\n//                 boxShadow: \"0px 4px 10px rgba(0,0,0,0.15)\",\n//                 backgroundColor: \"white\", // White background for contrast\n//                 display: \"flex\", // Ensures content aligns properly\n//                 alignItems: \"center\", // Aligns map within box\n//                 justifyContent: \"center\" // Aligns the map box to the left\n//             }}>\n//             <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: \"100%\", width: \"100%\", borderRadius: \"8px\" }}>\n//                 <TileLayer\n//                     attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n//                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//                 />\n\n//                 {/* AutoZoom Component to adjust map bounds dynamically */}\n\n//                 <AutoZoom locations={allLocations} />\n//                 {allLocations.length > 0 ? (\n//                     <AutoZoom locations={allLocations} />\n//                 ) : (\n//                     <div style={{ textAlign: \"center\", fontSize: \"18px\", color: \"red\", marginTop: \"20px\" }}>\n//                         ❌ No locations found. Try a different search.\n//                     </div>\n//                 )}\n//                 {/* 🎯 Draw user location marker */}\n//                 {userLocation &&  (\n//                     <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\n//                         <Popup><strong>Your Location</strong></Popup>\n//                     </Marker>\n//                 )}\n\n//                 {/* 🎯 Draw clinic markers */}\n//                 {graphData.map((data, index) => {\n//                     const color = lineColors[index % lineColors.length]; // Match line & marker color\n//                     // Extract valid lat/lng values from multiple possible sources\n//                     const latitude = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\n//                     const longitude = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\n//                     // 🛑 Skip if latitude or longitude is missing\n//                     if (!latitude || !longitude) {\n//                         console.warn(`⚠️ Skipping invalid location: ${data.clinic_name || data.mvz_name || data.neurologe_name || data.onkologe_name}`);\n//                         return null;\n//                     }\n\n//                     return (\n//                         <Marker key={index} position={[latitude, longitude]} icon={getColoredClinicIcon(color)}>\n//                             <Popup>\n//                                 <strong>{data.clinic_name || data.mvz_name || data.neurologe_name || data.onkologe_name}</strong><br />\n//                                 <strong>City:</strong> {data.clinic_city || data.mvz_city || data.neurologe_city || data.onkologe_city} <br />\n//                                 <strong>Address:</strong> {data.clinic_address || data.mvz_address || data.neurologe_address || data.onkologe_address || \"N/A\"} <br />\n//                                 <strong>Beds:</strong> {data.clinic_number_of_beds || \"N/A\"}\n//                             </Popup>\n//                         </Marker>\n//                     );\n//                 })}\n//                 {/* 🎯 Draw lines between user location & clinics */}\n//                 {userLocation && graphData.map((data, index) => {\n//         const color = lineColors[index % lineColors.length]; // Match line color\n\n//         // Extract lat/lng for the target location\n//         const latitude = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\n//         const longitude = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\n\n//         // 🛑 Skip if lat/lng is missing\n//         if (!latitude || !longitude) return null;\n\n//         return (\n//             <Polyline \n//                 key={index} \n//                 positions={[\n//                     [userLocation.latitude, userLocation.longitude], \n//                     [latitude, longitude]\n//                 ]} \n//                 color={color} \n//                 weight={2} \n//             />\n//         );\n//     })}\n//             </MapContainer>\n//         </div>\n//         </div>\n//     );\n// };\n\n// export default Map;\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport SearchForm from \"./SearchForm\";\nimport L from \"leaflet\";\nimport { useLocation } from \"./LocationContext\";\nimport Button from \"@mui/material/Button\";\n\n// 🎯 Predefined colors for different providers\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// 🟢 Custom icon for user location\nconst userIcon = L.icon({\n  iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\n  iconSize: [35, 35],\n  iconAnchor: [17, 35]\n});\n\n// 🎯 Function to create color-matched clinic/MVZ/etc. icons\nconst getColoredProviderIcon = color => {\n  return L.divIcon({\n    className: \"custom-clinic-marker\",\n    html: `<div style=\"\n            width: 30px; height: 30px; \n            background-color: ${color}; \n            border-radius: 50%; \n            border: 1px solid black;\n            display: flex; justify-content: center; align-items: center;\">\n        </div>`,\n    iconSize: [20, 20],\n    iconAnchor: [15, 20]\n  });\n};\n\n// ✅ AutoZoom component (now fully dynamic & functional)\nconst AutoZoom = ({\n  locations\n}) => {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    // 🎯 Filter only locations with valid latitude & longitude\n    const validLocations = locations.filter(loc => loc.latitude && loc.longitude);\n    if (validLocations.length > 0) {\n      const bounds = L.latLngBounds(validLocations.map(loc => [loc.latitude, loc.longitude]));\n      map.fitBounds(bounds, {\n        padding: [50, 50]\n      }); // Ensure all points are visible\n    } else {\n      console.warn(\"⚠️ No valid locations found for AutoZoom!\");\n    }\n  }, [locations, map]);\n  return null; // No UI component, only logic\n};\n_s(AutoZoom, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = AutoZoom;\nconst Map = () => {\n  _s2();\n  const [graphData, setGraphData] = useState([]); // Store clinic/MVZ/etc. data\n  const [userLocation, setUserLocation] = useState(null); // User location\n  const [locationChoice, setLocationChoice] = useState(\"\");\n  const [manualAddress, setManualAddress] = useState(\"\");\n  const {\n    setAllLocations\n  } = useLocation();\n\n  // 🚀 Fetch user's current location\n  const fetchMyLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n        if (lat && lon) {\n          setUserLocation({\n            latitude: lat,\n            longitude: lon\n          });\n          console.log(\"✅ User location set:\", lat, lon);\n        } else {\n          console.warn(\"⚠️ Invalid user location received.\");\n        }\n      }, error => {\n        console.error(\"❌ Error getting user location:\", error);\n      });\n    }\n  };\n\n  // 🎯 Handle location selection\n  const handleLocationChoice = choice => {\n    setLocationChoice(choice);\n    setUserLocation(null);\n    setManualAddress(\"\");\n    if (choice === \"my-location\") {\n      fetchMyLocation();\n    }\n  };\n\n  // 🎯 Convert address to latitude & longitude using OpenStreetMap's API\n  const handleManualAddressSearch = async () => {\n    if (!manualAddress.trim()) {\n      alert(\"Please enter a valid address.\");\n      return;\n    }\n    try {\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n      const data = await response.json();\n      if (data.length > 0 && data[0].lat && data[0].lon) {\n        setUserLocation({\n          latitude: parseFloat(data[0].lat),\n          longitude: parseFloat(data[0].lon)\n        });\n      } else {\n        alert(\"Address not found. Please enter a more precise location.\");\n        console.warn(\"❌ No valid latitude/longitude found in API response.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching geolocation:\", error);\n      alert(\"Failed to fetch location. Try again later.\");\n    }\n  };\n\n  // ✅ Combine all locations (graph data + user location) dynamically\n  const allLocations = useMemo(() => {\n    const locations = [...graphData]; // Start with clinic/MVZ/etc. data\n    if (userLocation) {\n      locations.push({\n        name: \"Your Location\",\n        provider_type: \"User\",\n        ...userLocation\n      });\n    }\n    return locations;\n  }, [graphData, userLocation]);\n\n  // ✅ Update locations when changed\n  useEffect(() => {\n    setAllLocations(allLocations);\n  }, [allLocations, setAllLocations]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: \"#f0ffff\",\n      // Light blue background\n      border: \"1px solid #b3e5fc\",\n      borderRadius: \"10px\",\n      padding: \"10px\",\n      marginBottom: \"15px\",\n      boxShadow: \"0px 2px 10px rgba(0,0,0,0.1)\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"W\\xE4hlen Sie Ihren Standort:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: \"10px\",\n        marginBottom: \"10px\",\n        paddingLeft: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => handleLocationChoice(\"my-location\"),\n        children: \"Meinen Standort verwenden\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => handleLocationChoice(\"manual\"),\n        children: \"Standort manuell eingeben\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 9\n    }, this), locationChoice === \"manual\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingLeft: \"10px\",\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Geben Sie Ihre Adresse ein\",\n        value: manualAddress,\n        onChange: e => setManualAddress(e.target.value),\n        style: {\n          padding: \"8px\",\n          width: \"250px\",\n          border: \"1px solid #ccc\",\n          borderRadius: \"5px\",\n          marginRight: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleManualAddressSearch,\n        style: {\n          padding: \"8px 12px\",\n          borderRadius: \"5px\",\n          backgroundColor: \"#007BFF\",\n          color: \"white\",\n          border: \"none\",\n          cursor: \"pointer\",\n          fontSize: \"14px\",\n          fontWeight: \"bold\",\n          transition: \"background-color 0.3s\"\n        },\n        onMouseOver: e => e.target.style.backgroundColor = \"#0056b3\",\n        onMouseOut: e => e.target.style.backgroundColor = \"#007BFF\",\n        children: \"Search Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      setGraphData: setGraphData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [50.851, 8.015],\n      zoom: 8,\n      scrollWheelZoom: false,\n      style: {\n        height: \"500px\",\n        width: \"100%\",\n        borderRadius: \"8px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(AutoZoom, {\n        locations: allLocations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 13\n      }, this), allLocations.map((data, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: [data.latitude, data.longitude],\n        icon: getColoredProviderIcon(lineColors[index % lineColors.length]),\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: data.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 25\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 54\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"City:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 25\n          }, this), \" \", data.city || \"N/A\", \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 69\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Address:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 25\n          }, this), \" \", data.address || \"N/A\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 21\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 427,\n    columnNumber: 9\n  }, this);\n};\n_s2(Map, \"E7gzXfXTChBO3X0gT1LDrvT0IDA=\", false, function () {\n  return [useLocation];\n});\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"AutoZoom\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","MapContainer","TileLayer","useMap","Marker","Popup","Polyline","SearchForm","L","useLocation","Button","jsxDEV","_jsxDEV","lineColors","userIcon","icon","iconUrl","iconSize","iconAnchor","getColoredProviderIcon","color","divIcon","className","html","AutoZoom","locations","_s","map","validLocations","filter","loc","latitude","longitude","length","bounds","latLngBounds","fitBounds","padding","console","warn","_c","Map","_s2","graphData","setGraphData","userLocation","setUserLocation","locationChoice","setLocationChoice","manualAddress","setManualAddress","setAllLocations","fetchMyLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","lon","log","error","handleLocationChoice","choice","handleManualAddressSearch","trim","alert","response","fetch","encodeURIComponent","data","json","parseFloat","allLocations","push","name","provider_type","style","backgroundColor","border","borderRadius","marginBottom","boxShadow","children","fileName","_jsxFileName","lineNumber","columnNumber","display","gap","paddingLeft","variant","onClick","type","placeholder","value","onChange","e","target","width","marginRight","cursor","fontSize","fontWeight","transition","onMouseOver","onMouseOut","center","zoom","scrollWheelZoom","height","attribution","url","index","city","address","_c2","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/map.js"],"sourcesContent":["// import React, { useState, useEffect, useMemo } from \"react\";\r\n// import { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\r\n// import 'leaflet/dist/leaflet.css';\r\n// import SearchForm from \"./SearchForm\";\r\n// import L from \"leaflet\";\r\n// import { useLocation } from \"./LocationContext\";\r\n// import Button from '@mui/material/Button';\r\n\r\n\r\n\r\n\r\n// // 🎯 Predefined colors for clinics, MVZ, ASV\r\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// // 🟢 Custom icons for different provider types\r\n// const userIcon = L.icon({\r\n//     iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\", // Unique user icon\r\n//     iconSize: [35, 35],\r\n//     iconAnchor: [17, 35]\r\n// });\r\n\r\n// // 🎯 Function to create color-matched clinic icons\r\n// const getColoredClinicIcon = (color) => {\r\n//     return L.divIcon({\r\n//         className: \"custom-clinic-marker\",\r\n//         html: `<div style=\"\r\n//             width: 30px; height: 30px; \r\n//             background-color: ${color}; \r\n//             border-radius: 50%; \r\n//             border: 1px solid black;\r\n//             display: flex; justify-content: center; align-items: center;\">\r\n//         </div>`,\r\n//         iconSize: [20, 20],\r\n//         iconAnchor: [15, 20]\r\n//     });\r\n// };\r\n\r\n// // ✅ AutoZoom component to adjust map bounds dynamically\r\n// // const AutoZoom = ({ locations }) => {\r\n// //     const map = useMap();\r\n\r\n// //     useEffect(() => {\r\n// //         if (locations.length > 0) {\r\n// //             const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\r\n// //             map.fitBounds(bounds, { padding: [50, 50] }); // Ensure all points are visible\r\n// //         }\r\n// //     }, [locations, map]);\r\n\r\n// //     return null; // No UI component, only logic\r\n// // };\r\n// const AutoZoom = ({ locations }) => {\r\n//     const map = useMap();\r\n\r\n//     useEffect(() => {\r\n//         // 🛑 Filter out locations with missing latitude/longitude\r\n//         const validLocations = locations.filter(loc => loc.latitude && loc.longitude);\r\n\r\n//         if (validLocations.length > 0) {\r\n//             const bounds = L.latLngBounds(validLocations.map(loc => [loc.latitude, loc.longitude]));\r\n//             map.fitBounds(bounds, { padding: [50, 50] }); // Ensure all points are visible\r\n//         } else {\r\n//             console.warn(\"⚠️ No valid locations found for AutoZoom!\");\r\n//         }\r\n//     }, [locations, map]);\r\n\r\n//     return null; // No UI component, only logic\r\n// };\r\n\r\n// const Map = () => {\r\n//     const [graphData, setGraphData] = useState([]);\r\n//     const [userLocation, setUserLocation] = useState(null);\r\n//     const [locationChoice, setLocationChoice] = useState(\"\"); \r\n//     const [manualAddress, setManualAddress] = useState(\"\"); \r\n//     const { setAllLocations } = useLocation();\r\n\r\n//     // 🚀 Get user's current location\r\n//     const fetchMyLocation = () => {\r\n//         if (navigator.geolocation) {\r\n//             navigator.geolocation.getCurrentPosition(\r\n//                 (position) => {\r\n//                     const lat = position.coords.latitude;\r\n//                     const lon = position.coords.longitude;\r\n    \r\n//                     if (lat && lon) {\r\n//                         setUserLocation({\r\n//                             latitude: lat,\r\n//                             longitude: lon\r\n//                         });\r\n//                         console.log(\"✅ User location set:\", lat, lon);\r\n//                     } else {\r\n//                         console.warn(\"⚠️ Invalid user location received.\");\r\n//                     }\r\n//                 },\r\n//                 (error) => {\r\n//                     console.error(\"❌ Error getting user location:\", error);\r\n//                 }\r\n//             );\r\n//         }\r\n//     };\r\n    \r\n\r\n//     // 🎯 Handle location selection\r\n//     const handleLocationChoice = (choice) => {\r\n//         setLocationChoice(choice);\r\n//         setUserLocation(null);\r\n//         setManualAddress(\"\"); \r\n//         if (choice === \"my-location\") {\r\n//             fetchMyLocation();\r\n//         }\r\n//     };\r\n\r\n//     // 🎯 Convert address to latitude & longitude using OpenStreetMap's Nominatim API\r\n//     const handleManualAddressSearch = async () => {\r\n//         if (!manualAddress.trim()) {\r\n//             alert(\"Please enter a valid address.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\r\n//             const data = await response.json();\r\n//             if (data.length > 0 && data[0].lat && data[0].lon) {\r\n//                 setUserLocation({\r\n//                     latitude: parseFloat(data[0].lat),\r\n//                     longitude: parseFloat(data[0].lon)\r\n//                 });\r\n//             } else {\r\n//                 alert(\"Address not found. Please enter a more precise location.\");\r\n//                 console.warn(\"❌ No valid latitude/longitude found in API response.\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error fetching geolocation:\", error);\r\n//             alert(\"Failed to fetch location. Try again later.\");\r\n//         }\r\n//     };\r\n\r\n//     // ✅ UseMemo to prevent unnecessary re-renders\r\n//     const allLocations = useMemo(() => {\r\n//         const locations = [...graphData];\r\n//         if (userLocation) {\r\n//             locations.push({ clinic_name: \"Your Location\", provider_type: \"User\", ...userLocation });\r\n//         }\r\n//         return locations;\r\n//     }, [graphData, userLocation]);\r\n\r\n//     // ✅ Update locations when changed\r\n//     useEffect(() => {\r\n//         setAllLocations(allLocations);\r\n//     }, [allLocations, setAllLocations]);\r\n\r\n//     return (\r\n         \r\n        \r\n//         <div style={{\r\n//             backgroundColor: \"#f0ffff\", // Light blue background\r\n//             border: \"1px solid #b3e5fc\",\r\n//             borderRadius: \"10px\",\r\n//             padding: \"10px\",\r\n//             marginBottom: \"15px\",\r\n//             boxShadow: \"0px 2px 10px rgba(0,0,0,0.1)\"\r\n//         }}>\r\n//         <h3>Wählen Sie Ihren Standort:</h3>\r\n//         <div style={{ display: \"flex\", gap: \"10px\", marginBottom: \"10px\", paddingLeft: \"10px\" }}>\r\n//             <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"my-location\")}>Meinen Standort verwenden</Button>\r\n//             <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"manual\")}>Standort manuell eingeben</Button>\r\n//         </div>\r\n\r\n//             {locationChoice === \"manual\" && (\r\n//                 <div style={{ paddingLeft: \"10px\",marginBottom: \"10px\" }}>\r\n//                     <input \r\n//                         type=\"text\" \r\n//                         placeholder=\"Geben Sie Ihre Adresse ein\" \r\n//                         value={manualAddress} \r\n//                         onChange={(e) => setManualAddress(e.target.value)}\r\n//                         style={{ padding: \"8px\", width: \"250px\", border: \"1px solid #ccc\", borderRadius: \"5px\", marginRight: \"10px\" }} \r\n//                     />\r\n//                     {/* <button onClick={handleManualAddressSearch}>Search Address</button> */}\r\n                            \r\n//                     {/* ✅ Styled \"Search Address\" Button */}\r\n//                     <button \r\n//                         onClick={handleManualAddressSearch} \r\n//                         style={{\r\n//                             padding: \"8px 12px\",\r\n//                             borderRadius: \"5px\",\r\n//                             backgroundColor: \"#007BFF\", /* Primary blue */\r\n//                             color: \"white\",\r\n//                             border: \"none\",\r\n//                             cursor: \"pointer\",\r\n//                             fontSize: \"14px\",\r\n//                             fontWeight: \"bold\",\r\n//                             transition: \"background-color 0.3s\",\r\n//                             boxShadow: \"0px 2px 5px rgba(0, 0, 0, 0.2)\"\r\n//                         }}\r\n//                         onMouseOver={(e) => e.target.style.backgroundColor = \"#0056b3\"} /* Hover effect */\r\n//                         onMouseOut={(e) => e.target.style.backgroundColor = \"#007BFF\"} \r\n//                     >\r\n//                         Search Address\r\n//                     </button>\r\n//                 </div>\r\n//             )}\r\n\r\n//             <SearchForm setGraphData={setGraphData} />\r\n\r\n//             <div style={{\r\n//                 width: \"59%\",\r\n//                 height: \"500px\",\r\n//                 border: \"1px solid #b3e5fc\",\r\n//                 borderRadius: \"10px\",\r\n//                 padding: \"10px\",\r\n//                 margin: \"10px 0\", // Ensure no auto-centering\r\n//                 boxShadow: \"0px 4px 10px rgba(0,0,0,0.15)\",\r\n//                 backgroundColor: \"white\", // White background for contrast\r\n//                 display: \"flex\", // Ensures content aligns properly\r\n//                 alignItems: \"center\", // Aligns map within box\r\n//                 justifyContent: \"center\" // Aligns the map box to the left\r\n//             }}>\r\n//             <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: \"100%\", width: \"100%\", borderRadius: \"8px\" }}>\r\n//                 <TileLayer\r\n//                     attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n//                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n//                 />\r\n\r\n//                 {/* AutoZoom Component to adjust map bounds dynamically */}\r\n                \r\n//                 <AutoZoom locations={allLocations} />\r\n//                 {allLocations.length > 0 ? (\r\n//                     <AutoZoom locations={allLocations} />\r\n//                 ) : (\r\n//                     <div style={{ textAlign: \"center\", fontSize: \"18px\", color: \"red\", marginTop: \"20px\" }}>\r\n//                         ❌ No locations found. Try a different search.\r\n//                     </div>\r\n//                 )}\r\n//                 {/* 🎯 Draw user location marker */}\r\n//                 {userLocation &&  (\r\n//                     <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\r\n//                         <Popup><strong>Your Location</strong></Popup>\r\n//                     </Marker>\r\n//                 )}\r\n                \r\n//                 {/* 🎯 Draw clinic markers */}\r\n//                 {graphData.map((data, index) => {\r\n//                     const color = lineColors[index % lineColors.length]; // Match line & marker color\r\n//                     // Extract valid lat/lng values from multiple possible sources\r\n//                     const latitude = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\r\n//                     const longitude = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\r\n//                     // 🛑 Skip if latitude or longitude is missing\r\n//                     if (!latitude || !longitude) {\r\n//                         console.warn(`⚠️ Skipping invalid location: ${data.clinic_name || data.mvz_name || data.neurologe_name || data.onkologe_name}`);\r\n//                         return null;\r\n//                     }\r\n\r\n//                     return (\r\n//                         <Marker key={index} position={[latitude, longitude]} icon={getColoredClinicIcon(color)}>\r\n//                             <Popup>\r\n//                                 <strong>{data.clinic_name || data.mvz_name || data.neurologe_name || data.onkologe_name}</strong><br />\r\n//                                 <strong>City:</strong> {data.clinic_city || data.mvz_city || data.neurologe_city || data.onkologe_city} <br />\r\n//                                 <strong>Address:</strong> {data.clinic_address || data.mvz_address || data.neurologe_address || data.onkologe_address || \"N/A\"} <br />\r\n//                                 <strong>Beds:</strong> {data.clinic_number_of_beds || \"N/A\"}\r\n//                             </Popup>\r\n//                         </Marker>\r\n//                     );\r\n//                 })}\r\n//                 {/* 🎯 Draw lines between user location & clinics */}\r\n//                 {userLocation && graphData.map((data, index) => {\r\n//         const color = lineColors[index % lineColors.length]; // Match line color\r\n\r\n//         // Extract lat/lng for the target location\r\n//         const latitude = data.clinic_latitude || data.mvz_latitude || data.neurologe_latitude || data.onkologe_latitude;\r\n//         const longitude = data.clinic_longitude || data.mvz_longitude || data.neurologe_longitude || data.onkologe_longitude;\r\n\r\n//         // 🛑 Skip if lat/lng is missing\r\n//         if (!latitude || !longitude) return null;\r\n\r\n//         return (\r\n//             <Polyline \r\n//                 key={index} \r\n//                 positions={[\r\n//                     [userLocation.latitude, userLocation.longitude], \r\n//                     [latitude, longitude]\r\n//                 ]} \r\n//                 color={color} \r\n//                 weight={2} \r\n//             />\r\n//         );\r\n//     })}\r\n//             </MapContainer>\r\n//         </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Map;\r\n\r\nimport React, { useState, useEffect, useMemo } from \"react\";\r\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport SearchForm from \"./SearchForm\";\r\nimport L from \"leaflet\";\r\nimport { useLocation } from \"./LocationContext\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\n// 🎯 Predefined colors for different providers\r\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// 🟢 Custom icon for user location\r\nconst userIcon = L.icon({\r\n    iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\r\n    iconSize: [35, 35],\r\n    iconAnchor: [17, 35]\r\n});\r\n\r\n// 🎯 Function to create color-matched clinic/MVZ/etc. icons\r\nconst getColoredProviderIcon = (color) => {\r\n    return L.divIcon({\r\n        className: \"custom-clinic-marker\",\r\n        html: `<div style=\"\r\n            width: 30px; height: 30px; \r\n            background-color: ${color}; \r\n            border-radius: 50%; \r\n            border: 1px solid black;\r\n            display: flex; justify-content: center; align-items: center;\">\r\n        </div>`,\r\n        iconSize: [20, 20],\r\n        iconAnchor: [15, 20]\r\n    });\r\n};\r\n\r\n// ✅ AutoZoom component (now fully dynamic & functional)\r\nconst AutoZoom = ({ locations }) => {\r\n    const map = useMap();\r\n\r\n    useEffect(() => {\r\n        // 🎯 Filter only locations with valid latitude & longitude\r\n        const validLocations = locations.filter(loc => loc.latitude && loc.longitude);\r\n\r\n        if (validLocations.length > 0) {\r\n            const bounds = L.latLngBounds(validLocations.map(loc => [loc.latitude, loc.longitude]));\r\n            map.fitBounds(bounds, { padding: [50, 50] }); // Ensure all points are visible\r\n        } else {\r\n            console.warn(\"⚠️ No valid locations found for AutoZoom!\");\r\n        }\r\n    }, [locations, map]);\r\n\r\n    return null; // No UI component, only logic\r\n};\r\n\r\nconst Map = () => {\r\n    const [graphData, setGraphData] = useState([]);  // Store clinic/MVZ/etc. data\r\n    const [userLocation, setUserLocation] = useState(null);  // User location\r\n    const [locationChoice, setLocationChoice] = useState(\"\");  \r\n    const [manualAddress, setManualAddress] = useState(\"\");  \r\n    const { setAllLocations } = useLocation();\r\n\r\n    // 🚀 Fetch user's current location\r\n    const fetchMyLocation = () => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    const lat = position.coords.latitude;\r\n                    const lon = position.coords.longitude;\r\n\r\n                    if (lat && lon) {\r\n                        setUserLocation({\r\n                            latitude: lat,\r\n                            longitude: lon\r\n                        });\r\n                        console.log(\"✅ User location set:\", lat, lon);\r\n                    } else {\r\n                        console.warn(\"⚠️ Invalid user location received.\");\r\n                    }\r\n                },\r\n                (error) => {\r\n                    console.error(\"❌ Error getting user location:\", error);\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    // 🎯 Handle location selection\r\n    const handleLocationChoice = (choice) => {\r\n        setLocationChoice(choice);\r\n        setUserLocation(null);\r\n        setManualAddress(\"\"); \r\n        if (choice === \"my-location\") {\r\n            fetchMyLocation();\r\n        }\r\n    };\r\n\r\n    // 🎯 Convert address to latitude & longitude using OpenStreetMap's API\r\n    const handleManualAddressSearch = async () => {\r\n        if (!manualAddress.trim()) {\r\n            alert(\"Please enter a valid address.\");\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\r\n            const data = await response.json();\r\n            if (data.length > 0 && data[0].lat && data[0].lon) {\r\n                setUserLocation({\r\n                    latitude: parseFloat(data[0].lat),\r\n                    longitude: parseFloat(data[0].lon)\r\n                });\r\n            } else {\r\n                alert(\"Address not found. Please enter a more precise location.\");\r\n                console.warn(\"❌ No valid latitude/longitude found in API response.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching geolocation:\", error);\r\n            alert(\"Failed to fetch location. Try again later.\");\r\n        }\r\n    };\r\n\r\n    // ✅ Combine all locations (graph data + user location) dynamically\r\n    const allLocations = useMemo(() => {\r\n        const locations = [...graphData];  // Start with clinic/MVZ/etc. data\r\n        if (userLocation) {\r\n            locations.push({ name: \"Your Location\", provider_type: \"User\", ...userLocation });\r\n        }\r\n        return locations;\r\n    }, [graphData, userLocation]);\r\n\r\n    // ✅ Update locations when changed\r\n    useEffect(() => {\r\n        setAllLocations(allLocations);\r\n    }, [allLocations, setAllLocations]);\r\n\r\n    return (\r\n        <div style={{\r\n            backgroundColor: \"#f0ffff\", // Light blue background\r\n            border: \"1px solid #b3e5fc\",\r\n            borderRadius: \"10px\",\r\n            padding: \"10px\",\r\n            marginBottom: \"15px\",\r\n            boxShadow: \"0px 2px 10px rgba(0,0,0,0.1)\"\r\n        }}>\r\n        <h3>Wählen Sie Ihren Standort:</h3>\r\n        <div style={{ display: \"flex\", gap: \"10px\", marginBottom: \"10px\", paddingLeft: \"10px\" }}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"my-location\")}>Meinen Standort verwenden</Button>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"manual\")}>Standort manuell eingeben</Button>\r\n        </div>\r\n\r\n        {locationChoice === \"manual\" && (\r\n            <div style={{ paddingLeft: \"10px\",marginBottom: \"10px\" }}>\r\n                <input \r\n                    type=\"text\" \r\n                    placeholder=\"Geben Sie Ihre Adresse ein\" \r\n                    value={manualAddress} \r\n                    onChange={(e) => setManualAddress(e.target.value)}\r\n                    style={{ padding: \"8px\", width: \"250px\", border: \"1px solid #ccc\", borderRadius: \"5px\", marginRight: \"10px\" }} \r\n                />\r\n                <button \r\n                    onClick={handleManualAddressSearch} \r\n                    style={{\r\n                        padding: \"8px 12px\",\r\n                        borderRadius: \"5px\",\r\n                        backgroundColor: \"#007BFF\",\r\n                        color: \"white\",\r\n                        border: \"none\",\r\n                        cursor: \"pointer\",\r\n                        fontSize: \"14px\",\r\n                        fontWeight: \"bold\",\r\n                        transition: \"background-color 0.3s\"\r\n                    }}\r\n                    onMouseOver={(e) => e.target.style.backgroundColor = \"#0056b3\"}\r\n                    onMouseOut={(e) => e.target.style.backgroundColor = \"#007BFF\"}\r\n                >\r\n                    Search Address\r\n                </button>\r\n            </div>\r\n        )}\r\n\r\n        <SearchForm setGraphData={setGraphData} />\r\n\r\n        <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: \"500px\", width: \"100%\", borderRadius: \"8px\" }}>\r\n            <TileLayer\r\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n\r\n            <AutoZoom locations={allLocations} />\r\n\r\n            {allLocations.map((data, index) => (\r\n                <Marker key={index} position={[data.latitude, data.longitude]} icon={getColoredProviderIcon(lineColors[index % lineColors.length])}>\r\n                    <Popup>\r\n                        <strong>{data.name}</strong> <br />\r\n                        <strong>City:</strong> {data.city || \"N/A\"} <br />\r\n                        <strong>Address:</strong> {data.address || \"N/A\"}\r\n                    </Popup>\r\n                </Marker>\r\n            ))}\r\n        </MapContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC3D,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AACxF,OAAO,0BAA0B;AACjC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,CAAC,MAAM,SAAS;AACvB,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,OAAOC,MAAM,MAAM,sBAAsB;;AAEzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC;;AAEjF;AACA,MAAMC,QAAQ,GAAGN,CAAC,CAACO,IAAI,CAAC;EACpBC,OAAO,EAAE,uDAAuD;EAChEC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;EAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE;AACvB,CAAC,CAAC;;AAEF;AACA,MAAMC,sBAAsB,GAAIC,KAAK,IAAK;EACtC,OAAOZ,CAAC,CAACa,OAAO,CAAC;IACbC,SAAS,EAAE,sBAAsB;IACjCC,IAAI,EAAE;AACd;AACA,gCAAgCH,KAAK;AACrC;AACA;AACA;AACA,eAAe;IACPH,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;IAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE;EACvB,CAAC,CAAC;AACN,CAAC;;AAED;AACA,MAAMM,QAAQ,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAMC,GAAG,GAAGxB,MAAM,CAAC,CAAC;EAEpBJ,SAAS,CAAC,MAAM;IACZ;IACA,MAAM6B,cAAc,GAAGH,SAAS,CAACI,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,QAAQ,IAAID,GAAG,CAACE,SAAS,CAAC;IAE7E,IAAIJ,cAAc,CAACK,MAAM,GAAG,CAAC,EAAE;MAC3B,MAAMC,MAAM,GAAG1B,CAAC,CAAC2B,YAAY,CAACP,cAAc,CAACD,GAAG,CAACG,GAAG,IAAI,CAACA,GAAG,CAACC,QAAQ,EAAED,GAAG,CAACE,SAAS,CAAC,CAAC,CAAC;MACvFL,GAAG,CAACS,SAAS,CAACF,MAAM,EAAE;QAAEG,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE;MAAE,CAAC,CAAC,CAAC,CAAC;IAClD,CAAC,MAAM;MACHC,OAAO,CAACC,IAAI,CAAC,2CAA2C,CAAC;IAC7D;EACJ,CAAC,EAAE,CAACd,SAAS,EAAEE,GAAG,CAAC,CAAC;EAEpB,OAAO,IAAI,CAAC,CAAC;AACjB,CAAC;AAACD,EAAA,CAhBIF,QAAQ;EAAA,QACErB,MAAM;AAAA;AAAAqC,EAAA,GADhBhB,QAAQ;AAkBd,MAAMiB,GAAG,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACd,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG9C,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EACjD,MAAM,CAAC+C,YAAY,EAAEC,eAAe,CAAC,GAAGhD,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EACzD,MAAM,CAACiD,cAAc,EAAEC,iBAAiB,CAAC,GAAGlD,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACmD,aAAa,EAAEC,gBAAgB,CAAC,GAAGpD,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM;IAAEqD;EAAgB,CAAC,GAAG1C,WAAW,CAAC,CAAC;;EAEzC;EACA,MAAM2C,eAAe,GAAGA,CAAA,KAAM;IAC1B,IAAIC,SAAS,CAACC,WAAW,EAAE;MACvBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACnCC,QAAQ,IAAK;QACV,MAAMC,GAAG,GAAGD,QAAQ,CAACE,MAAM,CAAC3B,QAAQ;QACpC,MAAM4B,GAAG,GAAGH,QAAQ,CAACE,MAAM,CAAC1B,SAAS;QAErC,IAAIyB,GAAG,IAAIE,GAAG,EAAE;UACZb,eAAe,CAAC;YACZf,QAAQ,EAAE0B,GAAG;YACbzB,SAAS,EAAE2B;UACf,CAAC,CAAC;UACFrB,OAAO,CAACsB,GAAG,CAAC,sBAAsB,EAAEH,GAAG,EAAEE,GAAG,CAAC;QACjD,CAAC,MAAM;UACHrB,OAAO,CAACC,IAAI,CAAC,oCAAoC,CAAC;QACtD;MACJ,CAAC,EACAsB,KAAK,IAAK;QACPvB,OAAO,CAACuB,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MAC1D,CACJ,CAAC;IACL;EACJ,CAAC;;EAED;EACA,MAAMC,oBAAoB,GAAIC,MAAM,IAAK;IACrCf,iBAAiB,CAACe,MAAM,CAAC;IACzBjB,eAAe,CAAC,IAAI,CAAC;IACrBI,gBAAgB,CAAC,EAAE,CAAC;IACpB,IAAIa,MAAM,KAAK,aAAa,EAAE;MAC1BX,eAAe,CAAC,CAAC;IACrB;EACJ,CAAC;;EAED;EACA,MAAMY,yBAAyB,GAAG,MAAAA,CAAA,KAAY;IAC1C,IAAI,CAACf,aAAa,CAACgB,IAAI,CAAC,CAAC,EAAE;MACvBC,KAAK,CAAC,+BAA+B,CAAC;MACtC;IACJ;IACA,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4DAA4DC,kBAAkB,CAACpB,aAAa,CAAC,EAAE,CAAC;MAC7H,MAAMqB,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACrC,MAAM,GAAG,CAAC,IAAIqC,IAAI,CAAC,CAAC,CAAC,CAACb,GAAG,IAAIa,IAAI,CAAC,CAAC,CAAC,CAACX,GAAG,EAAE;QAC/Cb,eAAe,CAAC;UACZf,QAAQ,EAAEyC,UAAU,CAACF,IAAI,CAAC,CAAC,CAAC,CAACb,GAAG,CAAC;UACjCzB,SAAS,EAAEwC,UAAU,CAACF,IAAI,CAAC,CAAC,CAAC,CAACX,GAAG;QACrC,CAAC,CAAC;MACN,CAAC,MAAM;QACHO,KAAK,CAAC,0DAA0D,CAAC;QACjE5B,OAAO,CAACC,IAAI,CAAC,sDAAsD,CAAC;MACxE;IACJ,CAAC,CAAC,OAAOsB,KAAK,EAAE;MACZvB,OAAO,CAACuB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDK,KAAK,CAAC,4CAA4C,CAAC;IACvD;EACJ,CAAC;;EAED;EACA,MAAMO,YAAY,GAAGzE,OAAO,CAAC,MAAM;IAC/B,MAAMyB,SAAS,GAAG,CAAC,GAAGkB,SAAS,CAAC,CAAC,CAAE;IACnC,IAAIE,YAAY,EAAE;MACdpB,SAAS,CAACiD,IAAI,CAAC;QAAEC,IAAI,EAAE,eAAe;QAAEC,aAAa,EAAE,MAAM;QAAE,GAAG/B;MAAa,CAAC,CAAC;IACrF;IACA,OAAOpB,SAAS;EACpB,CAAC,EAAE,CAACkB,SAAS,EAAEE,YAAY,CAAC,CAAC;;EAE7B;EACA9C,SAAS,CAAC,MAAM;IACZoD,eAAe,CAACsB,YAAY,CAAC;EACjC,CAAC,EAAE,CAACA,YAAY,EAAEtB,eAAe,CAAC,CAAC;EAEnC,oBACIvC,OAAA;IAAKiE,KAAK,EAAE;MACRC,eAAe,EAAE,SAAS;MAAE;MAC5BC,MAAM,EAAE,mBAAmB;MAC3BC,YAAY,EAAE,MAAM;MACpB3C,OAAO,EAAE,MAAM;MACf4C,YAAY,EAAE,MAAM;MACpBC,SAAS,EAAE;IACf,CAAE;IAAAC,QAAA,gBACFvE,OAAA;MAAAuE,QAAA,EAAI;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnC3E,OAAA;MAAKiE,KAAK,EAAE;QAAEW,OAAO,EAAE,MAAM;QAAEC,GAAG,EAAE,MAAM;QAAER,YAAY,EAAE,MAAM;QAAES,WAAW,EAAE;MAAO,CAAE;MAAAP,QAAA,gBACpFvE,OAAA,CAACF,MAAM;QAACiF,OAAO,EAAC,WAAW;QAACvE,KAAK,EAAC,SAAS;QAACwE,OAAO,EAAEA,CAAA,KAAM9B,oBAAoB,CAAC,aAAa,CAAE;QAAAqB,QAAA,EAAC;MAAyB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAClI3E,OAAA,CAACF,MAAM;QAACiF,OAAO,EAAC,WAAW;QAACvE,KAAK,EAAC,SAAS;QAACwE,OAAO,EAAEA,CAAA,KAAM9B,oBAAoB,CAAC,QAAQ,CAAE;QAAAqB,QAAA,EAAC;MAAyB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5H,CAAC,EAELxC,cAAc,KAAK,QAAQ,iBACxBnC,OAAA;MAAKiE,KAAK,EAAE;QAAEa,WAAW,EAAE,MAAM;QAACT,YAAY,EAAE;MAAO,CAAE;MAAAE,QAAA,gBACrDvE,OAAA;QACIiF,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,4BAA4B;QACxCC,KAAK,EAAE9C,aAAc;QACrB+C,QAAQ,EAAGC,CAAC,IAAK/C,gBAAgB,CAAC+C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAClDlB,KAAK,EAAE;UAAExC,OAAO,EAAE,KAAK;UAAE8D,KAAK,EAAE,OAAO;UAAEpB,MAAM,EAAE,gBAAgB;UAAEC,YAAY,EAAE,KAAK;UAAEoB,WAAW,EAAE;QAAO;MAAE;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjH,CAAC,eACF3E,OAAA;QACIgF,OAAO,EAAE5B,yBAA0B;QACnCa,KAAK,EAAE;UACHxC,OAAO,EAAE,UAAU;UACnB2C,YAAY,EAAE,KAAK;UACnBF,eAAe,EAAE,SAAS;UAC1B1D,KAAK,EAAE,OAAO;UACd2D,MAAM,EAAE,MAAM;UACdsB,MAAM,EAAE,SAAS;UACjBC,QAAQ,EAAE,MAAM;UAChBC,UAAU,EAAE,MAAM;UAClBC,UAAU,EAAE;QAChB,CAAE;QACFC,WAAW,EAAGR,CAAC,IAAKA,CAAC,CAACC,MAAM,CAACrB,KAAK,CAACC,eAAe,GAAG,SAAU;QAC/D4B,UAAU,EAAGT,CAAC,IAAKA,CAAC,CAACC,MAAM,CAACrB,KAAK,CAACC,eAAe,GAAG,SAAU;QAAAK,QAAA,EACjE;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CACR,eAED3E,OAAA,CAACL,UAAU;MAACqC,YAAY,EAAEA;IAAa;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAE1C3E,OAAA,CAACX,YAAY;MAAC0G,MAAM,EAAE,CAAC,MAAM,EAAE,KAAK,CAAE;MAACC,IAAI,EAAE,CAAE;MAACC,eAAe,EAAE,KAAM;MAAChC,KAAK,EAAE;QAAEiC,MAAM,EAAE,OAAO;QAAEX,KAAK,EAAE,MAAM;QAAEnB,YAAY,EAAE;MAAM,CAAE;MAAAG,QAAA,gBACnIvE,OAAA,CAACV,SAAS;QACN6G,WAAW,EAAC,yFAAyF;QACrGC,GAAG,EAAC;MAAoD;QAAA5B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3D,CAAC,eAEF3E,OAAA,CAACY,QAAQ;QAACC,SAAS,EAAEgD;MAAa;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAEpCd,YAAY,CAAC9C,GAAG,CAAC,CAAC2C,IAAI,EAAE2C,KAAK,kBAC1BrG,OAAA,CAACR,MAAM;QAAaoD,QAAQ,EAAE,CAACc,IAAI,CAACvC,QAAQ,EAAEuC,IAAI,CAACtC,SAAS,CAAE;QAACjB,IAAI,EAAEI,sBAAsB,CAACN,UAAU,CAACoG,KAAK,GAAGpG,UAAU,CAACoB,MAAM,CAAC,CAAE;QAAAkD,QAAA,eAC/HvE,OAAA,CAACP,KAAK;UAAA8E,QAAA,gBACFvE,OAAA;YAAAuE,QAAA,EAASb,IAAI,CAACK;UAAI;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,KAAC,eAAA3E,OAAA;YAAAwE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACnC3E,OAAA;YAAAuE,QAAA,EAAQ;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACjB,IAAI,CAAC4C,IAAI,IAAI,KAAK,EAAC,GAAC,eAAAtG,OAAA;YAAAwE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAClD3E,OAAA;YAAAuE,QAAA,EAAQ;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACjB,IAAI,CAAC6C,OAAO,IAAI,KAAK;QAAA;UAAA/B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7C;MAAC,GALC0B,KAAK;QAAA7B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMV,CACX,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEd,CAAC;AAAC7C,GAAA,CAnJID,GAAG;EAAA,QAKuBhC,WAAW;AAAA;AAAA2G,GAAA,GALrC3E,GAAG;AAqJT,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAA4E,GAAA;AAAAC,YAAA,CAAA7E,EAAA;AAAA6E,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}