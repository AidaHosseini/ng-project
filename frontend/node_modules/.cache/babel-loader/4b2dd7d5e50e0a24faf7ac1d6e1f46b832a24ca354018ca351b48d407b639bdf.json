{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\map.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useState, useEffect, useMemo } from \"react\";\n// import { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet'\n// import 'leaflet/dist/leaflet.css'\n// import SearchForm from \"./SearchForm\";\n// import L from \"leaflet\";\n// import { useLocation } from \"./LocationContext\";\n\n// // Custom icon for user location\n// const userIcon = new L.Icon({\n//     iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\n//     iconSize: [30, 30],\n//     iconAnchor: [15, 30]\n// });\n\n// // Predefined colors for lines (cycling through these)\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// // Auto-zoom component\n// const AutoZoom = ({ locations }) => {\n//     const map = useMap(); // Access the map instance\n\n//     useEffect(() => {\n//         if (locations.length > 0) {\n//             const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\n//             map.fitBounds(bounds, { padding: [50, 50] }); // Adjust padding for better view\n//         }\n//     }, [locations, map]);\n\n//     return null; // This component only handles map logic\n// };\n// const Map = () => {\n\n//     const [latitude, setlatitude] = useState(0);\n//     const [longitude, setlongitude] = useState(0);\n//     const [graphData, setGraphData] = useState([]);\n//     const [userLocation, setUserLocation] = useState(null);\n//     const [locationChoice, setLocationChoice] = useState(\"\"); // \"my-location\" or \"manual\"\n//     const [manualAddress, setManualAddress] = useState(\"\"); // User's address input\n//     const { setAllLocations } = useLocation();\n\n//     console.log(graphData[0]);\n//     // setlatitude(graphData[0].latitude);\n//     // setlongitude(graphData[0].longitude);\n//     useEffect(() => {\n//         if (graphData.length > 0) {\n//             graphData.forEach((data, index) => {\n//                 console.log(`Position ${index + 1}: Latitude ${data.latitude}, Longitude ${data.longitude}`);\n//                 setlatitude(data.latitude);\n//                 setlongitude(data.longitude);\n//             });\n\n//         }\n//     }, [graphData]);  // Runs when graphData updates\n\n//     const position = [latitude, longitude];\n//     console.log(position);\n\n//    // Get user's current location\n//    const fetchMyLocation = () => {\n//     if (navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(\n//             (position) => {\n//                 setUserLocation({\n//                     latitude: position.coords.latitude,\n//                     longitude: position.coords.longitude\n//                 });\n//             },\n//             (error) => {\n//                 console.error(\"Error getting location:\", error);\n//             }\n//         );\n//     }\n// };\n\n// // Handle location selection\n// const handleLocationChoice = (choice) => {\n//     setLocationChoice(choice);\n//     setUserLocation(null);\n//     setManualAddress(\"\"); // Reset manual input\n//     if (choice === \"my-location\") {\n//         fetchMyLocation();\n//     }\n// };\n\n// // Convert address to latitude & longitude using OpenStreetMap's Nominatim API\n// const handleManualAddressSearch = async () => {\n//     if (!manualAddress.trim()) {\n//         alert(\"Please enter a valid address.\");\n//         return;\n//     }\n\n//     try {\n//         const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n//         const data = await response.json();\n\n//         if (data.length > 0) {\n//             setUserLocation({\n//                 latitude: parseFloat(data[0].lat),\n//                 longitude: parseFloat(data[0].lon)\n//             });\n//         } else {\n//             alert(\"Address not found. Please enter a more precise location.\");\n//         }\n//     } catch (error) {\n//         console.error(\"Error fetching geolocation:\", error);\n//         alert(\"Failed to fetch location. Try again later.\");\n//     }\n// };\n\n//   // ✅ UseMemo prevents re-creating allLocations on every render\n//   const allLocations = useMemo(() => {\n//     const locations = [...graphData];\n//     if (userLocation) {\n//         locations.push({ clinic_name: \"Your Location\", ...userLocation });\n//     }\n//     return locations;\n// }, [graphData, userLocation]); // Recalculates only when these change\n\n// // ✅ useEffect only updates when allLocations changes\n// useEffect(() => {\n//     setAllLocations(allLocations);\n// }, [allLocations, setAllLocations]);\n\n//   return (\n//     <div>\n//       <h1>New Ways of Care Provision and Analysis of Patient Flows</h1>\n//        {/* Location Selection */}\n//        <div>\n//                 <h3>Select Your Location:</h3>\n//                 <button onClick={() => handleLocationChoice(\"my-location\")}>Use My Location</button>\n//                 <button onClick={() => handleLocationChoice(\"manual\")}>Enter Location Manually</button>\n//             </div>\n\n//             {/* Manual Address Input */}\n//             {locationChoice === \"manual\" && (\n//                 <div>\n//                     <input \n//                         type=\"text\" \n//                         placeholder=\"Enter your address\" \n//                         value={manualAddress} \n//                         onChange={(e) => setManualAddress(e.target.value)}\n//                     />\n//                     <button onClick={handleManualAddressSearch}>Search Address</button>\n//                 </div>\n//             )}\n\n//       <SearchForm setGraphData={setGraphData} />\n\n//       <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{height: 500, width: \"60%\"}}>\n//     <TileLayer\n//       attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n//       url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//     />\n//     {/* Auto-Zoom Feature */}\n//     <AutoZoom locations={allLocations} />\n//     {/* <Marker position={position} >\n//       <Popup>\n//         A pretty CSS3 popup. <br /> Easily customizable.\n//       </Popup>\n//     </Marker> */}\n//     {graphData.map((data, index) => (\n//                 <Marker key={index} position={[data.latitude, data.longitude]}>\n//                     <Popup>\n//                         <strong>{data.clinic_name}</strong><br />\n//                         City: {data.city} <br />\n//                         Lat: {data.latitude}, Lng: {data.longitude}\n//                     </Popup>\n//                 </Marker>\n\n//             ))}\n\n//             {/* Show User's Current Location */}\n//             {userLocation && (\n//                     <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\n//                         <Popup>\n//                             <strong>Your Location</strong><br />\n//                             Lat: {userLocation.latitude}, Lng: {userLocation.longitude}\n//                         </Popup>\n//                     </Marker>\n//                 )}\n\n//                   {/* Draw lines from user to each clinic with different colors */}\n//                 {userLocation && graphData.map((data, index) => (\n//                     <Polyline \n//                         key={index} \n//                         positions={[[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]]} \n//                         color={lineColors[index % lineColors.length]} // Cycle through colors\n//                         weight={3} // Line thickness\n//                     />\n//                 ))}\n\n//   </MapContainer>,\n//     </div>\n//   );\n// };\n\n// export default Map;\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport SearchForm from \"./SearchForm\";\nimport L from \"leaflet\";\nimport { useLocation } from \"./LocationContext\";\n\n// Custom icon for user location\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst userIcon = new L.Icon({\n  iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\n  iconSize: [30, 30],\n  iconAnchor: [15, 30]\n});\n\n// Predefined colors for lines (cycling through these)\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// Auto-zoom component\nconst AutoZoom = ({\n  locations\n}) => {\n  _s();\n  const map = useMap(); // Access the map instance\n\n  useEffect(() => {\n    if (locations.length > 0) {\n      const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\n      map.fitBounds(bounds, {\n        padding: [50, 50]\n      }); // Adjust padding for better view\n    }\n  }, [locations, map]);\n  return null;\n};\n_s(AutoZoom, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = AutoZoom;\nconst Map = () => {\n  _s2();\n  const [graphData, setGraphData] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const {\n    setAllLocations\n  } = useLocation();\n\n  // Get user's current location\n  const fetchMyLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setUserLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      }, error => {\n        console.error(\"Error getting location:\", error);\n      });\n    }\n  };\n\n  // Auto-update all locations when data changes\n  const allLocations = useMemo(() => {\n    const locations = [...graphData];\n    if (userLocation) {\n      locations.push({\n        clinic_name: \"Your Location\",\n        ...userLocation\n      });\n    }\n    return locations;\n  }, [graphData, userLocation]);\n  useEffect(() => {\n    setAllLocations(allLocations);\n  }, [allLocations, setAllLocations]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"New Ways of Care Provision and Analysis of Patient Flows\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      setGraphData: setGraphData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [50.851, 8.015],\n      zoom: 8,\n      scrollWheelZoom: false,\n      style: {\n        height: 500,\n        width: \"60%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AutoZoom, {\n        locations: allLocations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }, this), graphData.map((data, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: [data.latitude, data.longitude],\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: data.clinic_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 29\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 65\n          }, this), \"City: \", data.city, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 47\n          }, this), \"Identity: \", data.clinic_id, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 56\n          }, this), \"Number of Beds: \", data.number_of_bed || \"N/A\", \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 75\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 29\n          }, this), \"ICD Name: \", data.icd_name, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 55\n          }, this), \"Case Count: \", data.icd_cases || \"N/A\", \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 67\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 21\n      }, this)), userLocation && /*#__PURE__*/_jsxDEV(Marker, {\n        position: [userLocation.latitude, userLocation.longitude],\n        icon: userIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Your Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 29\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 60\n          }, this), \"Lat: \", userLocation.latitude, \", Lng: \", userLocation.longitude]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 21\n      }, this), userLocation && graphData.map((data, index) => /*#__PURE__*/_jsxDEV(Polyline, {\n        positions: [[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]],\n        color: lineColors[index % lineColors.length] // Cycle through colors\n        ,\n        weight: 3 // Line thickness\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 9\n  }, this);\n};\n_s2(Map, \"DQFHkqipB1QMb9mK92P50TvlVnI=\", false, function () {\n  return [useLocation];\n});\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"AutoZoom\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","MapContainer","TileLayer","useMap","Marker","Popup","Polyline","SearchForm","L","useLocation","jsxDEV","_jsxDEV","userIcon","Icon","iconUrl","iconSize","iconAnchor","lineColors","AutoZoom","locations","_s","map","length","bounds","latLngBounds","loc","latitude","longitude","fitBounds","padding","_c","Map","_s2","graphData","setGraphData","userLocation","setUserLocation","setAllLocations","fetchMyLocation","navigator","geolocation","getCurrentPosition","position","coords","error","console","allLocations","push","clinic_name","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","scrollWheelZoom","style","height","width","attribution","url","data","index","city","clinic_id","number_of_bed","icd_name","icd_cases","icon","positions","color","weight","_c2","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/map.js"],"sourcesContent":["// import React, { useState, useEffect, useMemo } from \"react\";\r\n// import { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet'\r\n// import 'leaflet/dist/leaflet.css'\r\n// import SearchForm from \"./SearchForm\";\r\n// import L from \"leaflet\";\r\n// import { useLocation } from \"./LocationContext\";\r\n\r\n\r\n// // Custom icon for user location\r\n// const userIcon = new L.Icon({\r\n//     iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\r\n//     iconSize: [30, 30],\r\n//     iconAnchor: [15, 30]\r\n// });\r\n\r\n\r\n\r\n// // Predefined colors for lines (cycling through these)\r\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// // Auto-zoom component\r\n// const AutoZoom = ({ locations }) => {\r\n//     const map = useMap(); // Access the map instance\r\n\r\n//     useEffect(() => {\r\n//         if (locations.length > 0) {\r\n//             const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\r\n//             map.fitBounds(bounds, { padding: [50, 50] }); // Adjust padding for better view\r\n//         }\r\n//     }, [locations, map]);\r\n\r\n//     return null; // This component only handles map logic\r\n// };\r\n// const Map = () => {\r\n\r\n//     const [latitude, setlatitude] = useState(0);\r\n//     const [longitude, setlongitude] = useState(0);\r\n//     const [graphData, setGraphData] = useState([]);\r\n//     const [userLocation, setUserLocation] = useState(null);\r\n//     const [locationChoice, setLocationChoice] = useState(\"\"); // \"my-location\" or \"manual\"\r\n//     const [manualAddress, setManualAddress] = useState(\"\"); // User's address input\r\n//     const { setAllLocations } = useLocation();\r\n\r\n\r\n//     console.log(graphData[0]);\r\n//     // setlatitude(graphData[0].latitude);\r\n//     // setlongitude(graphData[0].longitude);\r\n//     useEffect(() => {\r\n//         if (graphData.length > 0) {\r\n//             graphData.forEach((data, index) => {\r\n//                 console.log(`Position ${index + 1}: Latitude ${data.latitude}, Longitude ${data.longitude}`);\r\n//                 setlatitude(data.latitude);\r\n//                 setlongitude(data.longitude);\r\n//             });\r\n            \r\n//         }\r\n//     }, [graphData]);  // Runs when graphData updates\r\n    \r\n//     const position = [latitude, longitude];\r\n//     console.log(position);\r\n\r\n//    // Get user's current location\r\n//    const fetchMyLocation = () => {\r\n//     if (navigator.geolocation) {\r\n//         navigator.geolocation.getCurrentPosition(\r\n//             (position) => {\r\n//                 setUserLocation({\r\n//                     latitude: position.coords.latitude,\r\n//                     longitude: position.coords.longitude\r\n//                 });\r\n//             },\r\n//             (error) => {\r\n//                 console.error(\"Error getting location:\", error);\r\n//             }\r\n//         );\r\n//     }\r\n// };\r\n\r\n\r\n// // Handle location selection\r\n// const handleLocationChoice = (choice) => {\r\n//     setLocationChoice(choice);\r\n//     setUserLocation(null);\r\n//     setManualAddress(\"\"); // Reset manual input\r\n//     if (choice === \"my-location\") {\r\n//         fetchMyLocation();\r\n//     }\r\n// };\r\n\r\n// // Convert address to latitude & longitude using OpenStreetMap's Nominatim API\r\n// const handleManualAddressSearch = async () => {\r\n//     if (!manualAddress.trim()) {\r\n//         alert(\"Please enter a valid address.\");\r\n//         return;\r\n//     }\r\n\r\n//     try {\r\n//         const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\r\n//         const data = await response.json();\r\n        \r\n//         if (data.length > 0) {\r\n//             setUserLocation({\r\n//                 latitude: parseFloat(data[0].lat),\r\n//                 longitude: parseFloat(data[0].lon)\r\n//             });\r\n//         } else {\r\n//             alert(\"Address not found. Please enter a more precise location.\");\r\n//         }\r\n//     } catch (error) {\r\n//         console.error(\"Error fetching geolocation:\", error);\r\n//         alert(\"Failed to fetch location. Try again later.\");\r\n//     }\r\n// };\r\n\r\n\r\n//   // ✅ UseMemo prevents re-creating allLocations on every render\r\n//   const allLocations = useMemo(() => {\r\n//     const locations = [...graphData];\r\n//     if (userLocation) {\r\n//         locations.push({ clinic_name: \"Your Location\", ...userLocation });\r\n//     }\r\n//     return locations;\r\n// }, [graphData, userLocation]); // Recalculates only when these change\r\n\r\n// // ✅ useEffect only updates when allLocations changes\r\n// useEffect(() => {\r\n//     setAllLocations(allLocations);\r\n// }, [allLocations, setAllLocations]);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>New Ways of Care Provision and Analysis of Patient Flows</h1>\r\n//        {/* Location Selection */}\r\n//        <div>\r\n//                 <h3>Select Your Location:</h3>\r\n//                 <button onClick={() => handleLocationChoice(\"my-location\")}>Use My Location</button>\r\n//                 <button onClick={() => handleLocationChoice(\"manual\")}>Enter Location Manually</button>\r\n//             </div>\r\n\r\n//             {/* Manual Address Input */}\r\n//             {locationChoice === \"manual\" && (\r\n//                 <div>\r\n//                     <input \r\n//                         type=\"text\" \r\n//                         placeholder=\"Enter your address\" \r\n//                         value={manualAddress} \r\n//                         onChange={(e) => setManualAddress(e.target.value)}\r\n//                     />\r\n//                     <button onClick={handleManualAddressSearch}>Search Address</button>\r\n//                 </div>\r\n//             )}\r\n\r\n\r\n//       <SearchForm setGraphData={setGraphData} />\r\n\r\n//       <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{height: 500, width: \"60%\"}}>\r\n//     <TileLayer\r\n//       attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n//       url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n//     />\r\n//     {/* Auto-Zoom Feature */}\r\n//     <AutoZoom locations={allLocations} />\r\n//     {/* <Marker position={position} >\r\n//       <Popup>\r\n//         A pretty CSS3 popup. <br /> Easily customizable.\r\n//       </Popup>\r\n//     </Marker> */}\r\n//     {graphData.map((data, index) => (\r\n//                 <Marker key={index} position={[data.latitude, data.longitude]}>\r\n//                     <Popup>\r\n//                         <strong>{data.clinic_name}</strong><br />\r\n//                         City: {data.city} <br />\r\n//                         Lat: {data.latitude}, Lng: {data.longitude}\r\n//                     </Popup>\r\n//                 </Marker>\r\n\r\n//             ))}\r\n\r\n//             {/* Show User's Current Location */}\r\n//             {userLocation && (\r\n//                     <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\r\n//                         <Popup>\r\n//                             <strong>Your Location</strong><br />\r\n//                             Lat: {userLocation.latitude}, Lng: {userLocation.longitude}\r\n//                         </Popup>\r\n//                     </Marker>\r\n//                 )}\r\n\r\n//                   {/* Draw lines from user to each clinic with different colors */}\r\n//                 {userLocation && graphData.map((data, index) => (\r\n//                     <Polyline \r\n//                         key={index} \r\n//                         positions={[[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]]} \r\n//                         color={lineColors[index % lineColors.length]} // Cycle through colors\r\n//                         weight={3} // Line thickness\r\n//                     />\r\n//                 ))}\r\n\r\n                \r\n//   </MapContainer>,\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Map;\r\n\r\nimport React, { useState, useEffect, useMemo } from \"react\";\r\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport SearchForm from \"./SearchForm\";\r\nimport L from \"leaflet\";\r\nimport { useLocation } from \"./LocationContext\";\r\n\r\n// Custom icon for user location\r\nconst userIcon = new L.Icon({\r\n    iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\r\n    iconSize: [30, 30],\r\n    iconAnchor: [15, 30]\r\n});\r\n\r\n// Predefined colors for lines (cycling through these)\r\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// Auto-zoom component\r\nconst AutoZoom = ({ locations }) => {\r\n    const map = useMap(); // Access the map instance\r\n\r\n    useEffect(() => {\r\n        if (locations.length > 0) {\r\n            const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\r\n            map.fitBounds(bounds, { padding: [50, 50] }); // Adjust padding for better view\r\n        }\r\n    }, [locations, map]);\r\n\r\n    return null;\r\n};\r\n\r\nconst Map = () => {\r\n    const [graphData, setGraphData] = useState([]);\r\n    const [userLocation, setUserLocation] = useState(null);\r\n    const { setAllLocations } = useLocation();\r\n\r\n    // Get user's current location\r\n    const fetchMyLocation = () => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    setUserLocation({\r\n                        latitude: position.coords.latitude,\r\n                        longitude: position.coords.longitude\r\n                    });\r\n                },\r\n                (error) => {\r\n                    console.error(\"Error getting location:\", error);\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    // Auto-update all locations when data changes\r\n    const allLocations = useMemo(() => {\r\n        const locations = [...graphData];\r\n        if (userLocation) {\r\n            locations.push({ clinic_name: \"Your Location\", ...userLocation });\r\n        }\r\n        return locations;\r\n    }, [graphData, userLocation]);\r\n\r\n    useEffect(() => {\r\n        setAllLocations(allLocations);\r\n    }, [allLocations, setAllLocations]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>New Ways of Care Provision and Analysis of Patient Flows</h1>\r\n\r\n            {/* Search Form */}\r\n            <SearchForm setGraphData={setGraphData} />\r\n\r\n            <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: 500, width: \"60%\" }}>\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n\r\n                {/* Auto-Zoom Feature */}\r\n                <AutoZoom locations={allLocations} />\r\n\r\n                {/* Clinic Markers */}\r\n                {graphData.map((data, index) => (\r\n                    <Marker key={index} position={[data.latitude, data.longitude]}>\r\n                        <Popup>\r\n                            <strong>{data.clinic_name}</strong> <br />\r\n                            City: {data.city} <br />\r\n                            Identity: {data.clinic_id} <br />\r\n                            Number of Beds: {data.number_of_bed || \"N/A\"} <br />\r\n                            <hr />\r\n                            ICD Name: {data.icd_name} <br />\r\n                            Case Count: {data.icd_cases || \"N/A\"} <br />\r\n                        </Popup>\r\n                    </Marker>\r\n                ))}\r\n\r\n                {/* Show User's Current Location */}\r\n                {userLocation && (\r\n                    <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\r\n                        <Popup>\r\n                            <strong>Your Location</strong> <br />\r\n                            Lat: {userLocation.latitude}, Lng: {userLocation.longitude}\r\n                        </Popup>\r\n                    </Marker>\r\n                )}\r\n\r\n                {/* Draw lines from user to each clinic with different colors */}\r\n                {userLocation && graphData.map((data, index) => (\r\n                    <Polyline \r\n                        key={index} \r\n                        positions={[[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]]} \r\n                        color={lineColors[index % lineColors.length]} // Cycle through colors\r\n                        weight={3} // Line thickness\r\n                    />\r\n                ))}\r\n            </MapContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC3D,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AACxF,OAAO,0BAA0B;AACjC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,CAAC,MAAM,SAAS;AACvB,SAASC,WAAW,QAAQ,mBAAmB;;AAE/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,GAAG,IAAIJ,CAAC,CAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}