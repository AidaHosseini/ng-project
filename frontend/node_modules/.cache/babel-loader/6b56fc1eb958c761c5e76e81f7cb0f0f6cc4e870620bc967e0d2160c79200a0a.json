{"ast":null,"code":"// import React, { useState, useEffect, useMemo } from \"react\";\n// import { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet'\n// import 'leaflet/dist/leaflet.css'\n// import SearchForm from \"./SearchForm\";\n// import L from \"leaflet\";\n// import { useLocation } from \"./LocationContext\";\n\n// // Custom icon for user location\n// const userIcon = new L.Icon({\n//     iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\n//     iconSize: [30, 30],\n//     iconAnchor: [15, 30]\n// });\n\n// // Predefined colors for lines (cycling through these)\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// // Auto-zoom component\n// const AutoZoom = ({ locations }) => {\n//     const map = useMap(); // Access the map instance\n\n//     useEffect(() => {\n//         if (locations.length > 0) {\n//             const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\n//             map.fitBounds(bounds, { padding: [50, 50] }); // Adjust padding for better view\n//         }\n//     }, [locations, map]);\n\n//     return null; // This component only handles map logic\n// };\n// const Map = () => {\n\n//     const [latitude, setlatitude] = useState(0);\n//     const [longitude, setlongitude] = useState(0);\n//     const [graphData, setGraphData] = useState([]);\n//     const [userLocation, setUserLocation] = useState(null);\n//     const [locationChoice, setLocationChoice] = useState(\"\"); // \"my-location\" or \"manual\"\n//     const [manualAddress, setManualAddress] = useState(\"\"); // User's address input\n//     const { setAllLocations } = useLocation();\n\n//     console.log(graphData[0]);\n//     // setlatitude(graphData[0].latitude);\n//     // setlongitude(graphData[0].longitude);\n//     useEffect(() => {\n//         if (graphData.length > 0) {\n//             graphData.forEach((data, index) => {\n//                 console.log(`Position ${index + 1}: Latitude ${data.latitude}, Longitude ${data.longitude}`);\n//                 setlatitude(data.latitude);\n//                 setlongitude(data.longitude);\n//             });\n\n//         }\n//     }, [graphData]);  // Runs when graphData updates\n\n//     const position = [latitude, longitude];\n//     console.log(position);\n\n//    // Get user's current location\n//    const fetchMyLocation = () => {\n//     if (navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(\n//             (position) => {\n//                 setUserLocation({\n//                     latitude: position.coords.latitude,\n//                     longitude: position.coords.longitude\n//                 });\n//             },\n//             (error) => {\n//                 console.error(\"Error getting location:\", error);\n//             }\n//         );\n//     }\n// };\n\n// // Handle location selection\n// const handleLocationChoice = (choice) => {\n//     setLocationChoice(choice);\n//     setUserLocation(null);\n//     setManualAddress(\"\"); // Reset manual input\n//     if (choice === \"my-location\") {\n//         fetchMyLocation();\n//     }\n// };\n\n// // Convert address to latitude & longitude using OpenStreetMap's Nominatim API\n// const handleManualAddressSearch = async () => {\n//     if (!manualAddress.trim()) {\n//         alert(\"Please enter a valid address.\");\n//         return;\n//     }\n\n//     try {\n//         const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n//         const data = await response.json();\n\n//         if (data.length > 0) {\n//             setUserLocation({\n//                 latitude: parseFloat(data[0].lat),\n//                 longitude: parseFloat(data[0].lon)\n//             });\n//         } else {\n//             alert(\"Address not found. Please enter a more precise location.\");\n//         }\n//     } catch (error) {\n//         console.error(\"Error fetching geolocation:\", error);\n//         alert(\"Failed to fetch location. Try again later.\");\n//     }\n// };\n\n//   // ✅ UseMemo prevents re-creating allLocations on every render\n//   const allLocations = useMemo(() => {\n//     const locations = [...graphData];\n//     if (userLocation) {\n//         locations.push({ clinic_name: \"Your Location\", ...userLocation });\n//     }\n//     return locations;\n// }, [graphData, userLocation]); // Recalculates only when these change\n\n// // ✅ useEffect only updates when allLocations changes\n// useEffect(() => {\n//     setAllLocations(allLocations);\n// }, [allLocations, setAllLocations]);\n\n//   return (\n//     <div>\n//       <h1>New Ways of Care Provision and Analysis of Patient Flows</h1>\n//        {/* Location Selection */}\n//        <div>\n//                 <h3>Select Your Location:</h3>\n//                 <button onClick={() => handleLocationChoice(\"my-location\")}>Use My Location</button>\n//                 <button onClick={() => handleLocationChoice(\"manual\")}>Enter Location Manually</button>\n//             </div>\n\n//             {/* Manual Address Input */}\n//             {locationChoice === \"manual\" && (\n//                 <div>\n//                     <input \n//                         type=\"text\" \n//                         placeholder=\"Enter your address\" \n//                         value={manualAddress} \n//                         onChange={(e) => setManualAddress(e.target.value)}\n//                     />\n//                     <button onClick={handleManualAddressSearch}>Search Address</button>\n//                 </div>\n//             )}\n\n//       <SearchForm setGraphData={setGraphData} />\n\n//       <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{height: 500, width: \"60%\"}}>\n//     <TileLayer\n//       attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n//       url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//     />\n//     {/* Auto-Zoom Feature */}\n//     <AutoZoom locations={allLocations} />\n//     {/* <Marker position={position} >\n//       <Popup>\n//         A pretty CSS3 popup. <br /> Easily customizable.\n//       </Popup>\n//     </Marker> */}\n//     {graphData.map((data, index) => (\n//                 <Marker key={index} position={[data.latitude, data.longitude]}>\n//                     <Popup>\n//                         <strong>{data.clinic_name}</strong><br />\n//                         City: {data.city} <br />\n//                         Lat: {data.latitude}, Lng: {data.longitude}\n//                     </Popup>\n//                 </Marker>\n\n//             ))}\n\n//             {/* Show User's Current Location */}\n//             {userLocation && (\n//                     <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\n//                         <Popup>\n//                             <strong>Your Location</strong><br />\n//                             Lat: {userLocation.latitude}, Lng: {userLocation.longitude}\n//                         </Popup>\n//                     </Marker>\n//                 )}\n\n//                   {/* Draw lines from user to each clinic with different colors */}\n//                 {userLocation && graphData.map((data, index) => (\n//                     <Polyline \n//                         key={index} \n//                         positions={[[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]]} \n//                         color={lineColors[index % lineColors.length]} // Cycle through colors\n//                         weight={3} // Line thickness\n//                     />\n//                 ))}\n\n//   </MapContainer>,\n//     </div>\n//   );\n// };\n\n// export default Map;","map":{"version":3,"names":[],"sources":["C:/Users/aidah/ng-project/frontend/src/components/map.js"],"sourcesContent":["// import React, { useState, useEffect, useMemo } from \"react\";\r\n// import { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet'\r\n// import 'leaflet/dist/leaflet.css'\r\n// import SearchForm from \"./SearchForm\";\r\n// import L from \"leaflet\";\r\n// import { useLocation } from \"./LocationContext\";\r\n\r\n\r\n// // Custom icon for user location\r\n// const userIcon = new L.Icon({\r\n//     iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\r\n//     iconSize: [30, 30],\r\n//     iconAnchor: [15, 30]\r\n// });\r\n\r\n\r\n\r\n// // Predefined colors for lines (cycling through these)\r\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// // Auto-zoom component\r\n// const AutoZoom = ({ locations }) => {\r\n//     const map = useMap(); // Access the map instance\r\n\r\n//     useEffect(() => {\r\n//         if (locations.length > 0) {\r\n//             const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\r\n//             map.fitBounds(bounds, { padding: [50, 50] }); // Adjust padding for better view\r\n//         }\r\n//     }, [locations, map]);\r\n\r\n//     return null; // This component only handles map logic\r\n// };\r\n// const Map = () => {\r\n\r\n//     const [latitude, setlatitude] = useState(0);\r\n//     const [longitude, setlongitude] = useState(0);\r\n//     const [graphData, setGraphData] = useState([]);\r\n//     const [userLocation, setUserLocation] = useState(null);\r\n//     const [locationChoice, setLocationChoice] = useState(\"\"); // \"my-location\" or \"manual\"\r\n//     const [manualAddress, setManualAddress] = useState(\"\"); // User's address input\r\n//     const { setAllLocations } = useLocation();\r\n\r\n\r\n//     console.log(graphData[0]);\r\n//     // setlatitude(graphData[0].latitude);\r\n//     // setlongitude(graphData[0].longitude);\r\n//     useEffect(() => {\r\n//         if (graphData.length > 0) {\r\n//             graphData.forEach((data, index) => {\r\n//                 console.log(`Position ${index + 1}: Latitude ${data.latitude}, Longitude ${data.longitude}`);\r\n//                 setlatitude(data.latitude);\r\n//                 setlongitude(data.longitude);\r\n//             });\r\n            \r\n//         }\r\n//     }, [graphData]);  // Runs when graphData updates\r\n    \r\n//     const position = [latitude, longitude];\r\n//     console.log(position);\r\n\r\n//    // Get user's current location\r\n//    const fetchMyLocation = () => {\r\n//     if (navigator.geolocation) {\r\n//         navigator.geolocation.getCurrentPosition(\r\n//             (position) => {\r\n//                 setUserLocation({\r\n//                     latitude: position.coords.latitude,\r\n//                     longitude: position.coords.longitude\r\n//                 });\r\n//             },\r\n//             (error) => {\r\n//                 console.error(\"Error getting location:\", error);\r\n//             }\r\n//         );\r\n//     }\r\n// };\r\n\r\n\r\n// // Handle location selection\r\n// const handleLocationChoice = (choice) => {\r\n//     setLocationChoice(choice);\r\n//     setUserLocation(null);\r\n//     setManualAddress(\"\"); // Reset manual input\r\n//     if (choice === \"my-location\") {\r\n//         fetchMyLocation();\r\n//     }\r\n// };\r\n\r\n// // Convert address to latitude & longitude using OpenStreetMap's Nominatim API\r\n// const handleManualAddressSearch = async () => {\r\n//     if (!manualAddress.trim()) {\r\n//         alert(\"Please enter a valid address.\");\r\n//         return;\r\n//     }\r\n\r\n//     try {\r\n//         const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\r\n//         const data = await response.json();\r\n        \r\n//         if (data.length > 0) {\r\n//             setUserLocation({\r\n//                 latitude: parseFloat(data[0].lat),\r\n//                 longitude: parseFloat(data[0].lon)\r\n//             });\r\n//         } else {\r\n//             alert(\"Address not found. Please enter a more precise location.\");\r\n//         }\r\n//     } catch (error) {\r\n//         console.error(\"Error fetching geolocation:\", error);\r\n//         alert(\"Failed to fetch location. Try again later.\");\r\n//     }\r\n// };\r\n\r\n\r\n//   // ✅ UseMemo prevents re-creating allLocations on every render\r\n//   const allLocations = useMemo(() => {\r\n//     const locations = [...graphData];\r\n//     if (userLocation) {\r\n//         locations.push({ clinic_name: \"Your Location\", ...userLocation });\r\n//     }\r\n//     return locations;\r\n// }, [graphData, userLocation]); // Recalculates only when these change\r\n\r\n// // ✅ useEffect only updates when allLocations changes\r\n// useEffect(() => {\r\n//     setAllLocations(allLocations);\r\n// }, [allLocations, setAllLocations]);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>New Ways of Care Provision and Analysis of Patient Flows</h1>\r\n//        {/* Location Selection */}\r\n//        <div>\r\n//                 <h3>Select Your Location:</h3>\r\n//                 <button onClick={() => handleLocationChoice(\"my-location\")}>Use My Location</button>\r\n//                 <button onClick={() => handleLocationChoice(\"manual\")}>Enter Location Manually</button>\r\n//             </div>\r\n\r\n//             {/* Manual Address Input */}\r\n//             {locationChoice === \"manual\" && (\r\n//                 <div>\r\n//                     <input \r\n//                         type=\"text\" \r\n//                         placeholder=\"Enter your address\" \r\n//                         value={manualAddress} \r\n//                         onChange={(e) => setManualAddress(e.target.value)}\r\n//                     />\r\n//                     <button onClick={handleManualAddressSearch}>Search Address</button>\r\n//                 </div>\r\n//             )}\r\n\r\n\r\n//       <SearchForm setGraphData={setGraphData} />\r\n\r\n//       <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{height: 500, width: \"60%\"}}>\r\n//     <TileLayer\r\n//       attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n//       url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n//     />\r\n//     {/* Auto-Zoom Feature */}\r\n//     <AutoZoom locations={allLocations} />\r\n//     {/* <Marker position={position} >\r\n//       <Popup>\r\n//         A pretty CSS3 popup. <br /> Easily customizable.\r\n//       </Popup>\r\n//     </Marker> */}\r\n//     {graphData.map((data, index) => (\r\n//                 <Marker key={index} position={[data.latitude, data.longitude]}>\r\n//                     <Popup>\r\n//                         <strong>{data.clinic_name}</strong><br />\r\n//                         City: {data.city} <br />\r\n//                         Lat: {data.latitude}, Lng: {data.longitude}\r\n//                     </Popup>\r\n//                 </Marker>\r\n\r\n//             ))}\r\n\r\n//             {/* Show User's Current Location */}\r\n//             {userLocation && (\r\n//                     <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\r\n//                         <Popup>\r\n//                             <strong>Your Location</strong><br />\r\n//                             Lat: {userLocation.latitude}, Lng: {userLocation.longitude}\r\n//                         </Popup>\r\n//                     </Marker>\r\n//                 )}\r\n\r\n//                   {/* Draw lines from user to each clinic with different colors */}\r\n//                 {userLocation && graphData.map((data, index) => (\r\n//                     <Polyline \r\n//                         key={index} \r\n//                         positions={[[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]]} \r\n//                         color={lineColors[index % lineColors.length]} // Cycle through colors\r\n//                         weight={3} // Line thickness\r\n//                     />\r\n//                 ))}\r\n\r\n                \r\n//   </MapContainer>,\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Map;\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}