{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\map.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport SearchForm from \"./SearchForm\";\nimport L from \"leaflet\";\nimport { useLocation } from \"./LocationContext\";\nimport Button from '@mui/material/Button';\n\n// 🎯 Predefined colors for clinics, MVZ, ASV\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// 🟢 Custom icons for different provider types\nconst userIcon = L.icon({\n  iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\n  // Unique user icon\n  iconSize: [35, 35],\n  iconAnchor: [17, 35]\n});\n\n// 🎯 Function to create color-matched clinic icons\nconst getColoredClinicIcon = color => {\n  return L.divIcon({\n    className: \"custom-clinic-marker\",\n    html: `<div style=\"\n            width: 30px; height: 30px; \n            background-color: ${color}; \n            border-radius: 50%; \n            border: 1px solid black;\n            display: flex; justify-content: center; align-items: center;\">\n        </div>`,\n    iconSize: [20, 20],\n    iconAnchor: [15, 20]\n  });\n};\n\n// ✅ AutoZoom component to adjust map bounds dynamically\nconst AutoZoom = ({\n  locations\n}) => {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (locations.length > 0) {\n      const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\n      map.fitBounds(bounds, {\n        padding: [50, 50]\n      }); // Ensure all points are visible\n    }\n  }, [locations, map]);\n  return null; // No UI component, only logic\n};\n_s(AutoZoom, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = AutoZoom;\nconst Map = () => {\n  _s2();\n  const [graphData, setGraphData] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const [locationChoice, setLocationChoice] = useState(\"\");\n  const [manualAddress, setManualAddress] = useState(\"\");\n  const {\n    setAllLocations\n  } = useLocation();\n\n  // 🚀 Get user's current location\n  const fetchMyLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setUserLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      }, error => {\n        console.error(\"Error getting location:\", error);\n      });\n    }\n  };\n\n  // 🎯 Handle location selection\n  const handleLocationChoice = choice => {\n    setLocationChoice(choice);\n    setUserLocation(null);\n    setManualAddress(\"\");\n    if (choice === \"my-location\") {\n      fetchMyLocation();\n    }\n  };\n\n  // 🎯 Convert address to latitude & longitude using OpenStreetMap's Nominatim API\n  const handleManualAddressSearch = async () => {\n    if (!manualAddress.trim()) {\n      alert(\"Please enter a valid address.\");\n      return;\n    }\n    try {\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n      const data = await response.json();\n      if (data.length > 0) {\n        setUserLocation({\n          latitude: parseFloat(data[0].lat),\n          longitude: parseFloat(data[0].lon)\n        });\n      } else {\n        alert(\"Address not found. Please enter a more precise location.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching geolocation:\", error);\n      alert(\"Failed to fetch location. Try again later.\");\n    }\n  };\n\n  // ✅ UseMemo to prevent unnecessary re-renders\n  const allLocations = useMemo(() => {\n    const locations = [...graphData];\n    if (userLocation) {\n      locations.push({\n        clinic_name: \"Your Location\",\n        provider_type: \"User\",\n        ...userLocation\n      });\n    }\n    return locations;\n  }, [graphData, userLocation]);\n\n  // ✅ Update locations when changed\n  useEffect(() => {\n    setAllLocations(allLocations);\n  }, [allLocations, setAllLocations]);\n  return (\n    /*#__PURE__*/\n    // <div style={{ paddingLeft: \"5px\" }}>\n    _jsxDEV(\"div\", {\n      style: {\n        backgroundColor: \"#e3f2fd\",\n        // Light blue background\n        border: \"1px solid #b3e5fc\",\n        borderRadius: \"10px\",\n        padding: \"10px\",\n        marginBottom: \"15px\",\n        boxShadow: \"0px 2px 10px rgba(0,0,0,0.1)\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"W\\xE4hlen Sie Ihren Standort:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"10px\",\n          marginBottom: \"10px\",\n          paddingLeft: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => handleLocationChoice(\"my-location\"),\n          children: \"Meinen Standort verwenden\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => handleLocationChoice(\"manual\"),\n          children: \"Standort manuell eingeben\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), locationChoice === \"manual\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          paddingLeft: \"10px\",\n          marginBottom: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Geben Sie Ihre Adresse ein\",\n          value: manualAddress,\n          onChange: e => setManualAddress(e.target.value),\n          style: {\n            padding: \"8px\",\n            width: \"250px\",\n            border: \"1px solid #ccc\",\n            borderRadius: \"5px\",\n            marginRight: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleManualAddressSearch,\n          style: {\n            padding: \"8px 12px\",\n            borderRadius: \"5px\",\n            backgroundColor: \"#007BFF\",\n            /* Primary blue */\n            color: \"white\",\n            border: \"none\",\n            cursor: \"pointer\",\n            fontSize: \"14px\",\n            fontWeight: \"bold\",\n            transition: \"background-color 0.3s\",\n            boxShadow: \"0px 2px 5px rgba(0, 0, 0, 0.2)\"\n          },\n          onMouseOver: e => e.target.style.backgroundColor = \"#0056b3\" /* Hover effect */,\n          onMouseOut: e => e.target.style.backgroundColor = \"#007BFF\",\n          children: \"Search Address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n        setGraphData: setGraphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n        center: [50.851, 8.015],\n        zoom: 8,\n        scrollWheelZoom: false,\n        style: {\n          height: 500,\n          width: \"60%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(AutoZoom, {\n          locations: allLocations\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 17\n        }, this), allLocations.length > 0 ? /*#__PURE__*/_jsxDEV(AutoZoom, {\n          locations: allLocations\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\",\n            fontSize: \"18px\",\n            color: \"red\",\n            marginTop: \"20px\"\n          },\n          children: \"\\u274C No locations found. Try a different search.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this), userLocation && /*#__PURE__*/_jsxDEV(Marker, {\n          position: [userLocation.latitude, userLocation.longitude],\n          icon: userIcon,\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Your Location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 32\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this), graphData.map((data, index) => {\n          const color = lineColors[index % lineColors.length]; // Match line & marker color\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            position: [data.latitude, data.longitude],\n            icon: getColoredClinicIcon(color),\n            children: /*#__PURE__*/_jsxDEV(Popup, {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: data.clinic_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 68\n              }, this), \"City: \", data.city, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 51\n              }, this), \"Beds: \", data.number_of_beds, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 61\n              }, this), \"Address: \", data.address || \"N/A\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 29\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }, this);\n        }), userLocation && graphData.map((data, index) => {\n          const color = lineColors[index % lineColors.length]; // Match line color\n          return /*#__PURE__*/_jsxDEV(Polyline, {\n            positions: [[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]],\n            color: color,\n            weight: 2\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 25\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this)\n  );\n};\n_s2(Map, \"E7gzXfXTChBO3X0gT1LDrvT0IDA=\", false, function () {\n  return [useLocation];\n});\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"AutoZoom\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","MapContainer","TileLayer","useMap","Marker","Popup","Polyline","SearchForm","L","useLocation","Button","jsxDEV","_jsxDEV","lineColors","userIcon","icon","iconUrl","iconSize","iconAnchor","getColoredClinicIcon","color","divIcon","className","html","AutoZoom","locations","_s","map","length","bounds","latLngBounds","loc","latitude","longitude","fitBounds","padding","_c","Map","_s2","graphData","setGraphData","userLocation","setUserLocation","locationChoice","setLocationChoice","manualAddress","setManualAddress","setAllLocations","fetchMyLocation","navigator","geolocation","getCurrentPosition","position","coords","error","console","handleLocationChoice","choice","handleManualAddressSearch","trim","alert","response","fetch","encodeURIComponent","data","json","parseFloat","lat","lon","allLocations","push","clinic_name","provider_type","style","backgroundColor","border","borderRadius","marginBottom","boxShadow","children","fileName","_jsxFileName","lineNumber","columnNumber","display","gap","paddingLeft","variant","onClick","type","placeholder","value","onChange","e","target","width","marginRight","cursor","fontSize","fontWeight","transition","onMouseOver","onMouseOut","center","zoom","scrollWheelZoom","height","attribution","url","textAlign","marginTop","index","city","number_of_beds","address","positions","weight","_c2","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/map.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport SearchForm from \"./SearchForm\";\r\nimport L from \"leaflet\";\r\nimport { useLocation } from \"./LocationContext\";\r\nimport Button from '@mui/material/Button';\r\n\r\n\r\n\r\n\r\n// 🎯 Predefined colors for clinics, MVZ, ASV\r\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// 🟢 Custom icons for different provider types\r\nconst userIcon = L.icon({\r\n    iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\", // Unique user icon\r\n    iconSize: [35, 35],\r\n    iconAnchor: [17, 35]\r\n});\r\n\r\n// 🎯 Function to create color-matched clinic icons\r\nconst getColoredClinicIcon = (color) => {\r\n    return L.divIcon({\r\n        className: \"custom-clinic-marker\",\r\n        html: `<div style=\"\r\n            width: 30px; height: 30px; \r\n            background-color: ${color}; \r\n            border-radius: 50%; \r\n            border: 1px solid black;\r\n            display: flex; justify-content: center; align-items: center;\">\r\n        </div>`,\r\n        iconSize: [20, 20],\r\n        iconAnchor: [15, 20]\r\n    });\r\n};\r\n\r\n// ✅ AutoZoom component to adjust map bounds dynamically\r\nconst AutoZoom = ({ locations }) => {\r\n    const map = useMap();\r\n\r\n    useEffect(() => {\r\n        if (locations.length > 0) {\r\n            const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\r\n            map.fitBounds(bounds, { padding: [50, 50] }); // Ensure all points are visible\r\n        }\r\n    }, [locations, map]);\r\n\r\n    return null; // No UI component, only logic\r\n};\r\n\r\nconst Map = () => {\r\n    const [graphData, setGraphData] = useState([]);\r\n    const [userLocation, setUserLocation] = useState(null);\r\n    const [locationChoice, setLocationChoice] = useState(\"\"); \r\n    const [manualAddress, setManualAddress] = useState(\"\"); \r\n    const { setAllLocations } = useLocation();\r\n\r\n    // 🚀 Get user's current location\r\n    const fetchMyLocation = () => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    setUserLocation({\r\n                        latitude: position.coords.latitude,\r\n                        longitude: position.coords.longitude\r\n                    });\r\n                },\r\n                (error) => {\r\n                    console.error(\"Error getting location:\", error);\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    // 🎯 Handle location selection\r\n    const handleLocationChoice = (choice) => {\r\n        setLocationChoice(choice);\r\n        setUserLocation(null);\r\n        setManualAddress(\"\"); \r\n        if (choice === \"my-location\") {\r\n            fetchMyLocation();\r\n        }\r\n    };\r\n\r\n    // 🎯 Convert address to latitude & longitude using OpenStreetMap's Nominatim API\r\n    const handleManualAddressSearch = async () => {\r\n        if (!manualAddress.trim()) {\r\n            alert(\"Please enter a valid address.\");\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\r\n            const data = await response.json();\r\n            if (data.length > 0) {\r\n                setUserLocation({\r\n                    latitude: parseFloat(data[0].lat),\r\n                    longitude: parseFloat(data[0].lon)\r\n                });\r\n            } else {\r\n                alert(\"Address not found. Please enter a more precise location.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching geolocation:\", error);\r\n            alert(\"Failed to fetch location. Try again later.\");\r\n        }\r\n    };\r\n\r\n    // ✅ UseMemo to prevent unnecessary re-renders\r\n    const allLocations = useMemo(() => {\r\n        const locations = [...graphData];\r\n        if (userLocation) {\r\n            locations.push({ clinic_name: \"Your Location\", provider_type: \"User\", ...userLocation });\r\n        }\r\n        return locations;\r\n    }, [graphData, userLocation]);\r\n\r\n    // ✅ Update locations when changed\r\n    useEffect(() => {\r\n        setAllLocations(allLocations);\r\n    }, [allLocations, setAllLocations]);\r\n\r\n    return (\r\n         \r\n        // <div style={{ paddingLeft: \"5px\" }}>\r\n        <div style={{\r\n            backgroundColor: \"#e3f2fd\", // Light blue background\r\n            border: \"1px solid #b3e5fc\",\r\n            borderRadius: \"10px\",\r\n            padding: \"10px\",\r\n            marginBottom: \"15px\",\r\n            boxShadow: \"0px 2px 10px rgba(0,0,0,0.1)\"\r\n        }}>\r\n        <h3>Wählen Sie Ihren Standort:</h3>\r\n        <div style={{ display: \"flex\", gap: \"10px\", marginBottom: \"10px\", paddingLeft: \"10px\" }}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"my-location\")}>Meinen Standort verwenden</Button>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => handleLocationChoice(\"manual\")}>Standort manuell eingeben</Button>\r\n        </div>\r\n\r\n            {locationChoice === \"manual\" && (\r\n                <div style={{ paddingLeft: \"10px\",marginBottom: \"10px\" }}>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Geben Sie Ihre Adresse ein\" \r\n                        value={manualAddress} \r\n                        onChange={(e) => setManualAddress(e.target.value)}\r\n                        style={{ padding: \"8px\", width: \"250px\", border: \"1px solid #ccc\", borderRadius: \"5px\", marginRight: \"10px\" }} \r\n                    />\r\n                    {/* <button onClick={handleManualAddressSearch}>Search Address</button> */}\r\n                            \r\n                    {/* ✅ Styled \"Search Address\" Button */}\r\n                    <button \r\n                        onClick={handleManualAddressSearch} \r\n                        style={{\r\n                            padding: \"8px 12px\",\r\n                            borderRadius: \"5px\",\r\n                            backgroundColor: \"#007BFF\", /* Primary blue */\r\n                            color: \"white\",\r\n                            border: \"none\",\r\n                            cursor: \"pointer\",\r\n                            fontSize: \"14px\",\r\n                            fontWeight: \"bold\",\r\n                            transition: \"background-color 0.3s\",\r\n                            boxShadow: \"0px 2px 5px rgba(0, 0, 0, 0.2)\"\r\n                        }}\r\n                        onMouseOver={(e) => e.target.style.backgroundColor = \"#0056b3\"} /* Hover effect */\r\n                        onMouseOut={(e) => e.target.style.backgroundColor = \"#007BFF\"} \r\n                    >\r\n                        Search Address\r\n                    </button>\r\n                </div>\r\n            )}\r\n\r\n            <SearchForm setGraphData={setGraphData} />\r\n\r\n            <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{ height: 500, width: \"60%\" }}>\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n\r\n                {/* AutoZoom Component to adjust map bounds dynamically */}\r\n                \r\n                <AutoZoom locations={allLocations} />\r\n                {allLocations.length > 0 ? (\r\n                    <AutoZoom locations={allLocations} />\r\n                ) : (\r\n                    <div style={{ textAlign: \"center\", fontSize: \"18px\", color: \"red\", marginTop: \"20px\" }}>\r\n                        ❌ No locations found. Try a different search.\r\n                    </div>\r\n                )}\r\n                {/* 🎯 Draw user location marker */}\r\n                {userLocation &&  (\r\n                    <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\r\n                        <Popup><strong>Your Location</strong></Popup>\r\n                    </Marker>\r\n                )}\r\n\r\n                {/* 🎯 Draw clinic markers with color-matched icons */}\r\n                {graphData.map((data, index) => {\r\n                    const color = lineColors[index % lineColors.length]; // Match line & marker color\r\n                    return (\r\n                        <Marker key={index} position={[data.latitude, data.longitude]} icon={getColoredClinicIcon(color)}>\r\n                            <Popup>\r\n                                <strong>{data.clinic_name}</strong><br />\r\n                                City: {data.city} <br />\r\n                                Beds: {data.number_of_beds} <br />\r\n                                Address: {data.address || \"N/A\"}\r\n                            </Popup>\r\n                        </Marker>\r\n                    );\r\n                })}\r\n\r\n                {/* 🎯 Draw lines from user location to each clinic */}\r\n                {userLocation && graphData.map((data, index) => {\r\n                    const color = lineColors[index % lineColors.length]; // Match line color\r\n                    return (\r\n                        <Polyline \r\n                            key={index} \r\n                            positions={[\r\n                                [userLocation.latitude, userLocation.longitude], \r\n                                [data.latitude, data.longitude]\r\n                            ]} \r\n                            color={color} \r\n                            weight={2} \r\n                        />\r\n                    );\r\n                })}\r\n            </MapContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}