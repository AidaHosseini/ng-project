{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\map.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport SearchForm from \"./SearchForm\";\nimport L from \"leaflet\";\n\n// Custom icon for user location\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst userIcon = new L.Icon({\n  iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\n  iconSize: [30, 30],\n  iconAnchor: [15, 30]\n});\n\n// Haversine formula to calculate distance in kilometers\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // Radius of the Earth in km\n  const dLat = (lat2 - lat1) * (Math.PI / 180);\n  const dLon = (lon2 - lon1) * (Math.PI / 180);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return (R * c).toFixed(2); // Return distance rounded to 2 decimal places\n};\n\n// Predefined colors for lines (cycling through these)\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// Auto-zoom component\nconst AutoZoom = ({\n  locations\n}) => {\n  _s();\n  const map = useMap(); // Access the map instance\n\n  useEffect(() => {\n    if (locations.length > 0) {\n      const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\n      map.fitBounds(bounds, {\n        padding: [50, 50]\n      }); // Adjust padding for better view\n    }\n  }, [locations, map]);\n  return null; // This component only handles map logic\n};\n_s(AutoZoom, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = AutoZoom;\nconst Map = () => {\n  _s2();\n  const [latitude, setlatitude] = useState(0);\n  const [longitude, setlongitude] = useState(0);\n  const [graphData, setGraphData] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const [locationChoice, setLocationChoice] = useState(\"\"); // \"my-location\" or \"manual\"\n  const [manualAddress, setManualAddress] = useState(\"\"); // User's address input\n\n  console.log(graphData[0]);\n  // setlatitude(graphData[0].latitude);\n  // setlongitude(graphData[0].longitude);\n  useEffect(() => {\n    if (graphData.length > 0) {\n      graphData.forEach((data, index) => {\n        console.log(`Position ${index + 1}: Latitude ${data.latitude}, Longitude ${data.longitude}`);\n        setlatitude(data.latitude);\n        setlongitude(data.longitude);\n      });\n    }\n  }, [graphData]); // Runs when graphData updates\n\n  const position = [latitude, longitude];\n  console.log(position);\n\n  // Get user's current location\n  const fetchMyLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setUserLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      }, error => {\n        console.error(\"Error getting location:\", error);\n      });\n    }\n  };\n\n  // Handle location selection\n  const handleLocationChoice = choice => {\n    setLocationChoice(choice);\n    setUserLocation(null);\n    setManualAddress(\"\"); // Reset manual input\n    if (choice === \"my-location\") {\n      fetchMyLocation();\n    }\n  };\n\n  // Convert address to latitude & longitude using OpenStreetMap's Nominatim API\n  const handleManualAddressSearch = async () => {\n    if (!manualAddress.trim()) {\n      alert(\"Please enter a valid address.\");\n      return;\n    }\n    try {\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\n      const data = await response.json();\n      if (data.length > 0) {\n        setUserLocation({\n          latitude: parseFloat(data[0].lat),\n          longitude: parseFloat(data[0].lon)\n        });\n      } else {\n        alert(\"Address not found. Please enter a more precise location.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching geolocation:\", error);\n      alert(\"Failed to fetch location. Try again later.\");\n    }\n  };\n\n  // Combine user location with other markers\n  const allLocations = [...graphData];\n  if (userLocation) {\n    allLocations.push({\n      clinic_name: \"Your Location\",\n      ...userLocation\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Healthcare Data Visualization with GraphXR\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Your Location:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleLocationChoice(\"my-location\"),\n        children: \"Use My Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleLocationChoice(\"manual\"),\n        children: \"Enter Location Manually\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 8\n    }, this), locationChoice === \"manual\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your address\",\n        value: manualAddress,\n        onChange: e => setManualAddress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleManualAddressSearch,\n        children: \"Search Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      setGraphData: setGraphData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [50.851, 8.015],\n      zoom: 8,\n      scrollWheelZoom: false,\n      style: {\n        height: 900\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(AutoZoom, {\n        locations: allLocations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 5\n      }, this), graphData.map((data, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: [data.latitude, data.longitude],\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: data.clinic_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 60\n          }, this), \"City: \", data.city, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 43\n          }, this), \"Lat: \", data.latitude, \", Lng: \", data.longitude]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)), userLocation && /*#__PURE__*/_jsxDEV(Marker, {\n        position: [userLocation.latitude, userLocation.longitude],\n        icon: userIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Your Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 59\n          }, this), \"Lat: \", userLocation.latitude, \", Lng: \", userLocation.longitude]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }, this), userLocation && graphData.map((data, index) => /*#__PURE__*/_jsxDEV(Polyline, {\n        positions: [[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]],\n        color: lineColors[index % lineColors.length] // Cycle through colors\n        ,\n        weight: 3 // Line thickness\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }, this)), userLocation && graphData.map((data, index) => {\n        const distance = calculateDistance(userLocation.latitude, userLocation.longitude, data.latitude, data.longitude);\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Polyline, {\n            positions: [[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]],\n            color: lineColors[index % lineColors.length],\n            weight: 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Marker, {\n            position: [(userLocation.latitude + data.latitude) / 2, (userLocation.longitude + data.longitude) / 2],\n            children: /*#__PURE__*/_jsxDEV(Popup, {\n              children: [\"Distance: \", distance, \" km\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), \",\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s2(Map, \"+KMW6EZtjQfSP8X+vtj7xn9H1w8=\");\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"AutoZoom\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","useMap","Marker","Popup","Polyline","SearchForm","L","jsxDEV","_jsxDEV","userIcon","Icon","iconUrl","iconSize","iconAnchor","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","toFixed","lineColors","AutoZoom","locations","_s","map","length","bounds","latLngBounds","loc","latitude","longitude","fitBounds","padding","_c","Map","_s2","setlatitude","setlongitude","graphData","setGraphData","userLocation","setUserLocation","locationChoice","setLocationChoice","manualAddress","setManualAddress","console","log","forEach","data","index","position","fetchMyLocation","navigator","geolocation","getCurrentPosition","coords","error","handleLocationChoice","choice","handleManualAddressSearch","trim","alert","response","fetch","encodeURIComponent","json","parseFloat","lat","lon","allLocations","push","clinic_name","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","e","target","center","zoom","scrollWheelZoom","style","height","attribution","url","city","icon","positions","color","weight","distance","Fragment","_c2","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/map.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Polyline } from 'react-leaflet'\r\nimport 'leaflet/dist/leaflet.css'\r\nimport SearchForm from \"./SearchForm\";\r\nimport L from \"leaflet\";\r\n\r\n\r\n// Custom icon for user location\r\nconst userIcon = new L.Icon({\r\n    iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\",\r\n    iconSize: [30, 30],\r\n    iconAnchor: [15, 30]\r\n});\r\n\r\n// Haversine formula to calculate distance in kilometers\r\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n    const R = 6371; // Radius of the Earth in km\r\n    const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n    const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n    const a =\r\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\r\n        Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return (R * c).toFixed(2); // Return distance rounded to 2 decimal places\r\n};\r\n\r\n\r\n// Predefined colors for lines (cycling through these)\r\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// Auto-zoom component\r\nconst AutoZoom = ({ locations }) => {\r\n    const map = useMap(); // Access the map instance\r\n\r\n    useEffect(() => {\r\n        if (locations.length > 0) {\r\n            const bounds = L.latLngBounds(locations.map(loc => [loc.latitude, loc.longitude]));\r\n            map.fitBounds(bounds, { padding: [50, 50] }); // Adjust padding for better view\r\n        }\r\n    }, [locations, map]);\r\n\r\n    return null; // This component only handles map logic\r\n};\r\nconst Map = () => {\r\n\r\n    const [latitude, setlatitude] = useState(0);\r\n    const [longitude, setlongitude] = useState(0);\r\n    const [graphData, setGraphData] = useState([]);\r\n    const [userLocation, setUserLocation] = useState(null);\r\n    const [locationChoice, setLocationChoice] = useState(\"\"); // \"my-location\" or \"manual\"\r\n    const [manualAddress, setManualAddress] = useState(\"\"); // User's address input\r\n\r\n\r\n    console.log(graphData[0]);\r\n    // setlatitude(graphData[0].latitude);\r\n    // setlongitude(graphData[0].longitude);\r\n    useEffect(() => {\r\n        if (graphData.length > 0) {\r\n            graphData.forEach((data, index) => {\r\n                console.log(`Position ${index + 1}: Latitude ${data.latitude}, Longitude ${data.longitude}`);\r\n                setlatitude(data.latitude);\r\n                setlongitude(data.longitude);\r\n            });\r\n            \r\n        }\r\n    }, [graphData]);  // Runs when graphData updates\r\n    \r\n    const position = [latitude, longitude];\r\n    console.log(position);\r\n\r\n   // Get user's current location\r\n   const fetchMyLocation = () => {\r\n    if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n            (position) => {\r\n                setUserLocation({\r\n                    latitude: position.coords.latitude,\r\n                    longitude: position.coords.longitude\r\n                });\r\n            },\r\n            (error) => {\r\n                console.error(\"Error getting location:\", error);\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\n\r\n// Handle location selection\r\nconst handleLocationChoice = (choice) => {\r\n    setLocationChoice(choice);\r\n    setUserLocation(null);\r\n    setManualAddress(\"\"); // Reset manual input\r\n    if (choice === \"my-location\") {\r\n        fetchMyLocation();\r\n    }\r\n};\r\n\r\n// Convert address to latitude & longitude using OpenStreetMap's Nominatim API\r\nconst handleManualAddressSearch = async () => {\r\n    if (!manualAddress.trim()) {\r\n        alert(\"Please enter a valid address.\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(manualAddress)}`);\r\n        const data = await response.json();\r\n        \r\n        if (data.length > 0) {\r\n            setUserLocation({\r\n                latitude: parseFloat(data[0].lat),\r\n                longitude: parseFloat(data[0].lon)\r\n            });\r\n        } else {\r\n            alert(\"Address not found. Please enter a more precise location.\");\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error fetching geolocation:\", error);\r\n        alert(\"Failed to fetch location. Try again later.\");\r\n    }\r\n};\r\n\r\n\r\n  // Combine user location with other markers\r\n  const allLocations = [...graphData];\r\n  if (userLocation) {\r\n      allLocations.push({ clinic_name: \"Your Location\", ...userLocation });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Healthcare Data Visualization with GraphXR</h1>\r\n       {/* Location Selection */}\r\n       <div>\r\n                <h3>Select Your Location:</h3>\r\n                <button onClick={() => handleLocationChoice(\"my-location\")}>Use My Location</button>\r\n                <button onClick={() => handleLocationChoice(\"manual\")}>Enter Location Manually</button>\r\n            </div>\r\n\r\n            {/* Manual Address Input */}\r\n            {locationChoice === \"manual\" && (\r\n                <div>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Enter your address\" \r\n                        value={manualAddress} \r\n                        onChange={(e) => setManualAddress(e.target.value)}\r\n                    />\r\n                    <button onClick={handleManualAddressSearch}>Search Address</button>\r\n                </div>\r\n            )}\r\n\r\n\r\n      <SearchForm setGraphData={setGraphData} />\r\n\r\n      <MapContainer center={[50.851, 8.015]} zoom={8} scrollWheelZoom={false} style={{height: 900}}>\r\n    <TileLayer\r\n      attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n    />\r\n    {/* Auto-Zoom Feature */}\r\n    <AutoZoom locations={allLocations} />\r\n    {/* <Marker position={position} >\r\n      <Popup>\r\n        A pretty CSS3 popup. <br /> Easily customizable.\r\n      </Popup>\r\n    </Marker> */}\r\n    {graphData.map((data, index) => (\r\n                <Marker key={index} position={[data.latitude, data.longitude]}>\r\n                    <Popup>\r\n                        <strong>{data.clinic_name}</strong><br />\r\n                        City: {data.city} <br />\r\n                        Lat: {data.latitude}, Lng: {data.longitude}\r\n                    </Popup>\r\n                </Marker>\r\n\r\n            ))}\r\n\r\n            {/* Show User's Current Location */}\r\n            {userLocation && (\r\n                    <Marker position={[userLocation.latitude, userLocation.longitude]} icon={userIcon}>\r\n                        <Popup>\r\n                            <strong>Your Location</strong><br />\r\n                            Lat: {userLocation.latitude}, Lng: {userLocation.longitude}\r\n                        </Popup>\r\n                    </Marker>\r\n                )}\r\n\r\n                  {/* Draw lines from user to each clinic with different colors */}\r\n                {userLocation && graphData.map((data, index) => (\r\n                    <Polyline \r\n                        key={index} \r\n                        positions={[[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]]} \r\n                        color={lineColors[index % lineColors.length]} // Cycle through colors\r\n                        weight={3} // Line thickness\r\n                    />\r\n                ))}\r\n\r\n                {/* Draw lines & show distance */}\r\n                {userLocation && graphData.map((data, index) => {\r\n                    const distance = calculateDistance(userLocation.latitude, userLocation.longitude, data.latitude, data.longitude);\r\n                    return (\r\n                        <React.Fragment key={index}>\r\n                            <Polyline \r\n                                positions={[[userLocation.latitude, userLocation.longitude], [data.latitude, data.longitude]]} \r\n                                color={lineColors[index % lineColors.length]} \r\n                                weight={3}\r\n                            />\r\n                            <Marker position={[(userLocation.latitude + data.latitude) / 2, (userLocation.longitude + data.longitude) / 2]}>\r\n                                <Popup>\r\n                                    Distance: {distance} km\r\n                                </Popup>\r\n                            </Marker>\r\n                        </React.Fragment>\r\n                    );\r\n                })}\r\n  </MapContainer>,\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}