{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\Analystics.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"./LocationContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getAttribute = async (ID = []) => {\n  try {\n    console.log(`🔵 Sending request to: http://127.0.0.1:5000/search?city=${city}&icd_code=${icdCode}`);\n    const response = await axios.get(\"http://127.0.0.1:5000/search\", {\n      params: {\n        ID: ID\n      }\n    });\n    console.log(\"✅ API Response Received:\", response.data);\n    // setGraphData(response.data);\n  } catch (error) {\n    console.error(\"❌ API Error:\", error);\n  }\n};\n\n// Function to get road distance from OSRM API\nconst getRoadDistance = async (lat1, lon1, lat2, lon2) => {\n  const url = `https://router.project-osrm.org/route/v1/driving/${lon1},${lat1};${lon2},${lat2}?overview=false`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    if (data.routes && data.routes.length > 0) {\n      const distanceInKm = (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\n      return distanceInKm;\n    } else {\n      return \"N/A\";\n    }\n  } catch (error) {\n    console.error(\"Error fetching road distance:\", error);\n    return \"N/A\";\n  }\n};\nconst Analystics = () => {\n  _s();\n  const {\n    allLocations\n  } = useLocation();\n  const [distances, setDistances] = useState({});\n  const [attr, setattr] = useState({});\n\n  // Find the user's location (if available)\n  const userLocation = allLocations.find(loc => loc.clinic_name === \"Your Location\");\n  useEffect(() => {\n    // Fetch the attribute data for all clinics\n    if (allLocations.length > 0) {\n      const IDs = allLocations.map(loc => loc.clinic_id);\n      setattr(getAttribute(IDs));\n      console.log(\"�� Attribute Data Received:\", attr);\n    }\n  }, [allLocations]);\n\n  // Fetch the distance between the user's location and all other clinics\n  useEffect(() => {\n    const fetchDistances = async () => {\n      if (!userLocation) return;\n      const newDistances = {};\n      for (const location of allLocations) {\n        if (location.clinic_name === \"Your Location\") continue;\n        const roadDistance = await getRoadDistance(userLocation.latitude, userLocation.longitude, location.latitude, location.longitude);\n        newDistances[location.clinic_name] = roadDistance;\n      }\n      setDistances(newDistances);\n    };\n    fetchDistances();\n  }, [userLocation, allLocations]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Analystic Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }, this), allLocations.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: allLocations.map((location, index) => {\n        if (location.clinic_name === \"Your Location\") return null;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [location.clinic_name, \" - Latitude: \", location.latitude, \", Longitude: \", location.longitude, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 31\n          }, this), \"Road Distance: \", distances[location.clinic_name] || \"Calculating...\", \" km\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 27\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 7\n  }, this);\n};\n_s(Analystics, \"A6nJejM6hg2oPKckfpvQV8D9Mv4=\", false, function () {\n  return [useLocation];\n});\n_c = Analystics;\nexport default Analystics;\nvar _c;\n$RefreshReg$(_c, \"Analystics\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","jsxDEV","_jsxDEV","getAttribute","ID","console","log","city","icdCode","response","axios","get","params","data","error","getRoadDistance","lat1","lon1","lat2","lon2","url","fetch","json","routes","length","distanceInKm","distance","toFixed","Analystics","_s","allLocations","distances","setDistances","attr","setattr","userLocation","find","loc","clinic_name","IDs","map","clinic_id","fetchDistances","newDistances","location","roadDistance","latitude","longitude","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/Analystics.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"./LocationContext\";\r\n\r\n\r\nconst getAttribute = async (ID=[]) => { \r\n\r\n  try {\r\n    console.log(`🔵 Sending request to: http://127.0.0.1:5000/search?city=${city}&icd_code=${icdCode}`);\r\n    \r\n    const response = await axios.get(\"http://127.0.0.1:5000/search\", {\r\n        params: { ID: ID},\r\n    });\r\n\r\n    console.log(\"✅ API Response Received:\", response.data);\r\n    // setGraphData(response.data);\r\n} catch (error) {\r\n    console.error(\"❌ API Error:\", error);\r\n}\r\n\r\n};\r\n\r\n// Function to get road distance from OSRM API\r\nconst getRoadDistance = async (lat1, lon1, lat2, lon2) => {\r\n  const url = `https://router.project-osrm.org/route/v1/driving/${lon1},${lat1};${lon2},${lat2}?overview=false`;\r\n  \r\n  try {\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      if (data.routes && data.routes.length > 0) {\r\n          const distanceInKm = (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\r\n          return distanceInKm;\r\n      } else {\r\n          return \"N/A\";\r\n      }\r\n  } catch (error) {\r\n      console.error(\"Error fetching road distance:\", error);\r\n      return \"N/A\";\r\n  }\r\n};\r\n\r\nconst Analystics = () => {\r\n  const { allLocations } = useLocation();\r\n  const [distances, setDistances] = useState({});\r\n  const [attr, setattr] = useState({});\r\n\r\n  // Find the user's location (if available)\r\n  const userLocation = allLocations.find(loc => loc.clinic_name === \"Your Location\");\r\n\r\n  useEffect(() => {\r\n    // Fetch the attribute data for all clinics\r\n    if (allLocations.length > 0) {\r\n        const IDs = allLocations.map(loc => loc.clinic_id);\r\n       setattr (getAttribute(IDs));\r\n        console.log(\"�� Attribute Data Received:\", attr);\r\n\r\n    }\r\n\r\n  }, [allLocations]);\r\n\r\n  // Fetch the distance between the user's location and all other clinics\r\n  useEffect(() => {\r\n      const fetchDistances = async () => {\r\n          if (!userLocation) return;\r\n\r\n          const newDistances = {};\r\n          for (const location of allLocations) {\r\n              if (location.clinic_name === \"Your Location\") continue;\r\n\r\n              const roadDistance = await getRoadDistance(\r\n                  userLocation.latitude, userLocation.longitude,\r\n                  location.latitude, location.longitude\r\n              );\r\n\r\n              newDistances[location.clinic_name] = roadDistance;\r\n          }\r\n\r\n          setDistances(newDistances);\r\n      };\r\n\r\n      fetchDistances();\r\n  }, [userLocation, allLocations]);\r\n\r\n  return (\r\n      <div>\r\n          <h3>Analystic Data</h3>\r\n          {allLocations.length > 0 ? (\r\n              <ul>\r\n                  {allLocations.map((location, index) => {\r\n                      if (location.clinic_name === \"Your Location\") return null;\r\n\r\n                      return (\r\n                          <li key={index}>\r\n                              {location.clinic_name} - Latitude: {location.latitude}, Longitude: {location.longitude}\r\n                              <br />\r\n                              Road Distance: {distances[location.clinic_name] || \"Calculating...\"} km\r\n                          </li>\r\n                      );\r\n                  })}\r\n              </ul>\r\n          ) : (\r\n              <p>No data available.</p>\r\n          )}\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Analystics;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}