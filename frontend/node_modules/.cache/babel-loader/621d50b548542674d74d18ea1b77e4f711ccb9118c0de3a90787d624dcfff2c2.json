{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\Analystics.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useLocation } from \"./LocationContext\";\n\n// Haversine formula to calculate distance in kilometers\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // Radius of the Earth in km\n  const dLat = (lat2 - lat1) * (Math.PI / 180);\n  const dLon = (lon2 - lon1) * (Math.PI / 180);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return (R * c).toFixed(2); // Return distance rounded to 2 decimal places\n};\nconst Analystics = () => {\n  _s();\n  const {\n    allLocations\n  } = useLocation();\n\n  // Find the user's location (if available)\n  const userLocation = allLocations.find(loc => loc.clinic_name === \"Your Location\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Analystic Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), allLocations.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: allLocations.map((location, index) => {\n        // Skip distance calculation for the user’s own location\n        if (location.clinic_name === \"Your Location\") return null;\n        const distance = userLocation ? calculateDistance(userLocation.latitude, userLocation.longitude, location.latitude, location.longitude) : \"N/A\";\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [location.clinic_name, \" - Latitude: \", location.latitude, \", Longitude: \", location.longitude, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 33\n          }, this), \"Distance: \", distance, \" km\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_s(Analystics, \"OJ7mJamXScecnlMMYxes93IjX+I=\", false, function () {\n  return [useLocation];\n});\n_c = Analystics;\nexport default Analystics;\nvar _c;\n$RefreshReg$(_c, \"Analystics\");","map":{"version":3,"names":["React","useLocation","jsxDEV","_jsxDEV","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","toFixed","Analystics","_s","allLocations","userLocation","find","loc","clinic_name","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","location","index","distance","latitude","longitude","_c","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/Analystics.js"],"sourcesContent":["import React from \"react\";\r\nimport { useLocation } from \"./LocationContext\";\r\n\r\n// Haversine formula to calculate distance in kilometers\r\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n    const R = 6371; // Radius of the Earth in km\r\n    const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n    const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n    const a =\r\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\r\n        Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return (R * c).toFixed(2); // Return distance rounded to 2 decimal places\r\n};\r\n\r\nconst Analystics = () => {\r\n    const { allLocations } = useLocation();\r\n\r\n    // Find the user's location (if available)\r\n    const userLocation = allLocations.find(loc => loc.clinic_name === \"Your Location\");\r\n\r\n    return (\r\n        <div>\r\n            <h3>Analystic Data</h3>\r\n            {allLocations.length > 0 ? (\r\n                <ul>\r\n                    {allLocations.map((location, index) => {\r\n                        // Skip distance calculation for the user’s own location\r\n                        if (location.clinic_name === \"Your Location\") return null;\r\n\r\n                        const distance = userLocation\r\n                            ? calculateDistance(userLocation.latitude, userLocation.longitude, location.latitude, location.longitude)\r\n                            : \"N/A\";\r\n\r\n                        return (\r\n                            <li key={index}>\r\n                                {location.clinic_name} - Latitude: {location.latitude}, Longitude: {location.longitude}\r\n                                <br />\r\n                                Distance: {distance} km\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            ) : (\r\n                <p>No data available.</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Analystics;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}