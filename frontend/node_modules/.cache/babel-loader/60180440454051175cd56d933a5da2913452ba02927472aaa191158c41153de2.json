{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidah\\\\ng-project\\\\frontend\\\\src\\\\components\\\\Analystics.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"./LocationContext\";\n\n// // Function to get road distance from OSRM API\n// const getRoadDistance = async (startLat, startLon, endLat, endLon) => {\n//     const url = `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`;\n\n//     try {\n//         const response = await fetch(url);\n//         const data = await response.json();\n//         if (data.routes && data.routes.length > 0) {\n//             return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\n//         } else {\n//             return \"N/A\";\n//         }\n//     } catch (error) {\n//         console.error(\"‚ùå Error fetching road distance:\", error);\n//         return \"N/A\";\n//     }\n// };\n\n// const Analystics = () => {\n//     const { allLocations } = useLocation();\n//     const [distances, setDistances] = useState({});\n\n//     // Extract Unique ICD Name & Fallzahl (Only Once)\n//     const uniqueICDInfo = allLocations.length > 0\n//         ? { \n//             icd_name: allLocations[0].icd_name || \"N/A\",\n//             icd_fallzahl: allLocations[0].icd_fallzahl || \"N/A\"\n//         } : null;\n\n//     // Find the user's location (if available)\n//     const userLocation = allLocations.find(loc => loc.clinic_name === \"Your Location\");\n\n//     // Fetch road distances between the user's location and all clinics\n//     useEffect(() => {\n//         const fetchDistances = async () => {\n//             if (!userLocation || !userLocation.latitude || !userLocation.longitude) {\n//                 console.warn(\"‚ö†Ô∏è No valid user location found!\");\n//                 return;\n//             }\n\n//             const newDistances = {};\n//             for (const clinic of allLocations) {\n//                 if (clinic.clinic_name === \"Your Location\") continue; // Skip user location\n\n//                 const roadDistance = await getRoadDistance(\n//                     userLocation.latitude, userLocation.longitude, // User's location\n//                     clinic.clinic_latitude, clinic.clinic_longitude // Clinic's location\n//                 );\n\n//                 newDistances[clinic.clinic_name] = roadDistance;\n//             }\n\n//             setDistances(newDistances);\n//         };\n\n//         fetchDistances();\n//     }, [userLocation, allLocations]);\n\n//     return (\n//         <>\n//             {/* Informations Box - ICD Name & ICD Fallzahl (Displayed Once) */}\n//             {uniqueICDInfo && (\n//                 <div style={styles.informationsContainer}>\n//                     <h3 style={styles.title}>Informationen zur Krankheit</h3>\n//                     <p><strong>ICD Name:</strong> {uniqueICDInfo.icd_name}</p>\n\n//                 </div>\n//             )}\n\n//             {/* Leistungserbringer Informations */}\n//             <div style={styles.analysticContainer}>\n//                 <h3 style={styles.title}>Leistungserbringer Informationen</h3>\n//                 {allLocations.length > 0 ? (\n//                     <ul style={styles.list}>\n//                         {allLocations.map((clinic, index) => {\n//                             if (clinic.clinic_name === \"Your Location\") return null; // Skip user location\n\n//                             return (\n//                                 <li key={index} style={styles.listItem}>\n//                                     {/* Circle icon before clinic name */}\n//                                     <span \n//                                         style={{\n//                                             color: lineColors[index % lineColors.length], \n//                                             fontSize: \"14px\",  \n//                                             marginRight: \"5px\",\n//                                             display: \"inline-block\",\n//                                             width: \"12px\",\n//                                             height: \"12px\",\n//                                             borderRadius: \"50%\",\n//                                             backgroundColor: lineColors[index % lineColors.length],\n//                                         }}>\n//                                     </span>\n//                                     <strong>{clinic.clinic_name}</strong> <br />\n//                                     <strong>Stadt:</strong> {clinic.clinic_city || \"N/A\"} <br />\n//                                     <strong>Chefarzt:</strong> {clinic.clinic_chefarzts || \"N/A\"} <br />\n//                                     <strong>Addresse:</strong> {clinic.clinic_address || \"N/A\"} <br />\n//                                     <strong>Anzahl von Betten:</strong> {clinic.clinic_number_of_beds || \"N/A\"} <br />\n//                                     <strong>Entfernung:</strong> <span style={styles.bold}>{distances[clinic.clinic_name] || \"Calculating...\"} km</span>\n//                                 </li>\n\n//                             );\n//                         })}\n//                     </ul>\n//                 ) : (\n//                     <p style={styles.noData}>No data available.</p>\n//                 )}\n//             </div>\n//         </>\n//     );\n// };\n\n// // CSS-in-JS styles\n// const styles = {\n//     informationsContainer: {\n//         width: \"35%\",\n//         fontWeight: \"600\",\n//         position: \"absolute\",\n//         border: \"2px solid #b3e5fc\",\n//         right: \"10px\",\n//         top: \"130px\",\n//         padding: \"15px\",\n//         backgroundColor: \"#e1ecf0\",\n//         boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\n//         borderRadius: \"8px\",\n//         marginBottom: \"15px\",\n//         fontSize: \"12px\",\n//     },\n//     analysticContainer: {\n//         width: \"35%\",\n//         fontWeight: \"600\",\n//         border: \"2px solid #b3e5fc\",\n//         position: \"absolute\",\n//         right: \"10px\",\n//         top: \"235px\",\n//         padding: \"15px\",\n//         backgroundColor: \"#e1ecf0\",\n//         boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\n//         borderRadius: \"8px\",\n//         fontSize: \"12px\",\n//     },\n//     title: {\n//         fontSize: \"14px\",\n//         marginBottom: \"8px\"\n//     },\n//     list: {\n//         listStyleType: \"none\",\n//         padding: 0,\n//         margin: 0\n//     },\n//     listItem: {\n//         marginBottom: \"8px\", // Reduce spacing between each item\n//         padding: \"8px\",\n//         borderBottom: \"1px solid #ddd\"\n//     },\n//     bold: {\n//         fontWeight: \"600\"\n//     },\n//     noData: {\n//         fontStyle: \"italic\",\n//         color: \"#999\"\n//     }\n// };\n\n// // Colors for circles (same as lines)\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// export default Analystics;\n\n// // import React, { useState, useEffect, useMemo } from \"react\";\n// // import { useLocation } from \"./LocationContext\";\n\n// // // üöÄ Function to get road distance from OSRM API\n// // const getRoadDistance = async (startLat, startLon, endLat, endLon) => {\n// //     if (!startLat || !startLon || !endLat || !endLon) {\n// //         console.warn(\"üö® Missing coordinates for distance calculation!\", { startLat, startLon, endLat, endLon });\n// //         return \"N/A\";\n// //     }\n\n// //     const url = `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`;\n\n// //     try {\n// //         const response = await fetch(url);\n// //         const data = await response.json();\n// //         if (data.routes && data.routes.length > 0) {\n// //             return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\n// //         } else {\n// //             console.warn(\"‚ö†Ô∏è No valid route found for coordinates:\", { startLat, startLon, endLat, endLon });\n// //             return \"N/A\";\n// //         }\n// //     } catch (error) {\n// //         console.error(\"‚ùå Error fetching road distance:\", error);\n// //         return \"N/A\";\n// //     }\n// // };\n\n// // const Analystics = () => {\n// //     const { allLocations } = useLocation();\n// //     const [distances, setDistances] = useState({});\n\n// //     // ‚úÖ Extract Unique ICD Information (Only Once)\n// //     const uniqueICDInfo = useMemo(() => {\n// //         return allLocations.length > 0\n// //             ? { \n// //                 icd_name: allLocations[0].icd_name || \"N/A\",\n// //                 icd_fallzahl: allLocations[0].icd_fallzahl || \"N/A\"\n// //             } \n// //             : null;\n// //     }, [allLocations]);\n\n// //     // ‚úÖ Find User's Location\n// //     const userLocation = useMemo(() => \n// //         allLocations.find(loc => loc.clinic_name === \"Your Location\"), \n// //         [allLocations]\n// //     );\n\n// //     // ‚úÖ Fetch Road Distances between User & Providers\n// //     useEffect(() => {\n// //         const fetchDistances = async () => {\n// //             if (!userLocation || !userLocation.latitude || !userLocation.longitude) {\n// //                 console.warn(\"‚ö†Ô∏è No valid user location found!\");\n// //                 return;\n// //             }\n\n// //             const newDistances = {};\n// //             for (const provider of allLocations) {\n// //                 if (provider.clinic_name === \"Your Location\") continue; // Skip user location\n\n// //                 const providerLat = provider.clinic_latitude || provider.mvz_latitude || provider.neurologe_latitude || provider.onkologe_latitude;\n// //                 const providerLon = provider.clinic_longitude || provider.mvz_longitude || provider.neurologe_longitude || provider.onkologe_longitude;\n\n// //                 if (!providerLat || !providerLon) {\n// //                     console.warn(`‚ö†Ô∏è Skipping provider with missing coordinates: ${provider.clinic_name || provider.mvz_name || provider.neurologe_name || provider.onkologe_name}`);\n// //                     continue;\n// //                 }\n\n// //                 const roadDistance = await getRoadDistance(\n// //                     userLocation.latitude, userLocation.longitude, // User's location\n// //                     providerLat, providerLon // Provider's location\n// //                 );\n\n// //                 newDistances[provider.clinic_name] = roadDistance;\n// //             }\n\n// //             setDistances(newDistances);\n// //         };\n\n// //         fetchDistances();\n// //     }, [userLocation, allLocations]);\n\n// //     return (\n// //         <>\n// //             {/* üìå ICD Information Section */}\n// //             {uniqueICDInfo && (\n// //                 <div style={styles.informationsContainer}>\n// //                     <h3 style={styles.title}>Kooperationen</h3>\n// //                     <p><strong>ICD Name:</strong> {uniqueICDInfo.icd_name}</p>\n// //                     <p><strong>Fallzahl:</strong> {uniqueICDInfo.icd_fallzahl}</p>\n// //                 </div>\n// //             )}\n\n// //             {/* üìå Leistungserbringer (Providers) Information */}\n// //             <div style={styles.analysticContainer}>\n// //                 <h3 style={styles.title}>Leistungserbringer Informationen</h3>\n// //                 {allLocations.length > 0 ? (\n// //                     <ul style={styles.list}>\n// //                         {allLocations.map((provider, index) => {\n// //                             if (provider.clinic_name === \"Your Location\") return null; // Skip user location\n\n// //                             return (\n// //                                 <li key={index} style={styles.listItem}>\n// //                                     {/* üîµ Colored Circle Indicator */}\n// //                                     <span \n// //                                         style={{\n// //                                             color: lineColors[index % lineColors.length], \n// //                                             fontSize: \"14px\",  \n// //                                             marginRight: \"5px\",\n// //                                             display: \"inline-block\",\n// //                                             width: \"12px\",\n// //                                             height: \"12px\",\n// //                                             borderRadius: \"50%\",\n// //                                             backgroundColor: lineColors[index % lineColors.length],\n// //                                         }}>\n// //                                     </span>\n// //                                     <strong>{provider.clinic_name || provider.mvz_name || provider.neurologe_name || provider.onkologe_name}</strong> <br />\n// //                                     <strong>Stadt:</strong> {provider.clinic_city || provider.mvz_city || provider.neurologe_city || provider.onkologe_city || \"N/A\"} <br />\n// //                                     <strong>Chefarzt:</strong> {provider.clinic_chefarzts || \"N/A\"} <br />\n// //                                     <strong>Addresse:</strong> {provider.clinic_address || provider.mvz_address || provider.neurologe_address || provider.onkologe_address || \"N/A\"} <br />\n// //                                     <strong>Anzahl von Betten:</strong> {provider.clinic_number_of_beds || \"N/A\"} <br />\n// //                                     <strong>Entfernung:</strong> <span style={styles.bold}>{distances[provider.clinic_name] || \"Calculating...\"} km</span>\n// //                                 </li>\n// //                             );\n// //                         })}\n// //                     </ul>\n// //                 ) : (\n// //                     <p style={styles.noData}>No data available.</p>\n// //                 )}\n// //             </div>\n// //         </>\n// //     );\n// // };\n\n// // // üé® CSS Styles\n// // const styles = {\n// //     informationsContainer: {\n// //         width: \"35%\",\n// //         fontWeight: \"600\",\n// //         position: \"absolute\",\n// //         border: \"2px solid #b3e5fc\",\n// //         right: \"10px\",\n// //         top: \"130px\",\n// //         bottom : \"570px\",\n// //         padding: \"15px\",\n// //         backgroundColor: \"#e1ecf0\",\n// //         boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\n// //         borderRadius: \"8px\",\n// //         marginBottom: \"15px\",\n// //         fontSize: \"12px\",\n// //     },\n// //     analysticContainer: {\n// //         width: \"35%\",\n// //         fontWeight: \"600\",\n// //         border: \"2px solid #b3e5fc\",\n// //         position: \"absolute\",\n// //         right: \"10px\",\n// //         top: \"235px\",\n// //         padding: \"15px\",\n// //         backgroundColor: \"#e1ecf0\",\n// //         boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\n// //         borderRadius: \"8px\",\n// //         fontSize: \"12px\",\n// //     },\n// //     title: {\n// //         fontSize: \"14px\",\n// //         marginBottom: \"8px\"\n// //     },\n// //     list: {\n// //         listStyleType: \"none\",\n// //         padding: 0,\n// //         margin: 0\n// //     },\n// //     listItem: {\n// //         marginBottom: \"8px\", // Reduce spacing between each item\n// //         padding: \"8px\",\n// //         borderBottom: \"1px solid #ddd\"\n// //     },\n// //     bold: {\n// //         fontWeight: \"600\"\n// //     },\n// //     noData: {\n// //         fontStyle: \"italic\",\n// //         color: \"#999\"\n// //     }\n// // };\n// // const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n// // export default Analystics;\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { useLocation } from \"./LocationContext\";\n\n// üéØ Predefined colors for providers\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\n\n// üöÄ Function to get road distance from OSRM API\nconst getRoadDistance = async (startLat, startLon, endLat, endLon) => {\n  if (!startLat || !startLon || !endLat || !endLon) {\n    console.warn(\"üö® Missing coordinates for distance calculation!\", {\n      startLat,\n      startLon,\n      endLat,\n      endLon\n    });\n    return \"N/A\";\n  }\n  const url = `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    if (data.routes && data.routes.length > 0) {\n      return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\n    } else {\n      console.warn(\"‚ö†Ô∏è No valid route found for coordinates:\", {\n        startLat,\n        startLon,\n        endLat,\n        endLon\n      });\n      return \"N/A\";\n    }\n  } catch (error) {\n    console.error(\"‚ùå Error fetching road distance:\", error);\n    return \"N/A\";\n  }\n};\nconst Analystics = () => {\n  _s();\n  const {\n    allLocations\n  } = useLocation();\n  const [distances, setDistances] = useState({});\n\n  // ‚úÖ Extract Unique ICD Information (Only Once)\n  const uniqueICDInfo = useMemo(() => {\n    return allLocations.length > 0 ? {\n      icd_name: allLocations[0].icd_name || \"N/A\",\n      icd_fallzahl: allLocations[0].icd_fallzahl || \"N/A\"\n    } : null;\n  }, [allLocations]);\n\n  // ‚úÖ Find User's Location\n  const userLocation = useMemo(() => allLocations.find(loc => loc.clinic_name === \"Your Location\"), [allLocations]);\n\n  // ‚úÖ Fetch Road Distances for ALL PROVIDERS\n  useEffect(() => {\n    const fetchDistances = async () => {\n      if (!userLocation || !userLocation.latitude || !userLocation.longitude) {\n        console.warn(\"‚ö†Ô∏è No valid user location found!\");\n        return;\n      }\n      const newDistances = {};\n      for (const provider of allLocations) {\n        if (provider.clinic_name === \"Your Location\") continue; // Skip user location\n\n        // üîπ Identify the provider type dynamically\n        const providerType = provider.clinic_name ? \"clinic\" : provider.mvz_name ? \"mvz\" : provider.asv_name ? \"asv\" : provider.niedergelassene_name ? \"niedergelassene\" : null;\n        const providerName = provider.clinic_name || provider.mvz_name || provider.asv_name || provider.niedergelassene_name;\n        if (!providerType || !providerName) continue;\n        const providerLat = provider.clinic_latitude || provider.mvz_latitude || provider.asv_latitude || provider.niedergelassene_latitude;\n        const providerLon = provider.clinic_longitude || provider.mvz_longitude || provider.asv_longitude || provider.niedergelassene_longitude;\n        if (!providerLat || !providerLon) {\n          console.warn(`‚ö†Ô∏è Skipping provider with missing coordinates: ${providerName}`);\n          continue;\n        }\n\n        // üîπ Fetch the road distance\n        const roadDistance = await getRoadDistance(userLocation.latitude, userLocation.longitude, providerLat, providerLon);\n\n        // üîπ Store distance dynamically\n        newDistances[`${providerType}-${providerName}`] = roadDistance;\n      }\n      setDistances(newDistances);\n    };\n    fetchDistances();\n  }, [userLocation, allLocations]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.informationsContainer,\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: styles.title,\n        children: \"Informationen zur Kooperationen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.analysticContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: styles.title,\n        children: \"Leistungserbringer Informationen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 17\n      }, this), allLocations.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: styles.list,\n        children: allLocations.map((provider, index) => {\n          if (provider.clinic_name === \"Your Location\") return null; // Skip user location\n\n          // üîπ Dynamically determine provider type and name\n          const providerType = provider.clinic_name ? \"clinic\" : provider.mvz_name ? \"mvz\" : provider.asv_name ? \"asv\" : provider.niedergelassene_name ? \"niedergelassene\" : null;\n          const providerName = provider.clinic_name || provider.mvz_name || provider.asv_name || provider.niedergelassene_name;\n          if (!providerType || !providerName) return null;\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            style: styles.listItem,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: lineColors[index % lineColors.length],\n                fontSize: \"14px\",\n                marginRight: \"5px\",\n                display: \"inline-block\",\n                width: \"12px\",\n                height: \"12px\",\n                borderRadius: \"50%\",\n                backgroundColor: lineColors[index % lineColors.length]\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: providerName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 37\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 69\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Stadt:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 37\n            }, this), \" \", provider.clinic_city || provider.mvz_city || provider.asv_city || provider.niedergelassene_city || \"N/A\", \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 168\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Addresse:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 37\n            }, this), \" \", provider.clinic_address || provider.mvz_address || provider.asv_address || provider.niedergelassene_address || \"N/A\", \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 183\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Anzahl von Betten:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 37\n            }, this), \" \", provider.clinic_number_of_beds || \"N/A\", \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 115\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Beste Route:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: styles.bold,\n              children: [distances[`${providerType}-${providerName}`] || \"Calculating...\", \" km\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 520,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        style: styles.noData,\n        children: \"No data available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n// üé® CSS Styles\n_s(Analystics, \"swuIu1i25uAZ3JJHAYJYfr9d9nA=\", false, function () {\n  return [useLocation];\n});\n_c = Analystics;\nconst styles = {\n  informationsContainer: {\n    width: \"35%\",\n    fontWeight: \"600\",\n    position: \"absolute\",\n    border: \"2px solid #b3e5fc\",\n    right: \"10px\",\n    top: \"130px\",\n    bottom: \"650px\",\n    padding: \"15px\",\n    backgroundColor: \"#e1ecf0\",\n    boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\n    borderRadius: \"8px\",\n    marginBottom: \"15px\",\n    fontSize: \"12px\"\n  },\n  analysticContainer: {\n    width: \"35%\",\n    fontWeight: \"600\",\n    border: \"2px solid #b3e5fc\",\n    position: \"absolute\",\n    right: \"10px\",\n    top: \"220px\",\n    padding: \"15px\",\n    backgroundColor: \"#e1ecf0\",\n    boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\n    borderRadius: \"8px\",\n    fontSize: \"12px\"\n  },\n  title: {\n    fontSize: \"14px\",\n    marginBottom: \"8px\"\n  },\n  list: {\n    listStyleType: \"none\",\n    padding: 0,\n    margin: 0\n  },\n  listItem: {\n    marginBottom: \"8px\",\n    // Reduce spacing between each item\n    padding: \"8px\",\n    borderBottom: \"1px solid #ddd\"\n  },\n  bold: {\n    fontWeight: \"600\"\n  },\n  noData: {\n    fontStyle: \"italic\",\n    color: \"#999\"\n  }\n};\nexport default Analystics;\nvar _c;\n$RefreshReg$(_c, \"Analystics\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useLocation","jsxDEV","_jsxDEV","Fragment","_Fragment","lineColors","getRoadDistance","startLat","startLon","endLat","endLon","console","warn","url","response","fetch","data","json","routes","length","distance","toFixed","error","Analystics","_s","allLocations","distances","setDistances","uniqueICDInfo","icd_name","icd_fallzahl","userLocation","find","loc","clinic_name","fetchDistances","latitude","longitude","newDistances","provider","providerType","mvz_name","asv_name","niedergelassene_name","providerName","providerLat","clinic_latitude","mvz_latitude","asv_latitude","niedergelassene_latitude","providerLon","clinic_longitude","mvz_longitude","asv_longitude","niedergelassene_longitude","roadDistance","children","style","styles","informationsContainer","title","fileName","_jsxFileName","lineNumber","columnNumber","analysticContainer","list","map","index","listItem","color","fontSize","marginRight","display","width","height","borderRadius","backgroundColor","clinic_city","mvz_city","asv_city","niedergelassene_city","clinic_address","mvz_address","asv_address","niedergelassene_address","clinic_number_of_beds","bold","noData","_c","fontWeight","position","border","right","top","bottom","padding","boxShadow","marginBottom","listStyleType","margin","borderBottom","fontStyle","$RefreshReg$"],"sources":["C:/Users/aidah/ng-project/frontend/src/components/Analystics.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"./LocationContext\";\r\n\r\n// // Function to get road distance from OSRM API\r\n// const getRoadDistance = async (startLat, startLon, endLat, endLon) => {\r\n//     const url = `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`;\r\n\r\n//     try {\r\n//         const response = await fetch(url);\r\n//         const data = await response.json();\r\n//         if (data.routes && data.routes.length > 0) {\r\n//             return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\r\n//         } else {\r\n//             return \"N/A\";\r\n//         }\r\n//     } catch (error) {\r\n//         console.error(\"‚ùå Error fetching road distance:\", error);\r\n//         return \"N/A\";\r\n//     }\r\n// };\r\n\r\n// const Analystics = () => {\r\n//     const { allLocations } = useLocation();\r\n//     const [distances, setDistances] = useState({});\r\n    \r\n//     // Extract Unique ICD Name & Fallzahl (Only Once)\r\n//     const uniqueICDInfo = allLocations.length > 0\r\n//         ? { \r\n//             icd_name: allLocations[0].icd_name || \"N/A\",\r\n//             icd_fallzahl: allLocations[0].icd_fallzahl || \"N/A\"\r\n//         } : null;\r\n\r\n//     // Find the user's location (if available)\r\n//     const userLocation = allLocations.find(loc => loc.clinic_name === \"Your Location\");\r\n\r\n//     // Fetch road distances between the user's location and all clinics\r\n//     useEffect(() => {\r\n//         const fetchDistances = async () => {\r\n//             if (!userLocation || !userLocation.latitude || !userLocation.longitude) {\r\n//                 console.warn(\"‚ö†Ô∏è No valid user location found!\");\r\n//                 return;\r\n//             }\r\n\r\n//             const newDistances = {};\r\n//             for (const clinic of allLocations) {\r\n//                 if (clinic.clinic_name === \"Your Location\") continue; // Skip user location\r\n\r\n//                 const roadDistance = await getRoadDistance(\r\n//                     userLocation.latitude, userLocation.longitude, // User's location\r\n//                     clinic.clinic_latitude, clinic.clinic_longitude // Clinic's location\r\n//                 );\r\n\r\n//                 newDistances[clinic.clinic_name] = roadDistance;\r\n//             }\r\n\r\n//             setDistances(newDistances);\r\n//         };\r\n\r\n//         fetchDistances();\r\n//     }, [userLocation, allLocations]);\r\n\r\n//     return (\r\n//         <>\r\n//             {/* Informations Box - ICD Name & ICD Fallzahl (Displayed Once) */}\r\n//             {uniqueICDInfo && (\r\n//                 <div style={styles.informationsContainer}>\r\n//                     <h3 style={styles.title}>Informationen zur Krankheit</h3>\r\n//                     <p><strong>ICD Name:</strong> {uniqueICDInfo.icd_name}</p>\r\n                    \r\n//                 </div>\r\n//             )}\r\n\r\n//             {/* Leistungserbringer Informations */}\r\n//             <div style={styles.analysticContainer}>\r\n//                 <h3 style={styles.title}>Leistungserbringer Informationen</h3>\r\n//                 {allLocations.length > 0 ? (\r\n//                     <ul style={styles.list}>\r\n//                         {allLocations.map((clinic, index) => {\r\n//                             if (clinic.clinic_name === \"Your Location\") return null; // Skip user location\r\n\r\n//                             return (\r\n//                                 <li key={index} style={styles.listItem}>\r\n//                                     {/* Circle icon before clinic name */}\r\n//                                     <span \r\n//                                         style={{\r\n//                                             color: lineColors[index % lineColors.length], \r\n//                                             fontSize: \"14px\",  \r\n//                                             marginRight: \"5px\",\r\n//                                             display: \"inline-block\",\r\n//                                             width: \"12px\",\r\n//                                             height: \"12px\",\r\n//                                             borderRadius: \"50%\",\r\n//                                             backgroundColor: lineColors[index % lineColors.length],\r\n//                                         }}>\r\n//                                     </span>\r\n//                                     <strong>{clinic.clinic_name}</strong> <br />\r\n//                                     <strong>Stadt:</strong> {clinic.clinic_city || \"N/A\"} <br />\r\n//                                     <strong>Chefarzt:</strong> {clinic.clinic_chefarzts || \"N/A\"} <br />\r\n//                                     <strong>Addresse:</strong> {clinic.clinic_address || \"N/A\"} <br />\r\n//                                     <strong>Anzahl von Betten:</strong> {clinic.clinic_number_of_beds || \"N/A\"} <br />\r\n//                                     <strong>Entfernung:</strong> <span style={styles.bold}>{distances[clinic.clinic_name] || \"Calculating...\"} km</span>\r\n//                                 </li>\r\n\r\n\r\n//                             );\r\n//                         })}\r\n//                     </ul>\r\n//                 ) : (\r\n//                     <p style={styles.noData}>No data available.</p>\r\n//                 )}\r\n//             </div>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// // CSS-in-JS styles\r\n// const styles = {\r\n//     informationsContainer: {\r\n//         width: \"35%\",\r\n//         fontWeight: \"600\",\r\n//         position: \"absolute\",\r\n//         border: \"2px solid #b3e5fc\",\r\n//         right: \"10px\",\r\n//         top: \"130px\",\r\n//         padding: \"15px\",\r\n//         backgroundColor: \"#e1ecf0\",\r\n//         boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\r\n//         borderRadius: \"8px\",\r\n//         marginBottom: \"15px\",\r\n//         fontSize: \"12px\",\r\n//     },\r\n//     analysticContainer: {\r\n//         width: \"35%\",\r\n//         fontWeight: \"600\",\r\n//         border: \"2px solid #b3e5fc\",\r\n//         position: \"absolute\",\r\n//         right: \"10px\",\r\n//         top: \"235px\",\r\n//         padding: \"15px\",\r\n//         backgroundColor: \"#e1ecf0\",\r\n//         boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\r\n//         borderRadius: \"8px\",\r\n//         fontSize: \"12px\",\r\n//     },\r\n//     title: {\r\n//         fontSize: \"14px\",\r\n//         marginBottom: \"8px\"\r\n//     },\r\n//     list: {\r\n//         listStyleType: \"none\",\r\n//         padding: 0,\r\n//         margin: 0\r\n//     },\r\n//     listItem: {\r\n//         marginBottom: \"8px\", // Reduce spacing between each item\r\n//         padding: \"8px\",\r\n//         borderBottom: \"1px solid #ddd\"\r\n//     },\r\n//     bold: {\r\n//         fontWeight: \"600\"\r\n//     },\r\n//     noData: {\r\n//         fontStyle: \"italic\",\r\n//         color: \"#999\"\r\n//     }\r\n// };\r\n\r\n// // Colors for circles (same as lines)\r\n// const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// export default Analystics;\r\n\r\n\r\n// // import React, { useState, useEffect, useMemo } from \"react\";\r\n// // import { useLocation } from \"./LocationContext\";\r\n\r\n// // // üöÄ Function to get road distance from OSRM API\r\n// // const getRoadDistance = async (startLat, startLon, endLat, endLon) => {\r\n// //     if (!startLat || !startLon || !endLat || !endLon) {\r\n// //         console.warn(\"üö® Missing coordinates for distance calculation!\", { startLat, startLon, endLat, endLon });\r\n// //         return \"N/A\";\r\n// //     }\r\n\r\n// //     const url = `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`;\r\n\r\n// //     try {\r\n// //         const response = await fetch(url);\r\n// //         const data = await response.json();\r\n// //         if (data.routes && data.routes.length > 0) {\r\n// //             return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\r\n// //         } else {\r\n// //             console.warn(\"‚ö†Ô∏è No valid route found for coordinates:\", { startLat, startLon, endLat, endLon });\r\n// //             return \"N/A\";\r\n// //         }\r\n// //     } catch (error) {\r\n// //         console.error(\"‚ùå Error fetching road distance:\", error);\r\n// //         return \"N/A\";\r\n// //     }\r\n// // };\r\n\r\n// // const Analystics = () => {\r\n// //     const { allLocations } = useLocation();\r\n// //     const [distances, setDistances] = useState({});\r\n\r\n// //     // ‚úÖ Extract Unique ICD Information (Only Once)\r\n// //     const uniqueICDInfo = useMemo(() => {\r\n// //         return allLocations.length > 0\r\n// //             ? { \r\n// //                 icd_name: allLocations[0].icd_name || \"N/A\",\r\n// //                 icd_fallzahl: allLocations[0].icd_fallzahl || \"N/A\"\r\n// //             } \r\n// //             : null;\r\n// //     }, [allLocations]);\r\n\r\n// //     // ‚úÖ Find User's Location\r\n// //     const userLocation = useMemo(() => \r\n// //         allLocations.find(loc => loc.clinic_name === \"Your Location\"), \r\n// //         [allLocations]\r\n// //     );\r\n\r\n// //     // ‚úÖ Fetch Road Distances between User & Providers\r\n// //     useEffect(() => {\r\n// //         const fetchDistances = async () => {\r\n// //             if (!userLocation || !userLocation.latitude || !userLocation.longitude) {\r\n// //                 console.warn(\"‚ö†Ô∏è No valid user location found!\");\r\n// //                 return;\r\n// //             }\r\n\r\n// //             const newDistances = {};\r\n// //             for (const provider of allLocations) {\r\n// //                 if (provider.clinic_name === \"Your Location\") continue; // Skip user location\r\n\r\n// //                 const providerLat = provider.clinic_latitude || provider.mvz_latitude || provider.neurologe_latitude || provider.onkologe_latitude;\r\n// //                 const providerLon = provider.clinic_longitude || provider.mvz_longitude || provider.neurologe_longitude || provider.onkologe_longitude;\r\n\r\n// //                 if (!providerLat || !providerLon) {\r\n// //                     console.warn(`‚ö†Ô∏è Skipping provider with missing coordinates: ${provider.clinic_name || provider.mvz_name || provider.neurologe_name || provider.onkologe_name}`);\r\n// //                     continue;\r\n// //                 }\r\n\r\n// //                 const roadDistance = await getRoadDistance(\r\n// //                     userLocation.latitude, userLocation.longitude, // User's location\r\n// //                     providerLat, providerLon // Provider's location\r\n// //                 );\r\n\r\n// //                 newDistances[provider.clinic_name] = roadDistance;\r\n// //             }\r\n\r\n// //             setDistances(newDistances);\r\n// //         };\r\n\r\n// //         fetchDistances();\r\n// //     }, [userLocation, allLocations]);\r\n\r\n// //     return (\r\n// //         <>\r\n// //             {/* üìå ICD Information Section */}\r\n// //             {uniqueICDInfo && (\r\n// //                 <div style={styles.informationsContainer}>\r\n// //                     <h3 style={styles.title}>Kooperationen</h3>\r\n// //                     <p><strong>ICD Name:</strong> {uniqueICDInfo.icd_name}</p>\r\n// //                     <p><strong>Fallzahl:</strong> {uniqueICDInfo.icd_fallzahl}</p>\r\n// //                 </div>\r\n// //             )}\r\n\r\n// //             {/* üìå Leistungserbringer (Providers) Information */}\r\n// //             <div style={styles.analysticContainer}>\r\n// //                 <h3 style={styles.title}>Leistungserbringer Informationen</h3>\r\n// //                 {allLocations.length > 0 ? (\r\n// //                     <ul style={styles.list}>\r\n// //                         {allLocations.map((provider, index) => {\r\n// //                             if (provider.clinic_name === \"Your Location\") return null; // Skip user location\r\n\r\n// //                             return (\r\n// //                                 <li key={index} style={styles.listItem}>\r\n// //                                     {/* üîµ Colored Circle Indicator */}\r\n// //                                     <span \r\n// //                                         style={{\r\n// //                                             color: lineColors[index % lineColors.length], \r\n// //                                             fontSize: \"14px\",  \r\n// //                                             marginRight: \"5px\",\r\n// //                                             display: \"inline-block\",\r\n// //                                             width: \"12px\",\r\n// //                                             height: \"12px\",\r\n// //                                             borderRadius: \"50%\",\r\n// //                                             backgroundColor: lineColors[index % lineColors.length],\r\n// //                                         }}>\r\n// //                                     </span>\r\n// //                                     <strong>{provider.clinic_name || provider.mvz_name || provider.neurologe_name || provider.onkologe_name}</strong> <br />\r\n// //                                     <strong>Stadt:</strong> {provider.clinic_city || provider.mvz_city || provider.neurologe_city || provider.onkologe_city || \"N/A\"} <br />\r\n// //                                     <strong>Chefarzt:</strong> {provider.clinic_chefarzts || \"N/A\"} <br />\r\n// //                                     <strong>Addresse:</strong> {provider.clinic_address || provider.mvz_address || provider.neurologe_address || provider.onkologe_address || \"N/A\"} <br />\r\n// //                                     <strong>Anzahl von Betten:</strong> {provider.clinic_number_of_beds || \"N/A\"} <br />\r\n// //                                     <strong>Entfernung:</strong> <span style={styles.bold}>{distances[provider.clinic_name] || \"Calculating...\"} km</span>\r\n// //                                 </li>\r\n// //                             );\r\n// //                         })}\r\n// //                     </ul>\r\n// //                 ) : (\r\n// //                     <p style={styles.noData}>No data available.</p>\r\n// //                 )}\r\n// //             </div>\r\n// //         </>\r\n// //     );\r\n// // };\r\n\r\n// // // üé® CSS Styles\r\n// // const styles = {\r\n// //     informationsContainer: {\r\n// //         width: \"35%\",\r\n// //         fontWeight: \"600\",\r\n// //         position: \"absolute\",\r\n// //         border: \"2px solid #b3e5fc\",\r\n// //         right: \"10px\",\r\n// //         top: \"130px\",\r\n// //         bottom : \"570px\",\r\n// //         padding: \"15px\",\r\n// //         backgroundColor: \"#e1ecf0\",\r\n// //         boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\r\n// //         borderRadius: \"8px\",\r\n// //         marginBottom: \"15px\",\r\n// //         fontSize: \"12px\",\r\n// //     },\r\n// //     analysticContainer: {\r\n// //         width: \"35%\",\r\n// //         fontWeight: \"600\",\r\n// //         border: \"2px solid #b3e5fc\",\r\n// //         position: \"absolute\",\r\n// //         right: \"10px\",\r\n// //         top: \"235px\",\r\n// //         padding: \"15px\",\r\n// //         backgroundColor: \"#e1ecf0\",\r\n// //         boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\r\n// //         borderRadius: \"8px\",\r\n// //         fontSize: \"12px\",\r\n// //     },\r\n// //     title: {\r\n// //         fontSize: \"14px\",\r\n// //         marginBottom: \"8px\"\r\n// //     },\r\n// //     list: {\r\n// //         listStyleType: \"none\",\r\n// //         padding: 0,\r\n// //         margin: 0\r\n// //     },\r\n// //     listItem: {\r\n// //         marginBottom: \"8px\", // Reduce spacing between each item\r\n// //         padding: \"8px\",\r\n// //         borderBottom: \"1px solid #ddd\"\r\n// //     },\r\n// //     bold: {\r\n// //         fontWeight: \"600\"\r\n// //     },\r\n// //     noData: {\r\n// //         fontStyle: \"italic\",\r\n// //         color: \"#999\"\r\n// //     }\r\n// // };\r\n// // const lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n// // export default Analystics;\r\n\r\nimport React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useLocation } from \"./LocationContext\";\r\n\r\n// üéØ Predefined colors for providers\r\nconst lineColors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"pink\", \"yellow\"];\r\n\r\n// üöÄ Function to get road distance from OSRM API\r\nconst getRoadDistance = async (startLat, startLon, endLat, endLon) => {\r\n    if (!startLat || !startLon || !endLat || !endLon) {\r\n        console.warn(\"üö® Missing coordinates for distance calculation!\", { startLat, startLon, endLat, endLon });\r\n        return \"N/A\";\r\n    }\r\n\r\n    const url = `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`;\r\n\r\n    try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        if (data.routes && data.routes.length > 0) {\r\n            return (data.routes[0].distance / 1000).toFixed(2); // Convert meters to km\r\n        } else {\r\n            console.warn(\"‚ö†Ô∏è No valid route found for coordinates:\", { startLat, startLon, endLat, endLon });\r\n            return \"N/A\";\r\n        }\r\n    } catch (error) {\r\n        console.error(\"‚ùå Error fetching road distance:\", error);\r\n        return \"N/A\";\r\n    }\r\n};\r\n\r\nconst Analystics = () => {\r\n    const { allLocations } = useLocation();\r\n    const [distances, setDistances] = useState({});\r\n\r\n    // ‚úÖ Extract Unique ICD Information (Only Once)\r\n    const uniqueICDInfo = useMemo(() => {\r\n        return allLocations.length > 0\r\n            ? { \r\n                icd_name: allLocations[0].icd_name || \"N/A\",\r\n                icd_fallzahl: allLocations[0].icd_fallzahl || \"N/A\"\r\n            } \r\n            : null;\r\n    }, [allLocations]);\r\n\r\n    // ‚úÖ Find User's Location\r\n    const userLocation = useMemo(() => \r\n        allLocations.find(loc => loc.clinic_name === \"Your Location\"), \r\n        [allLocations]\r\n    );\r\n\r\n    // ‚úÖ Fetch Road Distances for ALL PROVIDERS\r\n    useEffect(() => {\r\n        const fetchDistances = async () => {\r\n            if (!userLocation || !userLocation.latitude || !userLocation.longitude) {\r\n                console.warn(\"‚ö†Ô∏è No valid user location found!\");\r\n                return;\r\n            }\r\n\r\n            const newDistances = {};\r\n\r\n            for (const provider of allLocations) {\r\n                if (provider.clinic_name === \"Your Location\") continue; // Skip user location\r\n\r\n                // üîπ Identify the provider type dynamically\r\n                const providerType = provider.clinic_name \r\n                    ? \"clinic\"\r\n                    : provider.mvz_name \r\n                    ? \"mvz\"\r\n                    : provider.asv_name \r\n                    ? \"asv\"\r\n                    : provider.niedergelassene_name \r\n                    ? \"niedergelassene\"\r\n                    : null;\r\n\r\n                const providerName = provider.clinic_name || provider.mvz_name || provider.asv_name || provider.niedergelassene_name;\r\n\r\n                if (!providerType || !providerName) continue;\r\n\r\n                const providerLat = provider.clinic_latitude || provider.mvz_latitude || provider.asv_latitude || provider.niedergelassene_latitude;\r\n                const providerLon = provider.clinic_longitude || provider.mvz_longitude || provider.asv_longitude || provider.niedergelassene_longitude;\r\n\r\n                if (!providerLat || !providerLon) {\r\n                    console.warn(`‚ö†Ô∏è Skipping provider with missing coordinates: ${providerName}`);\r\n                    continue;\r\n                }\r\n\r\n                // üîπ Fetch the road distance\r\n                const roadDistance = await getRoadDistance(\r\n                    userLocation.latitude, userLocation.longitude, \r\n                    providerLat, providerLon\r\n                );\r\n\r\n                // üîπ Store distance dynamically\r\n                newDistances[`${providerType}-${providerName}`] = roadDistance;\r\n            }\r\n\r\n            setDistances(newDistances);\r\n        };\r\n\r\n        fetchDistances();\r\n    }, [userLocation, allLocations]);\r\n\r\n    return (\r\n        <>\r\n            {/* üìå ICD Information Section\r\n            {uniqueICDInfo && (\r\n                <div style={styles.informationsContainer}>\r\n                    <h3 style={styles.title}>Informationen zur Kooperationen</h3>\r\n                    <p><strong>Kooperation mit :</strong> {uniqueICDInfo.icd_name}</p>\r\n                    <p><strong>Fallzahl:</strong> {uniqueICDInfo.icd_fallzahl}</p>\r\n                </div>\r\n            )} */}\r\n            <div style={styles.informationsContainer} >\r\n            <h3 style={styles.title}>Informationen zur Kooperationen</h3>\r\n            </div>\r\n            {/* üìå Leistungserbringer (Providers) Information */}\r\n            <div style={styles.analysticContainer}>\r\n                <h3 style={styles.title}>Leistungserbringer Informationen</h3>\r\n                {allLocations.length > 0 ? (\r\n                    <ul style={styles.list}>\r\n                        {allLocations.map((provider, index) => {\r\n                            if (provider.clinic_name === \"Your Location\") return null; // Skip user location\r\n\r\n                            // üîπ Dynamically determine provider type and name\r\n                            const providerType = provider.clinic_name \r\n                                ? \"clinic\"\r\n                                : provider.mvz_name \r\n                                ? \"mvz\"\r\n                                : provider.asv_name \r\n                                ? \"asv\"\r\n                                : provider.niedergelassene_name \r\n                                ? \"niedergelassene\"\r\n                                : null;\r\n\r\n                            const providerName = provider.clinic_name || provider.mvz_name || provider.asv_name || provider.niedergelassene_name;\r\n\r\n                            if (!providerType || !providerName) return null;\r\n\r\n                            return (\r\n                                <li key={index} style={styles.listItem}>\r\n                                    {/* üîµ Colored Circle Indicator */}\r\n                                    <span \r\n                                        style={{\r\n                                            color: lineColors[index % lineColors.length], \r\n                                            fontSize: \"14px\",  \r\n                                            marginRight: \"5px\",\r\n                                            display: \"inline-block\",\r\n                                            width: \"12px\",\r\n                                            height: \"12px\",\r\n                                            borderRadius: \"50%\",\r\n                                            backgroundColor: lineColors[index % lineColors.length],\r\n                                        }}>\r\n                                    </span>\r\n                                    <strong>{providerName}</strong> <br />\r\n                                    <strong>Stadt:</strong> {provider.clinic_city || provider.mvz_city || provider.asv_city || provider.niedergelassene_city || \"N/A\"} <br />\r\n                                    <strong>Addresse:</strong> {provider.clinic_address || provider.mvz_address || provider.asv_address || provider.niedergelassene_address || \"N/A\"} <br />\r\n                                    <strong>Anzahl von Betten:</strong> {provider.clinic_number_of_beds || \"N/A\"} <br />\r\n                                    <strong>Beste Route:</strong> \r\n                                    <span style={styles.bold}>\r\n                                        {distances[`${providerType}-${providerName}`] || \"Calculating...\"} km\r\n                                    </span>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                ) : (\r\n                    <p style={styles.noData}>No data available.</p>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n// üé® CSS Styles\r\nconst styles = {\r\n    informationsContainer: {\r\n        width: \"35%\",\r\n        fontWeight: \"600\",\r\n        position: \"absolute\",\r\n        border: \"2px solid #b3e5fc\",\r\n        right: \"10px\",\r\n        top: \"130px\",\r\n        bottom : \"650px\",\r\n        padding: \"15px\",\r\n        backgroundColor: \"#e1ecf0\",\r\n        boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\r\n        borderRadius: \"8px\",\r\n        marginBottom: \"15px\",\r\n        fontSize: \"12px\",\r\n    },\r\n    analysticContainer: {\r\n        width: \"35%\",\r\n        fontWeight: \"600\",\r\n        border: \"2px solid #b3e5fc\",\r\n        position: \"absolute\",\r\n        right: \"10px\",\r\n        top: \"220px\",\r\n        padding: \"15px\",\r\n        backgroundColor: \"#e1ecf0\",\r\n        boxShadow: \"0px 0px 8px rgba(0, 0, 0, 0.1)\",\r\n        borderRadius: \"8px\",\r\n        fontSize: \"12px\",\r\n    },\r\n    title: {\r\n        fontSize: \"14px\",\r\n        marginBottom: \"8px\"\r\n    },\r\n    list: {\r\n        listStyleType: \"none\",\r\n        padding: 0,\r\n        margin: 0\r\n    },\r\n    listItem: {\r\n        marginBottom: \"8px\", // Reduce spacing between each item\r\n        padding: \"8px\",\r\n        borderBottom: \"1px solid #ddd\"\r\n    },\r\n    bold: {\r\n        fontWeight: \"600\"\r\n    },\r\n    noData: {\r\n        fontStyle: \"italic\",\r\n        color: \"#999\"\r\n    }\r\n};\r\n\r\n\r\nexport default Analystics;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}